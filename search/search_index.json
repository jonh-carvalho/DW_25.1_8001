{"config":{"indexing":"full","lang":["pt"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Desenvolvimento Web C\u00f3digo da Disciplina: IBM1738/13006249-8003 Disciplina que apresenta a introdu\u00e7\u00e3o a programa\u00e7\u00e3o web: HTML, CSS e Javascript. - Linguagens: HTML, CSS e Javascript - Tecnologias: Visual Studio Code e Github As APs dever\u00e3o ser enviadas no github e publicadas no github pages.","title":"Home"},{"location":"Ferramentas/Sites%20Importantes/","text":"Sites Importantes Web.dev [ responsividade, media queries, etc...] W3resource tutorial W3resource exerc\u00edcios Quackit - Grid e Flexbox Tutorial Republic - Web Tech Avalia\u00e7\u00e3o Frontend checklist Wcag Wcag Guide Html check Css check Link check","title":"Sites Importantes"},{"location":"Ferramentas/Sites%20Importantes/#sites-importantes","text":"Web.dev [ responsividade, media queries, etc...] W3resource tutorial W3resource exerc\u00edcios Quackit - Grid e Flexbox Tutorial Republic - Web Tech","title":"Sites Importantes"},{"location":"Ferramentas/Sites%20Importantes/#avaliacao","text":"Frontend checklist Wcag Wcag Guide Html check Css check Link check","title":"Avalia\u00e7\u00e3o"},{"location":"Ferramentas/validadores/","text":"Validadores HTML CSS LINK","title":"Validadores"},{"location":"Ferramentas/validadores/#validadores","text":"HTML CSS LINK","title":"Validadores"},{"location":"Ferramentas/w3c/","text":"w3c O World Wide Web Consortium \u00e9 a principal organiza\u00e7\u00e3o de padroniza\u00e7\u00e3o da World Wide Web. Consiste em um cons\u00f3rcio internacional com 450 membros, agrega empresas, \u00f3rg\u00e3os governamentais e organiza\u00e7\u00f5es independentes com a finalidade de estabelecer padr\u00f5es para a cria\u00e7\u00e3o e a interpreta\u00e7\u00e3o de conte\u00fados para a Web.","title":"W3C Web Standards"},{"location":"Ferramentas/w3c/#w3c","text":"O World Wide Web Consortium \u00e9 a principal organiza\u00e7\u00e3o de padroniza\u00e7\u00e3o da World Wide Web. Consiste em um cons\u00f3rcio internacional com 450 membros, agrega empresas, \u00f3rg\u00e3os governamentais e organiza\u00e7\u00f5es independentes com a finalidade de estabelecer padr\u00f5es para a cria\u00e7\u00e3o e a interpreta\u00e7\u00e3o de conte\u00fados para a Web.","title":"w3c"},{"location":"Ferramentas/w3schools/","text":"w3schools O W3Schools \u00e9 um site em l\u00edngua inglesa criado em 1998 e voltado para quem quer aprender mais sobre desenvolvimento e programa\u00e7\u00e3o para a web . O W3Schools \u00e9 uma \u00f3tima indica\u00e7\u00e3o para iniciantes e profissionais que se interessem em avan\u00e7ar no estudo de linguagens de programa\u00e7\u00e3o.","title":"W3Schools"},{"location":"Ferramentas/w3schools/#w3schools","text":"O W3Schools \u00e9 um site em l\u00edngua inglesa criado em 1998 e voltado para quem quer aprender mais sobre desenvolvimento e programa\u00e7\u00e3o para a web . O W3Schools \u00e9 uma \u00f3tima indica\u00e7\u00e3o para iniciantes e profissionais que se interessem em avan\u00e7ar no estudo de linguagens de programa\u00e7\u00e3o.","title":"w3schools"},{"location":"_Css/flexbox/","text":"Flexbox Objetivo Esse roteiro utiliza o modelo de layout Flexbox para organizar e alinhar elementos dentro de uma p\u00e1gina HTML de maneira eficiente e flex\u00edvel. 1. Introdu\u00e7\u00e3o ao Flexbox O Flexbox \u00e9 um m\u00f3dulo de layout que permite distribuir o espa\u00e7o de forma mais din\u00e2mica e alinhar os itens dentro de um cont\u00eainer, mesmo que o tamanho dos itens seja desconhecido ou din\u00e2mico. 2. Elementos principais do Flexbox Cont\u00eainer Flex : O elemento pai que utiliza o display: flex; . Ele define o contexto flex\u00edvel para os filhos (itens flex). Itens Flex : Elementos filhos dentro do cont\u00eainer flex\u00edvel que s\u00e3o organizados de acordo com as regras do Flexbox. <div class=\"container\"> <div class=\"item\">Item 1</div> <div class=\"item\">Item 2</div> <div class=\"item\">Item 3</div> </div> .container { display: flex; } .item { background-color: lightblue; padding: 10px; margin: 5px; border: 1px solid #000; } 3. Propriedades do Cont\u00eainer Flex Essas propriedades afetam o comportamento de seus itens filhos. 3.1 flex-direction Define a dire\u00e7\u00e3o dos itens no cont\u00eainer. row (padr\u00e3o): Alinha os itens horizontalmente. row-reverse : Alinha os itens horizontalmente na dire\u00e7\u00e3o inversa. column : Alinha os itens verticalmente. column-reverse : Alinha os itens verticalmente na dire\u00e7\u00e3o inversa. .container { display: flex; flex-direction: row; } 3.2 justify-content Alinha os itens no eixo principal (horizontal por padr\u00e3o). flex-start : Alinha os itens ao in\u00edcio do cont\u00eainer. flex-end : Alinha os itens ao final do cont\u00eainer. center : Centraliza os itens. space-between : Deixa espa\u00e7o igual entre os itens. space-around : Deixa espa\u00e7o ao redor dos itens. .container { display: flex; justify-content: center; } 3.3 align-items Alinha os itens no eixo cruzado (vertical por padr\u00e3o). flex-start : Alinha os itens no in\u00edcio do eixo cruzado. flex-end : Alinha os itens no final do eixo cruzado. center : Centraliza os itens no eixo cruzado. stretch : Os itens se estendem para preencher o cont\u00eainer. baseline : Alinha os itens de acordo com suas linhas de base. .container { display: flex; align-items: center; } 3.4 flex-wrap Permite que os itens do cont\u00eainer \"quebrem\" linha se n\u00e3o couberem. nowrap (padr\u00e3o): Todos os itens permanecem em uma \u00fanica linha. wrap : Itens quebram em m\u00faltiplas linhas, se necess\u00e1rio. wrap-reverse : Itens quebram em m\u00faltiplas linhas na dire\u00e7\u00e3o inversa. .container { display: flex; flex-wrap: wrap; } 4. Propriedades dos Itens Flex 4.1 flex-grow Define como um item pode crescer dentro do cont\u00eainer flex. Um valor maior permite que o item cres\u00e7a mais em rela\u00e7\u00e3o aos outros. .item { flex-grow: 1; /* Todos os itens ter\u00e3o o mesmo crescimento */ } 4.2 flex-shrink Controla como um item encolhe se n\u00e3o houver espa\u00e7o suficiente no cont\u00eainer. .item { flex-shrink: 1; /* Todos os itens podem encolher igualmente */ } 4.3 flex-basis Define o tamanho inicial de um item antes que o espa\u00e7o seja distribu\u00eddo entre os itens. .item { flex-basis: 200px; /* Todos os itens ter\u00e3o inicialmente 200px */ } 4.4 align-self Permite que um item individual tenha um comportamento de alinhamento diferente dos outros. .item { align-self: flex-end; } 5. Exemplo Pr\u00e1tico Completo <!DOCTYPE html> <html lang=\"en\"> <head> <meta charset=\"UTF-8\"> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"> <title>Flexbox Example</title> <style> .container { display: flex; flex-direction: row; justify-content: space-between; align-items: center; flex-wrap: wrap; height: 300px; border: 2px solid black; } .item { background-color: lightblue; padding: 20px; margin: 10px; flex-grow: 1; } </style> </head> <body> <div class=\"container\"> <div class=\"item\">Item 1</div> <div class=\"item\">Item 2</div> <div class=\"item\">Item 3</div> </div> </body> </html> 6. Atividade Proposta Recrie um layout flex\u00edvel usando flexbox , onde os elementos devem se reorganizar de acordo com o tamanho da tela. Por exemplo, tr\u00eas colunas de conte\u00fado que se ajustam em uma linha \u00fanica em telas grandes e se reorganizam verticalmente em telas menores. <!DOCTYPE html> <html lang=\"en\"> <head> <meta charset=\"UTF-8\"> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"> <title>Flexbox Responsivo</title> <style> .container { display: flex; flex-wrap: wrap; justify-content: space-between; gap: 20px; /* Substitui as margens dos itens */ padding: 20px; border: 2px solid black; background-color: #f0f0f0; } .item { background-color: lightblue; padding: 20px; border-radius: 8px; box-shadow: 0 2px 5px rgba(0,0,0,0.1); flex: 1 1 calc(33.333% - 20px); /* Base para 3 colunas com gap */ min-width: 250px; /* Largura m\u00ednima antes de quebrar */ box-sizing: border-box; } /* Media query para tablets */ @media (max-width: 900px) { .item { flex: 1 1 calc(50% - 20px); /* 2 colunas */ } } /* Media query para mobile */ @media (max-width: 600px) { .container { flex-direction: column; } .item { flex: 1 1 auto; /* Uma coluna */ width: 100%; } } </style> </head> <body> <div class=\"container\"> <div class=\"item\">Item 1</div> <div class=\"item\">Item 2</div> <div class=\"item\">Item 3</div> </div> </body> </html> Melhorias realizadas: Sistema de gap : Utilizada a propriedade gap no container para espa\u00e7amento consistente entre os itens. Flexibilidade responsiva : Telas grandes (>900px): 3 colunas Tablets (600px-900px): 2 colunas Mobile (<600px): 1 coluna (empilhamento vertical) Propriedade flex shorthand : flex: 1 1 calc(33.333% - 20px) permite que os itens cres\u00e7am e encolham mantendo aproximadamente 3 colunas Design melhorado : Adicionado sombras e bordas arredondadas Padding no container para melhor espa\u00e7amento Fundo cinza claro para melhor contraste Remo\u00e7\u00e3o da altura fixa : Eliminada a altura fixa de 300px para que o container possa crescer naturalmente Este layout agora se adapta automaticamente a diferentes tamanhos de tela, reorganizando os itens de forma inteligente e mantendo uma apar\u00eancia profissional em todos os dispositivos. Sites Aqui est\u00e3o alguns dos principais sites de demonstra\u00e7\u00e3o e aprendizado do Flexbox CSS que ajudam a entender como ele funciona atrav\u00e9s de exemplos interativos e visuais: - Flexbox Froggy URL : Flexbox Froggy Descri\u00e7\u00e3o : Um jogo interativo que ensina as propriedades do Flexbox atrav\u00e9s de desafios. Nele, voc\u00ea precisa alinhar r\u00e3s em suas folhas de vit\u00f3ria-r\u00e9gia usando as propriedades de flexbox. - CSS Tricks: A Complete Guide to Flexbox URL : CSS Tricks - Flexbox Descri\u00e7\u00e3o : Um guia completo com explica\u00e7\u00f5es detalhadas sobre todas as propriedades de flexbox. Inclui diagramas visuais e exemplos pr\u00e1ticos de c\u00f3digo. - Flexbox Defense URL : Flexbox Defense Descri\u00e7\u00e3o : Um jogo onde voc\u00ea defende uma base posicionando torres com flexbox. Cada torre \u00e9 posicionada corretamente ao utilizar as propriedades do flexbox. - Flexbox Playground URL : Flexbox Playground Descri\u00e7\u00e3o : Uma sandbox interativa onde voc\u00ea pode experimentar e visualizar as propriedades do Flexbox em tempo real. \u00c9 um \u00f3timo ambiente para testar diferentes combina\u00e7\u00f5es de propriedades. - Flexy Boxes URL : Flexy Boxes Descri\u00e7\u00e3o : Um gerador visual de layouts flex\u00edveis. Ele permite ajustar v\u00e1rias op\u00e7\u00f5es de Flexbox e gerar o c\u00f3digo CSS correspondente para copiar e colar. - What The Flexbox?! URL : What The Flexbox?! Descri\u00e7\u00e3o : Um curso em v\u00eddeo gratuito que cobre o Flexbox desde o b\u00e1sico at\u00e9 usos avan\u00e7ados. O curso \u00e9 ideal para quem prefere aprender com v\u00eddeos e exemplos passo a passo. Esses recursos s\u00e3o \u00f3timos para entender o Flexbox de forma pr\u00e1tica, com interatividade e exemplos aplicados. 7. Conclus\u00e3o O Flexbox \u00e9 uma ferramenta poderosa para criar layouts din\u00e2micos e responsivos de maneira eficiente. Ele \u00e9 especialmente \u00fatil para alinhar, distribuir e organizar itens dentro de um cont\u00eainer, adaptando-se automaticamente a diferentes tamanhos de tela.","title":"Flexbox"},{"location":"_Css/flexbox/#flexbox","text":"","title":"Flexbox"},{"location":"_Css/flexbox/#objetivo","text":"Esse roteiro utiliza o modelo de layout Flexbox para organizar e alinhar elementos dentro de uma p\u00e1gina HTML de maneira eficiente e flex\u00edvel.","title":"Objetivo"},{"location":"_Css/flexbox/#1-introducao-ao-flexbox","text":"O Flexbox \u00e9 um m\u00f3dulo de layout que permite distribuir o espa\u00e7o de forma mais din\u00e2mica e alinhar os itens dentro de um cont\u00eainer, mesmo que o tamanho dos itens seja desconhecido ou din\u00e2mico.","title":"1. Introdu\u00e7\u00e3o ao Flexbox"},{"location":"_Css/flexbox/#2-elementos-principais-do-flexbox","text":"Cont\u00eainer Flex : O elemento pai que utiliza o display: flex; . Ele define o contexto flex\u00edvel para os filhos (itens flex). Itens Flex : Elementos filhos dentro do cont\u00eainer flex\u00edvel que s\u00e3o organizados de acordo com as regras do Flexbox. <div class=\"container\"> <div class=\"item\">Item 1</div> <div class=\"item\">Item 2</div> <div class=\"item\">Item 3</div> </div> .container { display: flex; } .item { background-color: lightblue; padding: 10px; margin: 5px; border: 1px solid #000; }","title":"2. Elementos principais do Flexbox"},{"location":"_Css/flexbox/#3-propriedades-do-conteiner-flex","text":"Essas propriedades afetam o comportamento de seus itens filhos.","title":"3. Propriedades do Cont\u00eainer Flex"},{"location":"_Css/flexbox/#31-flex-direction","text":"Define a dire\u00e7\u00e3o dos itens no cont\u00eainer. row (padr\u00e3o): Alinha os itens horizontalmente. row-reverse : Alinha os itens horizontalmente na dire\u00e7\u00e3o inversa. column : Alinha os itens verticalmente. column-reverse : Alinha os itens verticalmente na dire\u00e7\u00e3o inversa. .container { display: flex; flex-direction: row; }","title":"3.1 flex-direction"},{"location":"_Css/flexbox/#32-justify-content","text":"Alinha os itens no eixo principal (horizontal por padr\u00e3o). flex-start : Alinha os itens ao in\u00edcio do cont\u00eainer. flex-end : Alinha os itens ao final do cont\u00eainer. center : Centraliza os itens. space-between : Deixa espa\u00e7o igual entre os itens. space-around : Deixa espa\u00e7o ao redor dos itens. .container { display: flex; justify-content: center; }","title":"3.2 justify-content"},{"location":"_Css/flexbox/#33-align-items","text":"Alinha os itens no eixo cruzado (vertical por padr\u00e3o). flex-start : Alinha os itens no in\u00edcio do eixo cruzado. flex-end : Alinha os itens no final do eixo cruzado. center : Centraliza os itens no eixo cruzado. stretch : Os itens se estendem para preencher o cont\u00eainer. baseline : Alinha os itens de acordo com suas linhas de base. .container { display: flex; align-items: center; }","title":"3.3 align-items"},{"location":"_Css/flexbox/#34-flex-wrap","text":"Permite que os itens do cont\u00eainer \"quebrem\" linha se n\u00e3o couberem. nowrap (padr\u00e3o): Todos os itens permanecem em uma \u00fanica linha. wrap : Itens quebram em m\u00faltiplas linhas, se necess\u00e1rio. wrap-reverse : Itens quebram em m\u00faltiplas linhas na dire\u00e7\u00e3o inversa. .container { display: flex; flex-wrap: wrap; }","title":"3.4 flex-wrap"},{"location":"_Css/flexbox/#4-propriedades-dos-itens-flex","text":"","title":"4. Propriedades dos Itens Flex"},{"location":"_Css/flexbox/#41-flex-grow","text":"Define como um item pode crescer dentro do cont\u00eainer flex. Um valor maior permite que o item cres\u00e7a mais em rela\u00e7\u00e3o aos outros. .item { flex-grow: 1; /* Todos os itens ter\u00e3o o mesmo crescimento */ }","title":"4.1 flex-grow"},{"location":"_Css/flexbox/#42-flex-shrink","text":"Controla como um item encolhe se n\u00e3o houver espa\u00e7o suficiente no cont\u00eainer. .item { flex-shrink: 1; /* Todos os itens podem encolher igualmente */ }","title":"4.2 flex-shrink"},{"location":"_Css/flexbox/#43-flex-basis","text":"Define o tamanho inicial de um item antes que o espa\u00e7o seja distribu\u00eddo entre os itens. .item { flex-basis: 200px; /* Todos os itens ter\u00e3o inicialmente 200px */ }","title":"4.3 flex-basis"},{"location":"_Css/flexbox/#44-align-self","text":"Permite que um item individual tenha um comportamento de alinhamento diferente dos outros. .item { align-self: flex-end; }","title":"4.4 align-self"},{"location":"_Css/flexbox/#5-exemplo-pratico-completo","text":"<!DOCTYPE html> <html lang=\"en\"> <head> <meta charset=\"UTF-8\"> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"> <title>Flexbox Example</title> <style> .container { display: flex; flex-direction: row; justify-content: space-between; align-items: center; flex-wrap: wrap; height: 300px; border: 2px solid black; } .item { background-color: lightblue; padding: 20px; margin: 10px; flex-grow: 1; } </style> </head> <body> <div class=\"container\"> <div class=\"item\">Item 1</div> <div class=\"item\">Item 2</div> <div class=\"item\">Item 3</div> </div> </body> </html>","title":"5. Exemplo Pr\u00e1tico Completo"},{"location":"_Css/flexbox/#6-atividade-proposta","text":"Recrie um layout flex\u00edvel usando flexbox , onde os elementos devem se reorganizar de acordo com o tamanho da tela. Por exemplo, tr\u00eas colunas de conte\u00fado que se ajustam em uma linha \u00fanica em telas grandes e se reorganizam verticalmente em telas menores. <!DOCTYPE html> <html lang=\"en\"> <head> <meta charset=\"UTF-8\"> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"> <title>Flexbox Responsivo</title> <style> .container { display: flex; flex-wrap: wrap; justify-content: space-between; gap: 20px; /* Substitui as margens dos itens */ padding: 20px; border: 2px solid black; background-color: #f0f0f0; } .item { background-color: lightblue; padding: 20px; border-radius: 8px; box-shadow: 0 2px 5px rgba(0,0,0,0.1); flex: 1 1 calc(33.333% - 20px); /* Base para 3 colunas com gap */ min-width: 250px; /* Largura m\u00ednima antes de quebrar */ box-sizing: border-box; } /* Media query para tablets */ @media (max-width: 900px) { .item { flex: 1 1 calc(50% - 20px); /* 2 colunas */ } } /* Media query para mobile */ @media (max-width: 600px) { .container { flex-direction: column; } .item { flex: 1 1 auto; /* Uma coluna */ width: 100%; } } </style> </head> <body> <div class=\"container\"> <div class=\"item\">Item 1</div> <div class=\"item\">Item 2</div> <div class=\"item\">Item 3</div> </div> </body> </html>","title":"6. Atividade Proposta"},{"location":"_Css/flexbox/#melhorias-realizadas","text":"Sistema de gap : Utilizada a propriedade gap no container para espa\u00e7amento consistente entre os itens. Flexibilidade responsiva : Telas grandes (>900px): 3 colunas Tablets (600px-900px): 2 colunas Mobile (<600px): 1 coluna (empilhamento vertical) Propriedade flex shorthand : flex: 1 1 calc(33.333% - 20px) permite que os itens cres\u00e7am e encolham mantendo aproximadamente 3 colunas Design melhorado : Adicionado sombras e bordas arredondadas Padding no container para melhor espa\u00e7amento Fundo cinza claro para melhor contraste Remo\u00e7\u00e3o da altura fixa : Eliminada a altura fixa de 300px para que o container possa crescer naturalmente Este layout agora se adapta automaticamente a diferentes tamanhos de tela, reorganizando os itens de forma inteligente e mantendo uma apar\u00eancia profissional em todos os dispositivos.","title":"Melhorias realizadas:"},{"location":"_Css/flexbox/#sites","text":"Aqui est\u00e3o alguns dos principais sites de demonstra\u00e7\u00e3o e aprendizado do Flexbox CSS que ajudam a entender como ele funciona atrav\u00e9s de exemplos interativos e visuais:","title":"Sites"},{"location":"_Css/flexbox/#-flexbox-froggy","text":"URL : Flexbox Froggy Descri\u00e7\u00e3o : Um jogo interativo que ensina as propriedades do Flexbox atrav\u00e9s de desafios. Nele, voc\u00ea precisa alinhar r\u00e3s em suas folhas de vit\u00f3ria-r\u00e9gia usando as propriedades de flexbox.","title":"- Flexbox Froggy"},{"location":"_Css/flexbox/#-css-tricks-a-complete-guide-to-flexbox","text":"URL : CSS Tricks - Flexbox Descri\u00e7\u00e3o : Um guia completo com explica\u00e7\u00f5es detalhadas sobre todas as propriedades de flexbox. Inclui diagramas visuais e exemplos pr\u00e1ticos de c\u00f3digo.","title":"- CSS Tricks: A Complete Guide to Flexbox"},{"location":"_Css/flexbox/#-flexbox-defense","text":"URL : Flexbox Defense Descri\u00e7\u00e3o : Um jogo onde voc\u00ea defende uma base posicionando torres com flexbox. Cada torre \u00e9 posicionada corretamente ao utilizar as propriedades do flexbox.","title":"- Flexbox Defense"},{"location":"_Css/flexbox/#-flexbox-playground","text":"URL : Flexbox Playground Descri\u00e7\u00e3o : Uma sandbox interativa onde voc\u00ea pode experimentar e visualizar as propriedades do Flexbox em tempo real. \u00c9 um \u00f3timo ambiente para testar diferentes combina\u00e7\u00f5es de propriedades.","title":"- Flexbox Playground"},{"location":"_Css/flexbox/#-flexy-boxes","text":"URL : Flexy Boxes Descri\u00e7\u00e3o : Um gerador visual de layouts flex\u00edveis. Ele permite ajustar v\u00e1rias op\u00e7\u00f5es de Flexbox e gerar o c\u00f3digo CSS correspondente para copiar e colar.","title":"- Flexy Boxes"},{"location":"_Css/flexbox/#-what-the-flexbox","text":"URL : What The Flexbox?! Descri\u00e7\u00e3o : Um curso em v\u00eddeo gratuito que cobre o Flexbox desde o b\u00e1sico at\u00e9 usos avan\u00e7ados. O curso \u00e9 ideal para quem prefere aprender com v\u00eddeos e exemplos passo a passo. Esses recursos s\u00e3o \u00f3timos para entender o Flexbox de forma pr\u00e1tica, com interatividade e exemplos aplicados.","title":"- What The Flexbox?!"},{"location":"_Css/flexbox/#7-conclusao","text":"O Flexbox \u00e9 uma ferramenta poderosa para criar layouts din\u00e2micos e responsivos de maneira eficiente. Ele \u00e9 especialmente \u00fatil para alinhar, distribuir e organizar itens dentro de um cont\u00eainer, adaptando-se automaticamente a diferentes tamanhos de tela.","title":"7. Conclus\u00e3o"},{"location":"_Css/grid/","text":"Grid CSS - Estruturando Layouts Modernos Objetivo: Apresentamos o uso do Grid Layout no CSS para criar layouts flex\u00edveis e responsivos e iremos criar grades, organizar colunas e linhas, e controlar o espa\u00e7amento entre os elementos. Introdu\u00e7\u00e3o ao Grid CSS O que \u00e9 Grid Layout? O Grid Layout (ou CSS Grid) \u00e9 um sistema de layout bidimensional para a web que permite criar designs complexos e responsivos com facilidade. Ele divide a p\u00e1gina em um sistema de linhas e colunas, permitindo que voc\u00ea posicione elementos em qualquer \u00e1rea definida por essa grade. Principais caracter\u00edsticas: Sistema baseado em linhas e colunas Controle preciso sobre posicionamento de itens Capacidade de alinhamento avan\u00e7ado Responsivo por natureza Redefini\u00e7\u00e3o de layout sem alterar HTML Diferen\u00e7a entre Grid e Flexbox Caracter\u00edstica Grid CSS Flexbox Dimens\u00e3o Bidimensional (linhas e colunas) Unidimensional (linha OU coluna) Uso principal Layouts gerais da p\u00e1gina Alinhamento de componentes Controle Controle expl\u00edcito de colunas/linhas Fluxo flex\u00edvel dos itens Sobreposi\u00e7\u00e3o F\u00e1cil sobreposi\u00e7\u00e3o de elementos Mais dif\u00edcil de sobrepor Alinhamento Alinha em ambos os eixos Foco em um eixo por vez Casos de uso do Grid Layouts complexos : Criar designs com m\u00faltiplas colunas e linhas de forma precisa Designs assim\u00e9tricos : Layouts que n\u00e3o seguem um padr\u00e3o regular Alinhamento perfeito : Quando voc\u00ea precisa que v\u00e1rios elementos se alinhem perfeitamente Redefini\u00e7\u00e3o de layout : Mudar completamente a disposi\u00e7\u00e3o dos elementos em diferentes breakpoints Controle de espa\u00e7os vazios : Gerenciar explicitamente espa\u00e7os em branco no design Sistemas de cards : Organizar cards em grades responsivas Formul\u00e1rios complexos : Alinhar labels e inputs em layouts elaborados Galeria de imagens : Criar galerias com tamanhos variados de imagens Exemplo b\u00e1sico de c\u00f3digo Grid: .container { display: grid; grid-template-columns: 1fr 2fr 1fr; grid-gap: 20px; } O Grid CSS \u00e9 particularmente poderoso quando combinado com outras t\u00e9cnicas modernas como Flexbox, onde voc\u00ea pode usar Grid para o layout geral da p\u00e1gina e Flexbox para componentes individuais. Elementos B\u00e1sicos do Grid CSS Vamos explorar os conceitos fundamentais para criar e controlar layouts com CSS Grid. 1. Definindo um Container Grid Para transformar um elemento em um container grid, use: <div class=\"container\"> <div class=\"item\">1</div> <div class=\"item\">2</div> <div class=\"item\">3</div> <div class=\"item\">4</div> </div> .container { display: grid; /* Ativa o Grid Layout */ } .item { background: lightblue; padding: 10px; border: 1px solid #333; } Isso faz com que todos os filhos diretos desse container se tornem itens da grade . 2. Definindo Colunas e Linhas grid-template-columns Define o n\u00famero e o tamanho das colunas. .container { display: grid; grid-template-columns: 100px 200px 100px; /* 3 colunas com larguras fixas */ } Ou usando unidades flex\u00edveis ( fr = fra\u00e7\u00e3o do espa\u00e7o dispon\u00edvel): .container { grid-template-columns: 1fr 2fr 1fr; /* 3 colunas (a do meio \u00e9 2x maior) */ } grid-template-rows Define o n\u00famero e a altura das linhas. .container { grid-template-rows: 50px 100px; /* 2 linhas com alturas fixas */ } Combina\u00e7\u00e3o de colunas e linhas .container { grid-template-columns: 1fr 2fr; grid-template-rows: 100px 200px; } Isso cria 2 colunas e 2 linhas , formando uma grade 2x2. 3. Espa\u00e7amento entre c\u00e9lulas ( gap ) Controla o espa\u00e7o entre as colunas e linhas. gap (espa\u00e7amento geral) .container { gap: 10px; /* Espa\u00e7o igual entre colunas e linhas */ } column-gap e row-gap (espa\u00e7amento individual) .container { column-gap: 20px; /* Espa\u00e7o entre colunas */ row-gap: 15px; /* Espa\u00e7o entre linhas */ } Exemplo Pr\u00e1tico Completo <div class=\"container\"> <div class=\"item\">1</div> <div class=\"item\">2</div> <div class=\"item\">3</div> <div class=\"item\">4</div> </div> .container { display: grid; grid-template-columns: 1fr 2fr 1fr; /* 3 colunas */ grid-template-rows: 100px 200px; /* 2 linhas */ gap: 15px; /* Espa\u00e7amento entre c\u00e9lulas */ } .item { background: lightblue; padding: 10px; border: 1px solid #333; } Resultado: Uma grade com 3 colunas e 2 linhas . A segunda coluna ( 2fr ) \u00e9 mais larga que as outras. 15px de espa\u00e7amento entre as c\u00e9lulas. Resumo dos Conceitos B\u00e1sicos Propriedade Descri\u00e7\u00e3o Exemplo display: grid Define um container grid display: grid; grid-template-columns Define colunas grid-template-columns: 1fr 2fr; grid-template-rows Define linhas grid-template-rows: 100px 200px; gap Espa\u00e7amento entre c\u00e9lulas gap: 10px; column-gap Espa\u00e7o entre colunas column-gap: 20px; row-gap Espa\u00e7o entre linhas row-gap: 15px; Com esses conceitos, voc\u00ea j\u00e1 pode criar layouts b\u00e1sicos em Grid CSS ! \ud83d\ude80 Posicionamento no Grid CSS Al\u00e9m de definir colunas e linhas, o Grid permite posicionar itens de forma precisa dentro do grid, mesclando c\u00e9lulas e criando layouts complexos. 1. Posicionando Itens com grid-column e grid-row grid-column \u2192 Controla a posi\u00e7\u00e3o do item nas colunas .item { grid-column: 2 / 4; /* Come\u00e7a na coluna 2 e termina na 4 */ } grid-column-start (in\u00edcio) e grid-column-end (fim) podem ser usados separadamente. grid-row \u2192 Controla a posi\u00e7\u00e3o do item nas linhas .item { grid-row: 1 / 3; /* Come\u00e7a na linha 1 e termina na 3 */ } grid-row-start e grid-row-end tamb\u00e9m funcionam individualmente. Exemplo: <div class=\"container\"> <div class=\"item1\">1</div> <div class=\"item2\">2</div> <div class=\"item3\">3</div> </div> .container { display: grid; grid-template-columns: 100px 100px 100px; grid-template-rows: 100px 100px; gap: 10px; } .item1 { grid-column: 1 / 3; /* Ocupa da coluna 1 at\u00e9 a 3 */ grid-row: 1; /* Ocupa apenas a linha 1 */ background: lightblue; } .item2 { grid-column: 3; grid-row: 1 / 3; /* Ocupa da linha 1 at\u00e9 a 3 */ background: lightgreen; } .item3 { grid-column: 1 / 3; grid-row: 2; background: lightcoral; } Resultado: item1 ocupa colunas 1 e 2 (linha 1). item2 ocupa coluna 3 e se estende por linhas 1 e 2 . item3 ocupa colunas 1 e 2 (linha 2). 2. Usando grid-area para \u00c1reas Nomeadas Voc\u00ea pode nomear \u00e1reas no grid e posicionar elementos nelas. Passo 1: Definir \u00e1reas no container .container { display: grid; grid-template-areas: \"header header header\" \"sidebar main main\" \"footer footer footer\"; } Passo 2: Atribuir itens \u00e0s \u00e1reas .header { grid-area: header; } .sidebar { grid-area: sidebar; } .main { grid-area: main; } .footer { grid-area: footer; } Exemplo Pr\u00e1tico: <div class=\"container\"> <div class=\"header\">Header</div> <div class=\"sidebar\">Sidebar</div> <div class=\"main\">Main</div> <div class=\"footer\">Footer</div> </div> .container { display: grid; grid-template-columns: 1fr 2fr; grid-template-rows: 80px 1fr 60px; grid-template-areas: \"header header\" \"sidebar main\" \"footer footer\"; gap: 10px; } .header { grid-area: header; background: lightblue; } .sidebar { grid-area: sidebar; background: lightgreen; } .main { grid-area: main; background: lightcoral; } .footer { grid-area: footer; background: lightgray; } Resultado: Header ocupa toda a largura. Sidebar e Main dividem o espa\u00e7o central. Footer ocupa a parte inferior. 3. Span e Mesclagem de C\u00e9lulas ( grid-column: span ) Voc\u00ea pode expandir um item por v\u00e1rias colunas/linhas sem definir um fim fixo. Usando span .item { grid-column: span 2; /* Ocupa 2 colunas */ grid-row: span 3; /* Ocupa 3 linhas */ } Exemplo: .item1 { grid-column: 1 / span 2; /* Come\u00e7a na coluna 1 e ocupa 2 colunas */ grid-row: 1 / span 2; /* Come\u00e7a na linha 1 e ocupa 2 linhas */ } Equivalente a: .item1 { grid-column: 1 / 3; grid-row: 1 / 3; } Aplica\u00e7\u00e3o Pr\u00e1tica: <div class=\"container\"> <div class=\"item big\">1 (2x2)</div> <div class=\"item\">2</div> <div class=\"item\">3</div> <div class=\"item\">4</div> </div> .container { display: grid; grid-template-columns: repeat(3, 1fr); grid-template-rows: repeat(2, 100px); gap: 10px; } .big { grid-column: span 2; /* Ocupa 2 colunas */ grid-row: span 2; /* Ocupa 2 linhas */ background: lightblue; } Resultado: O primeiro item ocupa 2 colunas e 2 linhas , enquanto os outros preenchem o restante. Resumo de Posicionamento no Grid Propriedade Uso Exemplo grid-column Define in\u00edcio e fim em colunas grid-column: 2 / 4; grid-row Define in\u00edcio e fim em linhas grid-row: 1 / 3; grid-area Posiciona em \u00e1reas nomeadas grid-area: header; span Expande por N colunas/linhas grid-column: span 2; Com essas t\u00e9cnicas, voc\u00ea pode criar layouts complexos com sobreposi\u00e7\u00e3o, expans\u00e3o e organiza\u00e7\u00e3o avan\u00e7ada! \ud83d\ude80 Alinhamento e Justifica\u00e7\u00e3o no Grid CSS O Grid CSS oferece propriedades poderosas para controlar o posicionamento e a distribui\u00e7\u00e3o dos itens dentro do container grid. Vamos explorar como alinhar e justificar elementos de forma eficiente. 1. Alinhamento dos Itens Dentro do Grid justify-items \u2192 Alinhamento horizontal (eixo X) de todos os itens Controla como os itens s\u00e3o alinhados dentro de suas c\u00e9lulas ao longo do eixo horizontal. Valores poss\u00edveis: start (alinhado \u00e0 esquerda) end (alinhado \u00e0 direita) center (centralizado) stretch (padr\u00e3o, ocupa toda a largura) .container { justify-items: center; /* Todos os itens centralizados horizontalmente */ } align-items \u2192 Alinhamento vertical (eixo Y) de todos os itens Controla como os itens s\u00e3o alinhados dentro de suas c\u00e9lulas ao longo do eixo vertical. Valores poss\u00edveis: start (topo) end (base) center (meio) stretch (padr\u00e3o, ocupa toda a altura) .container { align-items: end; /* Todos os itens alinhados na base */ } place-items \u2192 Atalho para align-items e justify-items Sintaxe: place-items: <align-items> <justify-items> .container { place-items: center end; /* Vertical: center, Horizontal: end */ } 2. Alinhamento Individual de Itens Se precisar sobrescrever o alinhamento para um item espec\u00edfico: justify-self \u2192 Alinhamento horizontal individual .item { justify-self: start; /* Este item alinhado \u00e0 esquerda */ } align-self \u2192 Alinhamento vertical individual .item { align-self: center; /* Este item centralizado verticalmente */ } place-self \u2192 Atalho para ambos .item { place-self: center end; /* align-self: center; justify-self: end; */ } 3. Distribui\u00e7\u00e3o do Espa\u00e7o do Grid (Container) Quando o grid n\u00e3o ocupa todo o espa\u00e7o dispon\u00edvel, podemos controlar como o espa\u00e7o extra \u00e9 distribu\u00eddo. justify-content \u2192 Distribui\u00e7\u00e3o horizontal do grid como um todo Valores poss\u00edveis: start , end , center space-between (espa\u00e7o entre colunas) space-around (espa\u00e7o ao redor) space-evenly (espa\u00e7o igual) stretch (estica as colunas) .container { justify-content: space-between; /* Espa\u00e7o entre colunas */ } align-content \u2192 Distribui\u00e7\u00e3o vertical do grid como um todo Mesmos valores de justify-content , mas aplicado verticalmente. .container { align-content: center; /* Centraliza todo o grid verticalmente */ } place-content \u2192 Atalho para ambos .container { place-content: space-between center; /* justify-content: space-between; align-content: center; */ } Exemplo Pr\u00e1tico Completo <div class=\"container\"> <div class=\"item\">1</div> <div class=\"item\">2</div> <div class=\"item\">3</div> <div class=\"item\">4</div> </div> .container { display: grid; grid-template-columns: 100px 100px; grid-template-rows: 100px 100px; height: 500px; /* Espa\u00e7o extra para demonstra\u00e7\u00e3o */ width: 400px; border: 2px solid #333; /* Alinhamento dos itens */ justify-items: center; align-items: end; /* Distribui\u00e7\u00e3o do grid */ justify-content: space-evenly; align-content: center; gap: 10px; } .item { background: lightblue; width: 80px; height: 50px; display: flex; align-items: center; justify-content: center; } .item:nth-child(3) { justify-self: start; /* Sobrescreve apenas este item */ align-self: start; } Resultado: Todos os itens est\u00e3o centralizados horizontalmente e alinhados na base (configura\u00e7\u00e3o do container) O grid inteiro est\u00e1 centralizado verticalmente com espa\u00e7o uniforme horizontalmente O terceiro item tem alinhamento sobrescrito (canto superior esquerdo) Resumo das Propriedades de Alinhamento Propriedade Escopo Eixo Valores Comuns justify-items Container Horizontal (X) start, end, center, stretch align-items Container Vertical (Y) start, end, center, stretch place-items Container Ambos [align] [justify] justify-self Item Horizontal (X) start, end, center, stretch align-self Item Vertical (Y) start, end, center, stretch place-self Item Ambos [align] [justify] justify-content Container Horizontal (X) start, center, space-between, etc. align-content Container Vertical (Y) start, center, space-between, etc. place-content Container Ambos [align] [justify] Com essas propriedades, voc\u00ea tem controle total sobre o posicionamento e a distribui\u00e7\u00e3o dos elementos no Grid CSS! \ud83c\udfaf Grid Responsivo com CSS Criar layouts que se adaptam a diferentes tamanhos de tela \u00e9 essencial no desenvolvimento web moderno. O CSS Grid oferece ferramentas poderosas para construir grids din\u00e2micos e responsivos. 1. Fun\u00e7\u00f5es Avan\u00e7adas para Grids Din\u00e2micos repeat() \u2192 Repete um padr\u00e3o de colunas/linhas Sintaxe: repeat(n\u00famero-de-repeti\u00e7\u00f5es, tamanho) .container { grid-template-columns: repeat(3, 1fr); /* 3 colunas de 1 fra\u00e7\u00e3o cada */ } minmax() \u2192 Define tamanhos m\u00ednimos e m\u00e1ximos Sintaxe: minmax(valor-m\u00ednimo, valor-m\u00e1ximo) .container { grid-template-columns: repeat(3, minmax(100px, 1fr)); /* Colunas com no m\u00ednimo 100px e no m\u00e1ximo 1fr */ } auto-fit vs auto-fill \u2192 Ajuste autom\u00e1tico de colunas Ambos preenchem o espa\u00e7o dispon\u00edvel, mas comportam-se diferentemente quando sobram espa\u00e7os: /* auto-fit: redimensiona as colunas para preencher o espa\u00e7o */ .container { grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); } /* auto-fill: mant\u00e9m o tamanho m\u00ednimo e cria colunas fantasmas se houver espa\u00e7o */ .container { grid-template-columns: repeat(auto-fill, minmax(200px, 1fr)); } Diferen\u00e7a pr\u00e1tica: auto-fit \u2192 Colunas se expandem para ocupar todo o container auto-fill \u2192 Mant\u00e9m o tamanho m\u00ednimo e deixa espa\u00e7o vazio se necess\u00e1rio 2. T\u00e9cnicas para Grid Responsivo Exemplo 1: Grid que se ajusta automaticamente .container { display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 20px; } Em telas largas: cria mais colunas (quantas couberem) Em telas estreitas: reduz para 1 coluna Exemplo 2: Layout que muda completamente .container { display: grid; grid-template-columns: 1fr; grid-template-areas: \"header\" \"main\" \"sidebar\" \"footer\"; } @media (min-width: 768px) { .container { grid-template-columns: 200px 1fr; grid-template-areas: \"header header\" \"sidebar main\" \"footer footer\"; } } Exemplo 3: N\u00famero vari\u00e1vel de colunas .container { display: grid; grid-template-columns: repeat(auto-fill, minmax(150px, 1fr)); } Mant\u00e9m no m\u00ednimo 150px por coluna Cria quantas colunas couberem no espa\u00e7o dispon\u00edvel 3. Media Queries para Controle Preciso Combine media queries com Grid para layouts espec\u00edficos: /* Mobile First (1 coluna) */ .container { display: grid; grid-template-columns: 1fr; gap: 10px; } /* Tablet (2 colunas) */ @media (min-width: 600px) { .container { grid-template-columns: repeat(2, 1fr); } } /* Desktop (4 colunas) */ @media (min-width: 900px) { .container { grid-template-columns: repeat(4, 1fr); } } Dica profissional: Use min-width para uma abordagem mobile-first. 4. T\u00e9cnicas Avan\u00e7adas Imagens responsivas em grid .gallery { display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); } .gallery img { width: 100%; height: auto; object-fit: cover; } Grid com conte\u00fado vari\u00e1vel .card-grid { display: grid; grid-template-columns: repeat(auto-fill, minmax(300px, 1fr)); grid-auto-rows: minmax(150px, auto); gap: 20px; } grid-auto-rows garante que linhas extras tenham altura m\u00ednima Resumo das T\u00e9cnicas Responsivas T\u00e9cnica Uso Exemplo repeat() Padr\u00f5es repetitivos repeat(4, 1fr) minmax() Limites flex\u00edveis minmax(200px, 1fr) auto-fit Preenchimento inteligente repeat(auto-fit, minmax()) auto-fill Preenchimento conservador repeat(auto-fill, minmax()) Media Queries Breakpoints espec\u00edficos @media (min-width: 768px) Com essas t\u00e9cnicas, voc\u00ea pode criar grids que se adaptam perfeitamente a qualquer dispositivo! \ud83d\udcf1\ud83d\udcbb\ud83d\udda5\ufe0f Exemplos Pr\u00e1ticos Layout b\u00e1sico com 3 colunas Galeria de imagens responsiva Layout de blog com header, main e footer Exemplo Pr\u00e1tico 1: Grid B\u00e1sico com 3 Colunas <!DOCTYPE html> <html lang=\"pt-BR\"> <head> <meta charset=\"UTF-8\"> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"> <title>Exemplo Grid CSS</title> <style> .grid-container { display: grid; grid-template-columns: 1fr 1fr 1fr; gap: 20px; } .item { background-color: lightblue; padding: 20px; text-align: center; } </style> </head> <body> <div class=\"grid-container\"> <div class=\"item\">Item 1</div> <div class=\"item\">Item 2</div> <div class=\"item\">Item 3</div> <div class=\"item\">Item 4</div> <div class=\"item\">Item 5</div> <div class=\"item\">Item 6</div> </div> </body> </html> Exemplo Pr\u00e1tico 2: Grid Responsivo <!DOCTYPE html> <html lang=\"pt-BR\"> <head> <meta charset=\"UTF-8\"> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"> <title>Grid Responsivo</title> <style> .grid-container { display: grid; grid-template-columns: repeat(auto-fit, minmax(150px, 1fr)); gap: 10px; } .item { background-color: lightcoral; padding: 20px; text-align: center; } </style> </head> <body> <div class=\"grid-container\"> <div class=\"item\">Item 1</div> <div class=\"item\">Item 2</div> <div class=\"item\">Item 3</div> <div class=\"item\">Item 4</div> </div> </body> </html> Layout de Blog com CSS Grid (Header, Main, Footer) Aqui est\u00e1 um exemplo completo de um layout de blog responsivo usando CSS Grid, com as seguintes se\u00e7\u00f5es: Header (cabe\u00e7alho) Main (conte\u00fado principal com artigos e sidebar) Footer (rodap\u00e9) 1. Estrutura HTML B\u00e1sica <!DOCTYPE html> <html lang=\"pt-BR\"> <head> <meta charset=\"UTF-8\"> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"> <title>Blog com Grid CSS</title> <link rel=\"stylesheet\" href=\"styles.css\"> </head> <body> <div class=\"container\"> <header class=\"header\">Blog do Dev</header> <main class=\"main-content\"> <article class=\"post\"> <h2>T\u00edtulo do Post</h2> <p>Conte\u00fado do artigo...</p> </article> <article class=\"post\"> <h2>Outro Post</h2> <p>Mais conte\u00fado...</p> </article> </main> <aside class=\"sidebar\"> <h3>Barra Lateral</h3> <ul> <li>Categoria 1</li> <li>Categoria 2</li> </ul> </aside> <footer class=\"footer\">\u00a9 2024 Blog do Dev</footer> </div> </body> </html> 2. CSS com Grid Layout /* Reset b\u00e1sico */ * { margin: 0; padding: 0; box-sizing: border-box; } body { font-family: Arial, sans-serif; line-height: 1.6; } .container { display: grid; grid-template-areas: \"header header header\" \"main main sidebar\" \"footer footer footer\"; grid-template-columns: 1fr 1fr 300px; /* 2 colunas + sidebar fixa */ grid-template-rows: auto 1fr auto; /* Altura autom\u00e1tica para header e footer */ min-height: 100vh; /* Ocupa toda a altura da tela */ gap: 20px; padding: 20px; } /* Estiliza\u00e7\u00e3o das \u00e1reas */ .header { grid-area: header; background: #2c3e50; color: white; padding: 20px; text-align: center; } .main-content { grid-area: main; display: grid; gap: 20px; } .post { background: #f9f9f9; padding: 20px; border-radius: 5px; box-shadow: 0 2px 5px rgba(0,0,0,0.1); } .sidebar { grid-area: sidebar; background: #34495e; color: white; padding: 20px; border-radius: 5px; } .footer { grid-area: footer; background: #2c3e50; color: white; padding: 15px; text-align: center; } 3. Vers\u00e3o Responsiva (Mobile First) /* Layout Mobile (1 coluna) */ .container { grid-template-areas: \"header\" \"main\" \"sidebar\" \"footer\"; grid-template-columns: 1fr; } /* Tablet (2 colunas) */ @media (min-width: 768px) { .container { grid-template-areas: \"header header\" \"main sidebar\" \"footer footer\"; grid-template-columns: 1fr 250px; } } /* Desktop (3 colunas) */ @media (min-width: 1024px) { .container { grid-template-areas: \"header header header\" \"main main sidebar\" \"footer footer footer\"; grid-template-columns: 1fr 1fr 300px; } } 4. Exemplo Visual do Layout [ HEADER ] \u2190 `grid-area: header` [ MAIN ][ SIDEBAR ] \u2190 `grid-area: main` e `grid-area: sidebar` [ FOOTER ] \u2190 `grid-area: footer` Comportamento em diferentes telas: Mobile : Tudo em uma coluna (header \u2192 main \u2192 sidebar \u2192 footer) Tablet : Header e footer em largura total, main e sidebar lado a lado Desktop : Header e footer em 3 colunas, main ocupa 2 colunas, sidebar 1 coluna 5. Recursos Adicionais Grid com conte\u00fado din\u00e2mico (posts que se ajustam): .main-content { grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); } Sticky Sidebar (barra lateral fixa): .sidebar { position: sticky; top: 20px; align-self: start; } Este layout oferece uma estrutura limpa e organizada para blogs, totalmente responsiva e f\u00e1cil de personalizar! \ud83d\ude80 Sites com exemplos e demonstra\u00e7\u00f5es - CSS-Tricks - A Complete Guide to Grid URL: CSS-Tricks Descri\u00e7\u00e3o: Um guia abrangente que explica todos os conceitos do CSS Grid, com exemplos visuais e explica\u00e7\u00f5es detalhadas de cada propriedade. Inclui muitos exemplos de layout com grids. - Grid by Example URL: Grid by Example Descri\u00e7\u00e3o: Um site dedicado ao CSS Grid criado por Rachel Andrew. Oferece exemplos pr\u00e1ticos, templates e v\u00eddeos explicativos. \u00c9 um excelente recurso para entender como o Grid pode ser utilizado em diversos layouts. - CSS Grid Garden URL: CSS Grid Garden Descri\u00e7\u00e3o: Um jogo interativo onde voc\u00ea aprende CSS Grid jogando. Ele \u00e9 projetado para ensinar as propriedades do Grid de uma forma divertida e pr\u00e1tica, ajudando a memorizar os conceitos enquanto joga. - MDN Web Docs - CSS Grid Layout URL: MDN Web Docs Descri\u00e7\u00e3o: A documenta\u00e7\u00e3o oficial do Mozilla Developer Network (MDN) sobre o Grid Layout. Oferece exemplos detalhados de uso, com explica\u00e7\u00f5es t\u00e9cnicas das propriedades e comportamentos do Grid. - Grid Layout Generator URL: Grid Layout Generator Descri\u00e7\u00e3o: Uma ferramenta visual que permite criar layouts de Grid interativamente. Voc\u00ea pode desenhar seu grid, definir linhas e colunas, e gerar o c\u00f3digo CSS automaticamente. Ideal para experimentar e gerar prot\u00f3tipos rapidamente. - CSS Grid Generator URL: CSS Grid Generator Descri\u00e7\u00e3o: Um gerador de grids online, onde voc\u00ea pode arrastar e criar seu layout. Ele gera o c\u00f3digo CSS necess\u00e1rio com base nas configura\u00e7\u00f5es que voc\u00ea seleciona, tornando f\u00e1cil criar grids complexos. - Learn CSS Grid URL: Learn CSS Grid Descri\u00e7\u00e3o: Um site educacional que ensina CSS Grid com uma abordagem pr\u00e1tica e visual. Ele inclui uma s\u00e9rie de tutoriais e exemplos, focados em ensinar os conceitos passo a passo. Esses sites s\u00e3o \u00f3timos para aprender, praticar e experimentar com o CSS Grid em diversos n\u00edveis de complexidade. Exerc\u00edcios: Crie um layout com 4 colunas e 3 linhas, e adicione diferentes cores aos elementos. Use o Grid para criar um layout de p\u00e1gina com cabe\u00e7alho, barra lateral, conte\u00fado principal e rodap\u00e9. Ajuste o layout criado para que seja responsivo utilizando minmax() e auto-fit .","title":"Grid CSS - Estruturando Layouts Modernos"},{"location":"_Css/grid/#grid-css-estruturando-layouts-modernos","text":"Objetivo: Apresentamos o uso do Grid Layout no CSS para criar layouts flex\u00edveis e responsivos e iremos criar grades, organizar colunas e linhas, e controlar o espa\u00e7amento entre os elementos.","title":"Grid CSS - Estruturando Layouts Modernos"},{"location":"_Css/grid/#introducao-ao-grid-css","text":"","title":"Introdu\u00e7\u00e3o ao Grid CSS"},{"location":"_Css/grid/#o-que-e-grid-layout","text":"O Grid Layout (ou CSS Grid) \u00e9 um sistema de layout bidimensional para a web que permite criar designs complexos e responsivos com facilidade. Ele divide a p\u00e1gina em um sistema de linhas e colunas, permitindo que voc\u00ea posicione elementos em qualquer \u00e1rea definida por essa grade. Principais caracter\u00edsticas: Sistema baseado em linhas e colunas Controle preciso sobre posicionamento de itens Capacidade de alinhamento avan\u00e7ado Responsivo por natureza Redefini\u00e7\u00e3o de layout sem alterar HTML","title":"O que \u00e9 Grid Layout?"},{"location":"_Css/grid/#diferenca-entre-grid-e-flexbox","text":"Caracter\u00edstica Grid CSS Flexbox Dimens\u00e3o Bidimensional (linhas e colunas) Unidimensional (linha OU coluna) Uso principal Layouts gerais da p\u00e1gina Alinhamento de componentes Controle Controle expl\u00edcito de colunas/linhas Fluxo flex\u00edvel dos itens Sobreposi\u00e7\u00e3o F\u00e1cil sobreposi\u00e7\u00e3o de elementos Mais dif\u00edcil de sobrepor Alinhamento Alinha em ambos os eixos Foco em um eixo por vez","title":"Diferen\u00e7a entre Grid e Flexbox"},{"location":"_Css/grid/#casos-de-uso-do-grid","text":"Layouts complexos : Criar designs com m\u00faltiplas colunas e linhas de forma precisa Designs assim\u00e9tricos : Layouts que n\u00e3o seguem um padr\u00e3o regular Alinhamento perfeito : Quando voc\u00ea precisa que v\u00e1rios elementos se alinhem perfeitamente Redefini\u00e7\u00e3o de layout : Mudar completamente a disposi\u00e7\u00e3o dos elementos em diferentes breakpoints Controle de espa\u00e7os vazios : Gerenciar explicitamente espa\u00e7os em branco no design Sistemas de cards : Organizar cards em grades responsivas Formul\u00e1rios complexos : Alinhar labels e inputs em layouts elaborados Galeria de imagens : Criar galerias com tamanhos variados de imagens Exemplo b\u00e1sico de c\u00f3digo Grid: .container { display: grid; grid-template-columns: 1fr 2fr 1fr; grid-gap: 20px; } O Grid CSS \u00e9 particularmente poderoso quando combinado com outras t\u00e9cnicas modernas como Flexbox, onde voc\u00ea pode usar Grid para o layout geral da p\u00e1gina e Flexbox para componentes individuais.","title":"Casos de uso do Grid"},{"location":"_Css/grid/#elementos-basicos-do-grid-css","text":"Vamos explorar os conceitos fundamentais para criar e controlar layouts com CSS Grid.","title":"Elementos B\u00e1sicos do Grid CSS"},{"location":"_Css/grid/#1-definindo-um-container-grid","text":"Para transformar um elemento em um container grid, use: <div class=\"container\"> <div class=\"item\">1</div> <div class=\"item\">2</div> <div class=\"item\">3</div> <div class=\"item\">4</div> </div> .container { display: grid; /* Ativa o Grid Layout */ } .item { background: lightblue; padding: 10px; border: 1px solid #333; } Isso faz com que todos os filhos diretos desse container se tornem itens da grade .","title":"1. Definindo um Container Grid"},{"location":"_Css/grid/#2-definindo-colunas-e-linhas","text":"","title":"2. Definindo Colunas e Linhas"},{"location":"_Css/grid/#grid-template-columns","text":"Define o n\u00famero e o tamanho das colunas. .container { display: grid; grid-template-columns: 100px 200px 100px; /* 3 colunas com larguras fixas */ } Ou usando unidades flex\u00edveis ( fr = fra\u00e7\u00e3o do espa\u00e7o dispon\u00edvel): .container { grid-template-columns: 1fr 2fr 1fr; /* 3 colunas (a do meio \u00e9 2x maior) */ }","title":"grid-template-columns"},{"location":"_Css/grid/#grid-template-rows","text":"Define o n\u00famero e a altura das linhas. .container { grid-template-rows: 50px 100px; /* 2 linhas com alturas fixas */ }","title":"grid-template-rows"},{"location":"_Css/grid/#combinacao-de-colunas-e-linhas","text":".container { grid-template-columns: 1fr 2fr; grid-template-rows: 100px 200px; } Isso cria 2 colunas e 2 linhas , formando uma grade 2x2.","title":"Combina\u00e7\u00e3o de colunas e linhas"},{"location":"_Css/grid/#3-espacamento-entre-celulas-gap","text":"Controla o espa\u00e7o entre as colunas e linhas.","title":"3. Espa\u00e7amento entre c\u00e9lulas (gap)"},{"location":"_Css/grid/#gap-espacamento-geral","text":".container { gap: 10px; /* Espa\u00e7o igual entre colunas e linhas */ }","title":"gap (espa\u00e7amento geral)"},{"location":"_Css/grid/#column-gap-e-row-gap-espacamento-individual","text":".container { column-gap: 20px; /* Espa\u00e7o entre colunas */ row-gap: 15px; /* Espa\u00e7o entre linhas */ }","title":"column-gap e row-gap (espa\u00e7amento individual)"},{"location":"_Css/grid/#exemplo-pratico-completo","text":"<div class=\"container\"> <div class=\"item\">1</div> <div class=\"item\">2</div> <div class=\"item\">3</div> <div class=\"item\">4</div> </div> .container { display: grid; grid-template-columns: 1fr 2fr 1fr; /* 3 colunas */ grid-template-rows: 100px 200px; /* 2 linhas */ gap: 15px; /* Espa\u00e7amento entre c\u00e9lulas */ } .item { background: lightblue; padding: 10px; border: 1px solid #333; }","title":"Exemplo Pr\u00e1tico Completo"},{"location":"_Css/grid/#resultado","text":"Uma grade com 3 colunas e 2 linhas . A segunda coluna ( 2fr ) \u00e9 mais larga que as outras. 15px de espa\u00e7amento entre as c\u00e9lulas.","title":"Resultado:"},{"location":"_Css/grid/#resumo-dos-conceitos-basicos","text":"Propriedade Descri\u00e7\u00e3o Exemplo display: grid Define um container grid display: grid; grid-template-columns Define colunas grid-template-columns: 1fr 2fr; grid-template-rows Define linhas grid-template-rows: 100px 200px; gap Espa\u00e7amento entre c\u00e9lulas gap: 10px; column-gap Espa\u00e7o entre colunas column-gap: 20px; row-gap Espa\u00e7o entre linhas row-gap: 15px; Com esses conceitos, voc\u00ea j\u00e1 pode criar layouts b\u00e1sicos em Grid CSS ! \ud83d\ude80","title":"Resumo dos Conceitos B\u00e1sicos"},{"location":"_Css/grid/#posicionamento-no-grid-css","text":"Al\u00e9m de definir colunas e linhas, o Grid permite posicionar itens de forma precisa dentro do grid, mesclando c\u00e9lulas e criando layouts complexos.","title":"Posicionamento no Grid CSS"},{"location":"_Css/grid/#1-posicionando-itens-com-grid-column-e-grid-row","text":"","title":"1. Posicionando Itens com grid-column e grid-row"},{"location":"_Css/grid/#grid-column-controla-a-posicao-do-item-nas-colunas","text":".item { grid-column: 2 / 4; /* Come\u00e7a na coluna 2 e termina na 4 */ } grid-column-start (in\u00edcio) e grid-column-end (fim) podem ser usados separadamente.","title":"grid-column \u2192 Controla a posi\u00e7\u00e3o do item nas colunas"},{"location":"_Css/grid/#grid-row-controla-a-posicao-do-item-nas-linhas","text":".item { grid-row: 1 / 3; /* Come\u00e7a na linha 1 e termina na 3 */ } grid-row-start e grid-row-end tamb\u00e9m funcionam individualmente.","title":"grid-row \u2192 Controla a posi\u00e7\u00e3o do item nas linhas"},{"location":"_Css/grid/#exemplo","text":"<div class=\"container\"> <div class=\"item1\">1</div> <div class=\"item2\">2</div> <div class=\"item3\">3</div> </div> .container { display: grid; grid-template-columns: 100px 100px 100px; grid-template-rows: 100px 100px; gap: 10px; } .item1 { grid-column: 1 / 3; /* Ocupa da coluna 1 at\u00e9 a 3 */ grid-row: 1; /* Ocupa apenas a linha 1 */ background: lightblue; } .item2 { grid-column: 3; grid-row: 1 / 3; /* Ocupa da linha 1 at\u00e9 a 3 */ background: lightgreen; } .item3 { grid-column: 1 / 3; grid-row: 2; background: lightcoral; } Resultado: item1 ocupa colunas 1 e 2 (linha 1). item2 ocupa coluna 3 e se estende por linhas 1 e 2 . item3 ocupa colunas 1 e 2 (linha 2).","title":"Exemplo:"},{"location":"_Css/grid/#2-usando-grid-area-para-areas-nomeadas","text":"Voc\u00ea pode nomear \u00e1reas no grid e posicionar elementos nelas.","title":"2. Usando grid-area para \u00c1reas Nomeadas"},{"location":"_Css/grid/#passo-1-definir-areas-no-container","text":".container { display: grid; grid-template-areas: \"header header header\" \"sidebar main main\" \"footer footer footer\"; }","title":"Passo 1: Definir \u00e1reas no container"},{"location":"_Css/grid/#passo-2-atribuir-itens-as-areas","text":".header { grid-area: header; } .sidebar { grid-area: sidebar; } .main { grid-area: main; } .footer { grid-area: footer; }","title":"Passo 2: Atribuir itens \u00e0s \u00e1reas"},{"location":"_Css/grid/#exemplo-pratico","text":"<div class=\"container\"> <div class=\"header\">Header</div> <div class=\"sidebar\">Sidebar</div> <div class=\"main\">Main</div> <div class=\"footer\">Footer</div> </div> .container { display: grid; grid-template-columns: 1fr 2fr; grid-template-rows: 80px 1fr 60px; grid-template-areas: \"header header\" \"sidebar main\" \"footer footer\"; gap: 10px; } .header { grid-area: header; background: lightblue; } .sidebar { grid-area: sidebar; background: lightgreen; } .main { grid-area: main; background: lightcoral; } .footer { grid-area: footer; background: lightgray; } Resultado: Header ocupa toda a largura. Sidebar e Main dividem o espa\u00e7o central. Footer ocupa a parte inferior.","title":"Exemplo Pr\u00e1tico:"},{"location":"_Css/grid/#3-span-e-mesclagem-de-celulas-grid-column-span","text":"Voc\u00ea pode expandir um item por v\u00e1rias colunas/linhas sem definir um fim fixo.","title":"3. Span e Mesclagem de C\u00e9lulas (grid-column: span)"},{"location":"_Css/grid/#usando-span","text":".item { grid-column: span 2; /* Ocupa 2 colunas */ grid-row: span 3; /* Ocupa 3 linhas */ }","title":"Usando span"},{"location":"_Css/grid/#exemplo_1","text":".item1 { grid-column: 1 / span 2; /* Come\u00e7a na coluna 1 e ocupa 2 colunas */ grid-row: 1 / span 2; /* Come\u00e7a na linha 1 e ocupa 2 linhas */ } Equivalente a: .item1 { grid-column: 1 / 3; grid-row: 1 / 3; }","title":"Exemplo:"},{"location":"_Css/grid/#aplicacao-pratica","text":"<div class=\"container\"> <div class=\"item big\">1 (2x2)</div> <div class=\"item\">2</div> <div class=\"item\">3</div> <div class=\"item\">4</div> </div> .container { display: grid; grid-template-columns: repeat(3, 1fr); grid-template-rows: repeat(2, 100px); gap: 10px; } .big { grid-column: span 2; /* Ocupa 2 colunas */ grid-row: span 2; /* Ocupa 2 linhas */ background: lightblue; } Resultado: O primeiro item ocupa 2 colunas e 2 linhas , enquanto os outros preenchem o restante.","title":"Aplica\u00e7\u00e3o Pr\u00e1tica:"},{"location":"_Css/grid/#resumo-de-posicionamento-no-grid","text":"Propriedade Uso Exemplo grid-column Define in\u00edcio e fim em colunas grid-column: 2 / 4; grid-row Define in\u00edcio e fim em linhas grid-row: 1 / 3; grid-area Posiciona em \u00e1reas nomeadas grid-area: header; span Expande por N colunas/linhas grid-column: span 2; Com essas t\u00e9cnicas, voc\u00ea pode criar layouts complexos com sobreposi\u00e7\u00e3o, expans\u00e3o e organiza\u00e7\u00e3o avan\u00e7ada! \ud83d\ude80","title":"Resumo de Posicionamento no Grid"},{"location":"_Css/grid/#alinhamento-e-justificacao-no-grid-css","text":"O Grid CSS oferece propriedades poderosas para controlar o posicionamento e a distribui\u00e7\u00e3o dos itens dentro do container grid. Vamos explorar como alinhar e justificar elementos de forma eficiente.","title":"Alinhamento e Justifica\u00e7\u00e3o no Grid CSS"},{"location":"_Css/grid/#1-alinhamento-dos-itens-dentro-do-grid","text":"","title":"1. Alinhamento dos Itens Dentro do Grid"},{"location":"_Css/grid/#justify-items-alinhamento-horizontal-eixo-x-de-todos-os-itens","text":"Controla como os itens s\u00e3o alinhados dentro de suas c\u00e9lulas ao longo do eixo horizontal. Valores poss\u00edveis: start (alinhado \u00e0 esquerda) end (alinhado \u00e0 direita) center (centralizado) stretch (padr\u00e3o, ocupa toda a largura) .container { justify-items: center; /* Todos os itens centralizados horizontalmente */ }","title":"justify-items \u2192 Alinhamento horizontal (eixo X) de todos os itens"},{"location":"_Css/grid/#align-items-alinhamento-vertical-eixo-y-de-todos-os-itens","text":"Controla como os itens s\u00e3o alinhados dentro de suas c\u00e9lulas ao longo do eixo vertical. Valores poss\u00edveis: start (topo) end (base) center (meio) stretch (padr\u00e3o, ocupa toda a altura) .container { align-items: end; /* Todos os itens alinhados na base */ }","title":"align-items \u2192 Alinhamento vertical (eixo Y) de todos os itens"},{"location":"_Css/grid/#place-items-atalho-para-align-items-e-justify-items","text":"Sintaxe: place-items: <align-items> <justify-items> .container { place-items: center end; /* Vertical: center, Horizontal: end */ }","title":"place-items \u2192 Atalho para align-items e justify-items"},{"location":"_Css/grid/#2-alinhamento-individual-de-itens","text":"Se precisar sobrescrever o alinhamento para um item espec\u00edfico:","title":"2. Alinhamento Individual de Itens"},{"location":"_Css/grid/#justify-self-alinhamento-horizontal-individual","text":".item { justify-self: start; /* Este item alinhado \u00e0 esquerda */ }","title":"justify-self \u2192 Alinhamento horizontal individual"},{"location":"_Css/grid/#align-self-alinhamento-vertical-individual","text":".item { align-self: center; /* Este item centralizado verticalmente */ }","title":"align-self \u2192 Alinhamento vertical individual"},{"location":"_Css/grid/#place-self-atalho-para-ambos","text":".item { place-self: center end; /* align-self: center; justify-self: end; */ }","title":"place-self \u2192 Atalho para ambos"},{"location":"_Css/grid/#3-distribuicao-do-espaco-do-grid-container","text":"Quando o grid n\u00e3o ocupa todo o espa\u00e7o dispon\u00edvel, podemos controlar como o espa\u00e7o extra \u00e9 distribu\u00eddo.","title":"3. Distribui\u00e7\u00e3o do Espa\u00e7o do Grid (Container)"},{"location":"_Css/grid/#justify-content-distribuicao-horizontal-do-grid-como-um-todo","text":"Valores poss\u00edveis: start , end , center space-between (espa\u00e7o entre colunas) space-around (espa\u00e7o ao redor) space-evenly (espa\u00e7o igual) stretch (estica as colunas) .container { justify-content: space-between; /* Espa\u00e7o entre colunas */ }","title":"justify-content \u2192 Distribui\u00e7\u00e3o horizontal do grid como um todo"},{"location":"_Css/grid/#align-content-distribuicao-vertical-do-grid-como-um-todo","text":"Mesmos valores de justify-content , mas aplicado verticalmente. .container { align-content: center; /* Centraliza todo o grid verticalmente */ }","title":"align-content \u2192 Distribui\u00e7\u00e3o vertical do grid como um todo"},{"location":"_Css/grid/#place-content-atalho-para-ambos","text":".container { place-content: space-between center; /* justify-content: space-between; align-content: center; */ }","title":"place-content \u2192 Atalho para ambos"},{"location":"_Css/grid/#exemplo-pratico-completo_1","text":"<div class=\"container\"> <div class=\"item\">1</div> <div class=\"item\">2</div> <div class=\"item\">3</div> <div class=\"item\">4</div> </div> .container { display: grid; grid-template-columns: 100px 100px; grid-template-rows: 100px 100px; height: 500px; /* Espa\u00e7o extra para demonstra\u00e7\u00e3o */ width: 400px; border: 2px solid #333; /* Alinhamento dos itens */ justify-items: center; align-items: end; /* Distribui\u00e7\u00e3o do grid */ justify-content: space-evenly; align-content: center; gap: 10px; } .item { background: lightblue; width: 80px; height: 50px; display: flex; align-items: center; justify-content: center; } .item:nth-child(3) { justify-self: start; /* Sobrescreve apenas este item */ align-self: start; } Resultado: Todos os itens est\u00e3o centralizados horizontalmente e alinhados na base (configura\u00e7\u00e3o do container) O grid inteiro est\u00e1 centralizado verticalmente com espa\u00e7o uniforme horizontalmente O terceiro item tem alinhamento sobrescrito (canto superior esquerdo)","title":"Exemplo Pr\u00e1tico Completo"},{"location":"_Css/grid/#resumo-das-propriedades-de-alinhamento","text":"Propriedade Escopo Eixo Valores Comuns justify-items Container Horizontal (X) start, end, center, stretch align-items Container Vertical (Y) start, end, center, stretch place-items Container Ambos [align] [justify] justify-self Item Horizontal (X) start, end, center, stretch align-self Item Vertical (Y) start, end, center, stretch place-self Item Ambos [align] [justify] justify-content Container Horizontal (X) start, center, space-between, etc. align-content Container Vertical (Y) start, center, space-between, etc. place-content Container Ambos [align] [justify] Com essas propriedades, voc\u00ea tem controle total sobre o posicionamento e a distribui\u00e7\u00e3o dos elementos no Grid CSS! \ud83c\udfaf","title":"Resumo das Propriedades de Alinhamento"},{"location":"_Css/grid/#grid-responsivo-com-css","text":"Criar layouts que se adaptam a diferentes tamanhos de tela \u00e9 essencial no desenvolvimento web moderno. O CSS Grid oferece ferramentas poderosas para construir grids din\u00e2micos e responsivos.","title":"Grid Responsivo com CSS"},{"location":"_Css/grid/#1-funcoes-avancadas-para-grids-dinamicos","text":"","title":"1. Fun\u00e7\u00f5es Avan\u00e7adas para Grids Din\u00e2micos"},{"location":"_Css/grid/#repeat-repete-um-padrao-de-colunaslinhas","text":"Sintaxe: repeat(n\u00famero-de-repeti\u00e7\u00f5es, tamanho) .container { grid-template-columns: repeat(3, 1fr); /* 3 colunas de 1 fra\u00e7\u00e3o cada */ }","title":"repeat() \u2192 Repete um padr\u00e3o de colunas/linhas"},{"location":"_Css/grid/#minmax-define-tamanhos-minimos-e-maximos","text":"Sintaxe: minmax(valor-m\u00ednimo, valor-m\u00e1ximo) .container { grid-template-columns: repeat(3, minmax(100px, 1fr)); /* Colunas com no m\u00ednimo 100px e no m\u00e1ximo 1fr */ }","title":"minmax() \u2192 Define tamanhos m\u00ednimos e m\u00e1ximos"},{"location":"_Css/grid/#auto-fit-vs-auto-fill-ajuste-automatico-de-colunas","text":"Ambos preenchem o espa\u00e7o dispon\u00edvel, mas comportam-se diferentemente quando sobram espa\u00e7os: /* auto-fit: redimensiona as colunas para preencher o espa\u00e7o */ .container { grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); } /* auto-fill: mant\u00e9m o tamanho m\u00ednimo e cria colunas fantasmas se houver espa\u00e7o */ .container { grid-template-columns: repeat(auto-fill, minmax(200px, 1fr)); } Diferen\u00e7a pr\u00e1tica: auto-fit \u2192 Colunas se expandem para ocupar todo o container auto-fill \u2192 Mant\u00e9m o tamanho m\u00ednimo e deixa espa\u00e7o vazio se necess\u00e1rio","title":"auto-fit vs auto-fill \u2192 Ajuste autom\u00e1tico de colunas"},{"location":"_Css/grid/#2-tecnicas-para-grid-responsivo","text":"","title":"2. T\u00e9cnicas para Grid Responsivo"},{"location":"_Css/grid/#exemplo-1-grid-que-se-ajusta-automaticamente","text":".container { display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 20px; } Em telas largas: cria mais colunas (quantas couberem) Em telas estreitas: reduz para 1 coluna","title":"Exemplo 1: Grid que se ajusta automaticamente"},{"location":"_Css/grid/#exemplo-2-layout-que-muda-completamente","text":".container { display: grid; grid-template-columns: 1fr; grid-template-areas: \"header\" \"main\" \"sidebar\" \"footer\"; } @media (min-width: 768px) { .container { grid-template-columns: 200px 1fr; grid-template-areas: \"header header\" \"sidebar main\" \"footer footer\"; } }","title":"Exemplo 2: Layout que muda completamente"},{"location":"_Css/grid/#exemplo-3-numero-variavel-de-colunas","text":".container { display: grid; grid-template-columns: repeat(auto-fill, minmax(150px, 1fr)); } Mant\u00e9m no m\u00ednimo 150px por coluna Cria quantas colunas couberem no espa\u00e7o dispon\u00edvel","title":"Exemplo 3: N\u00famero vari\u00e1vel de colunas"},{"location":"_Css/grid/#3-media-queries-para-controle-preciso","text":"Combine media queries com Grid para layouts espec\u00edficos: /* Mobile First (1 coluna) */ .container { display: grid; grid-template-columns: 1fr; gap: 10px; } /* Tablet (2 colunas) */ @media (min-width: 600px) { .container { grid-template-columns: repeat(2, 1fr); } } /* Desktop (4 colunas) */ @media (min-width: 900px) { .container { grid-template-columns: repeat(4, 1fr); } } Dica profissional: Use min-width para uma abordagem mobile-first.","title":"3. Media Queries para Controle Preciso"},{"location":"_Css/grid/#4-tecnicas-avancadas","text":"","title":"4. T\u00e9cnicas Avan\u00e7adas"},{"location":"_Css/grid/#imagens-responsivas-em-grid","text":".gallery { display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); } .gallery img { width: 100%; height: auto; object-fit: cover; }","title":"Imagens responsivas em grid"},{"location":"_Css/grid/#grid-com-conteudo-variavel","text":".card-grid { display: grid; grid-template-columns: repeat(auto-fill, minmax(300px, 1fr)); grid-auto-rows: minmax(150px, auto); gap: 20px; } grid-auto-rows garante que linhas extras tenham altura m\u00ednima","title":"Grid com conte\u00fado vari\u00e1vel"},{"location":"_Css/grid/#resumo-das-tecnicas-responsivas","text":"T\u00e9cnica Uso Exemplo repeat() Padr\u00f5es repetitivos repeat(4, 1fr) minmax() Limites flex\u00edveis minmax(200px, 1fr) auto-fit Preenchimento inteligente repeat(auto-fit, minmax()) auto-fill Preenchimento conservador repeat(auto-fill, minmax()) Media Queries Breakpoints espec\u00edficos @media (min-width: 768px) Com essas t\u00e9cnicas, voc\u00ea pode criar grids que se adaptam perfeitamente a qualquer dispositivo! \ud83d\udcf1\ud83d\udcbb\ud83d\udda5\ufe0f","title":"Resumo das T\u00e9cnicas Responsivas"},{"location":"_Css/grid/#exemplos-praticos","text":"Layout b\u00e1sico com 3 colunas Galeria de imagens responsiva Layout de blog com header, main e footer","title":"Exemplos Pr\u00e1ticos"},{"location":"_Css/grid/#exemplo-pratico-1-grid-basico-com-3-colunas","text":"<!DOCTYPE html> <html lang=\"pt-BR\"> <head> <meta charset=\"UTF-8\"> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"> <title>Exemplo Grid CSS</title> <style> .grid-container { display: grid; grid-template-columns: 1fr 1fr 1fr; gap: 20px; } .item { background-color: lightblue; padding: 20px; text-align: center; } </style> </head> <body> <div class=\"grid-container\"> <div class=\"item\">Item 1</div> <div class=\"item\">Item 2</div> <div class=\"item\">Item 3</div> <div class=\"item\">Item 4</div> <div class=\"item\">Item 5</div> <div class=\"item\">Item 6</div> </div> </body> </html>","title":"Exemplo Pr\u00e1tico 1: Grid B\u00e1sico com 3 Colunas"},{"location":"_Css/grid/#exemplo-pratico-2-grid-responsivo","text":"<!DOCTYPE html> <html lang=\"pt-BR\"> <head> <meta charset=\"UTF-8\"> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"> <title>Grid Responsivo</title> <style> .grid-container { display: grid; grid-template-columns: repeat(auto-fit, minmax(150px, 1fr)); gap: 10px; } .item { background-color: lightcoral; padding: 20px; text-align: center; } </style> </head> <body> <div class=\"grid-container\"> <div class=\"item\">Item 1</div> <div class=\"item\">Item 2</div> <div class=\"item\">Item 3</div> <div class=\"item\">Item 4</div> </div> </body> </html>","title":"Exemplo Pr\u00e1tico 2: Grid Responsivo"},{"location":"_Css/grid/#layout-de-blog-com-css-grid-header-main-footer","text":"Aqui est\u00e1 um exemplo completo de um layout de blog responsivo usando CSS Grid, com as seguintes se\u00e7\u00f5es: Header (cabe\u00e7alho) Main (conte\u00fado principal com artigos e sidebar) Footer (rodap\u00e9)","title":"Layout de Blog com CSS Grid (Header, Main, Footer)"},{"location":"_Css/grid/#1-estrutura-html-basica","text":"<!DOCTYPE html> <html lang=\"pt-BR\"> <head> <meta charset=\"UTF-8\"> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"> <title>Blog com Grid CSS</title> <link rel=\"stylesheet\" href=\"styles.css\"> </head> <body> <div class=\"container\"> <header class=\"header\">Blog do Dev</header> <main class=\"main-content\"> <article class=\"post\"> <h2>T\u00edtulo do Post</h2> <p>Conte\u00fado do artigo...</p> </article> <article class=\"post\"> <h2>Outro Post</h2> <p>Mais conte\u00fado...</p> </article> </main> <aside class=\"sidebar\"> <h3>Barra Lateral</h3> <ul> <li>Categoria 1</li> <li>Categoria 2</li> </ul> </aside> <footer class=\"footer\">\u00a9 2024 Blog do Dev</footer> </div> </body> </html>","title":"1. Estrutura HTML B\u00e1sica"},{"location":"_Css/grid/#2-css-com-grid-layout","text":"/* Reset b\u00e1sico */ * { margin: 0; padding: 0; box-sizing: border-box; } body { font-family: Arial, sans-serif; line-height: 1.6; } .container { display: grid; grid-template-areas: \"header header header\" \"main main sidebar\" \"footer footer footer\"; grid-template-columns: 1fr 1fr 300px; /* 2 colunas + sidebar fixa */ grid-template-rows: auto 1fr auto; /* Altura autom\u00e1tica para header e footer */ min-height: 100vh; /* Ocupa toda a altura da tela */ gap: 20px; padding: 20px; } /* Estiliza\u00e7\u00e3o das \u00e1reas */ .header { grid-area: header; background: #2c3e50; color: white; padding: 20px; text-align: center; } .main-content { grid-area: main; display: grid; gap: 20px; } .post { background: #f9f9f9; padding: 20px; border-radius: 5px; box-shadow: 0 2px 5px rgba(0,0,0,0.1); } .sidebar { grid-area: sidebar; background: #34495e; color: white; padding: 20px; border-radius: 5px; } .footer { grid-area: footer; background: #2c3e50; color: white; padding: 15px; text-align: center; }","title":"2. CSS com Grid Layout"},{"location":"_Css/grid/#3-versao-responsiva-mobile-first","text":"/* Layout Mobile (1 coluna) */ .container { grid-template-areas: \"header\" \"main\" \"sidebar\" \"footer\"; grid-template-columns: 1fr; } /* Tablet (2 colunas) */ @media (min-width: 768px) { .container { grid-template-areas: \"header header\" \"main sidebar\" \"footer footer\"; grid-template-columns: 1fr 250px; } } /* Desktop (3 colunas) */ @media (min-width: 1024px) { .container { grid-template-areas: \"header header header\" \"main main sidebar\" \"footer footer footer\"; grid-template-columns: 1fr 1fr 300px; } }","title":"3. Vers\u00e3o Responsiva (Mobile First)"},{"location":"_Css/grid/#4-exemplo-visual-do-layout","text":"[ HEADER ] \u2190 `grid-area: header` [ MAIN ][ SIDEBAR ] \u2190 `grid-area: main` e `grid-area: sidebar` [ FOOTER ] \u2190 `grid-area: footer` Comportamento em diferentes telas: Mobile : Tudo em uma coluna (header \u2192 main \u2192 sidebar \u2192 footer) Tablet : Header e footer em largura total, main e sidebar lado a lado Desktop : Header e footer em 3 colunas, main ocupa 2 colunas, sidebar 1 coluna","title":"4. Exemplo Visual do Layout"},{"location":"_Css/grid/#5-recursos-adicionais","text":"","title":"5. Recursos Adicionais"},{"location":"_Css/grid/#grid-com-conteudo-dinamico-posts-que-se-ajustam","text":".main-content { grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); }","title":"Grid com conte\u00fado din\u00e2mico (posts que se ajustam):"},{"location":"_Css/grid/#sticky-sidebar-barra-lateral-fixa","text":".sidebar { position: sticky; top: 20px; align-self: start; } Este layout oferece uma estrutura limpa e organizada para blogs, totalmente responsiva e f\u00e1cil de personalizar! \ud83d\ude80","title":"Sticky Sidebar (barra lateral fixa):"},{"location":"_Css/grid/#sites-com-exemplos-e-demonstracoes","text":"","title":"Sites com exemplos e demonstra\u00e7\u00f5es"},{"location":"_Css/grid/#-css-tricks-a-complete-guide-to-grid","text":"URL: CSS-Tricks Descri\u00e7\u00e3o: Um guia abrangente que explica todos os conceitos do CSS Grid, com exemplos visuais e explica\u00e7\u00f5es detalhadas de cada propriedade. Inclui muitos exemplos de layout com grids.","title":"- CSS-Tricks - A Complete Guide to Grid"},{"location":"_Css/grid/#-grid-by-example","text":"URL: Grid by Example Descri\u00e7\u00e3o: Um site dedicado ao CSS Grid criado por Rachel Andrew. Oferece exemplos pr\u00e1ticos, templates e v\u00eddeos explicativos. \u00c9 um excelente recurso para entender como o Grid pode ser utilizado em diversos layouts.","title":"- Grid by Example"},{"location":"_Css/grid/#-css-grid-garden","text":"URL: CSS Grid Garden Descri\u00e7\u00e3o: Um jogo interativo onde voc\u00ea aprende CSS Grid jogando. Ele \u00e9 projetado para ensinar as propriedades do Grid de uma forma divertida e pr\u00e1tica, ajudando a memorizar os conceitos enquanto joga.","title":"- CSS Grid Garden"},{"location":"_Css/grid/#-mdn-web-docs-css-grid-layout","text":"URL: MDN Web Docs Descri\u00e7\u00e3o: A documenta\u00e7\u00e3o oficial do Mozilla Developer Network (MDN) sobre o Grid Layout. Oferece exemplos detalhados de uso, com explica\u00e7\u00f5es t\u00e9cnicas das propriedades e comportamentos do Grid.","title":"- MDN Web Docs - CSS Grid Layout"},{"location":"_Css/grid/#-grid-layout-generator","text":"URL: Grid Layout Generator Descri\u00e7\u00e3o: Uma ferramenta visual que permite criar layouts de Grid interativamente. Voc\u00ea pode desenhar seu grid, definir linhas e colunas, e gerar o c\u00f3digo CSS automaticamente. Ideal para experimentar e gerar prot\u00f3tipos rapidamente.","title":"- Grid Layout Generator"},{"location":"_Css/grid/#-css-grid-generator","text":"URL: CSS Grid Generator Descri\u00e7\u00e3o: Um gerador de grids online, onde voc\u00ea pode arrastar e criar seu layout. Ele gera o c\u00f3digo CSS necess\u00e1rio com base nas configura\u00e7\u00f5es que voc\u00ea seleciona, tornando f\u00e1cil criar grids complexos.","title":"- CSS Grid Generator"},{"location":"_Css/grid/#-learn-css-grid","text":"URL: Learn CSS Grid Descri\u00e7\u00e3o: Um site educacional que ensina CSS Grid com uma abordagem pr\u00e1tica e visual. Ele inclui uma s\u00e9rie de tutoriais e exemplos, focados em ensinar os conceitos passo a passo. Esses sites s\u00e3o \u00f3timos para aprender, praticar e experimentar com o CSS Grid em diversos n\u00edveis de complexidade.","title":"- Learn CSS Grid"},{"location":"_Css/grid/#exercicios","text":"Crie um layout com 4 colunas e 3 linhas, e adicione diferentes cores aos elementos. Use o Grid para criar um layout de p\u00e1gina com cabe\u00e7alho, barra lateral, conte\u00fado principal e rodap\u00e9. Ajuste o layout criado para que seja responsivo utilizando minmax() e auto-fit .","title":"Exerc\u00edcios:"},{"location":"_Css/posicionamento/","text":"Posicionamento Nesse roteiro apresentamos o posicionamento em CSS , cobrindo os conceitos principais de forma clara e pr\u00e1tica. O foco ser\u00e1 nos diferentes valores da propriedade position e suas intera\u00e7\u00f5es com outras propriedades de layout, como top , right , bottom , left , e z-index . 1. Introdu\u00e7\u00e3o ao Posicionamento no CSS A propriedade position \u00e9 importante para controlar o layout dos elementos. Conceitos de fluxo de documento normal (o comportamento padr\u00e3o dos elementos no HTML). 2. Valores da Propriedade position 2.1. static (Padr\u00e3o) Descri\u00e7\u00e3o : O valor padr\u00e3o. O elemento segue o fluxo normal da p\u00e1gina e n\u00e3o \u00e9 afetado por top , right , bottom , left . Exemplo : <div class=\"static-box\">Eu sou est\u00e1tico!</div>` .static-box { width: 200px; height: 100px; background-color: lightblue; position: static; } 2.2. relative Descri\u00e7\u00e3o : O elemento \u00e9 posicionado em rela\u00e7\u00e3o \u00e0 sua posi\u00e7\u00e3o original. As propriedades top , right , bottom , left podem mov\u00ea-lo, mas ele ainda ocupa o espa\u00e7o original. Exemplo : <div class=\"relative-box\">Eu sou relativo!</div> .relative-box { width: 200px; height: 100px; background-color: lightgreen; position: relative; top: 20px; /* Movido 20px para baixo */ left: 15px; /* Movido 15px para a direita */ } 2.3. absolute Descri\u00e7\u00e3o : O elemento \u00e9 removido do fluxo normal do documento e posicionado em rela\u00e7\u00e3o ao seu elemento pai mais pr\u00f3ximo que tenha position diferente de static . Se n\u00e3o houver um pai posicionado, ser\u00e1 em rela\u00e7\u00e3o ao body . Exemplo : <div class=\"parent\"> <div class=\"absolute-box\">Eu sou absoluto!</div> </div> .parent { position: relative; width: 300px; height: 200px; background-color: lightgray; } .absolute-box { position: absolute; top: 10px; right: 10px; width: 100px; height: 50px; background-color: salmon; } 2.4. fixed Descri\u00e7\u00e3o : O elemento \u00e9 posicionado em rela\u00e7\u00e3o \u00e0 janela de visualiza\u00e7\u00e3o (viewport) e n\u00e3o se move quando a p\u00e1gina \u00e9 rolada. Exemplo : <div class=\"fixed-box\">Eu sou fixo!</div> .fixed-box { position: fixed; bottom: 0; right: 0; width: 100px; height: 50px; background-color: yellow; } 2.5. sticky Descri\u00e7\u00e3o : O elemento alterna entre o comportamento relative e fixed , dependendo da rolagem da p\u00e1gina. Fica \"preso\" em uma posi\u00e7\u00e3o quando voc\u00ea rola al\u00e9m de um certo ponto. Exemplo : <div class=\"sticky-box\">Eu sou sticky!</div> .sticky-box { position: sticky; top: 0; /* Fica \"preso\" no topo ap\u00f3s rolar */ background-color: lightcoral; padding: 10px; } 3. Propriedades Auxiliares top , right , bottom , left : Controlam a posi\u00e7\u00e3o do elemento posicionado. S\u00e3o aplic\u00e1veis quando position n\u00e3o \u00e9 static . z-index : Controla a ordem de sobreposi\u00e7\u00e3o dos elementos. Elementos com valores maiores de z-index aparecem acima de elementos com valores menores. 4. Exerc\u00edcio Pr\u00e1tico Criar uma p\u00e1gina com uma barra de navega\u00e7\u00e3o fixa ( fixed ), um conte\u00fado principal com um cabe\u00e7alho \"sticky\", e uma se\u00e7\u00e3o posicionada de forma relativa a um cont\u00eainer com position: relative e um bot\u00e3o posicionado de forma absoluta. HTML : <nav class=\"fixed-nav\">Navega\u00e7\u00e3o</nav> <header class=\"sticky-header\">Cabe\u00e7alho Sticky</header> <section class=\"content\"> <div class=\"relative-container\"> <button class=\"absolute-button\">Eu sou absoluto</button> </div> </section> CSS : .fixed-nav { position: fixed; top: 0; left: 0; width: 100%; background-color: #333; color: white; padding: 10px; } .sticky-header { position: sticky; top: 50px; background-color: #f4f4f4; padding: 15px; } .relative-container { position: relative; background-color: lightblue; height: 300px; margin: 20px; } .absolute-button { position: absolute; top: 20px; right: 20px; padding: 10px; } Isso d\u00e1 uma vis\u00e3o abrangente do sistema de posicionamento no CSS e como ele pode ser aplicado em p\u00e1ginas web.","title":"Posicionamento"},{"location":"_Css/posicionamento/#posicionamento","text":"Nesse roteiro apresentamos o posicionamento em CSS , cobrindo os conceitos principais de forma clara e pr\u00e1tica. O foco ser\u00e1 nos diferentes valores da propriedade position e suas intera\u00e7\u00f5es com outras propriedades de layout, como top , right , bottom , left , e z-index .","title":"Posicionamento"},{"location":"_Css/posicionamento/#1-introducao-ao-posicionamento-no-css","text":"A propriedade position \u00e9 importante para controlar o layout dos elementos. Conceitos de fluxo de documento normal (o comportamento padr\u00e3o dos elementos no HTML).","title":"1. Introdu\u00e7\u00e3o ao Posicionamento no CSS"},{"location":"_Css/posicionamento/#2-valores-da-propriedade-position","text":"","title":"2. Valores da Propriedade position"},{"location":"_Css/posicionamento/#21-static-padrao","text":"Descri\u00e7\u00e3o : O valor padr\u00e3o. O elemento segue o fluxo normal da p\u00e1gina e n\u00e3o \u00e9 afetado por top , right , bottom , left . Exemplo : <div class=\"static-box\">Eu sou est\u00e1tico!</div>` .static-box { width: 200px; height: 100px; background-color: lightblue; position: static; }","title":"2.1. static (Padr\u00e3o)"},{"location":"_Css/posicionamento/#22-relative","text":"Descri\u00e7\u00e3o : O elemento \u00e9 posicionado em rela\u00e7\u00e3o \u00e0 sua posi\u00e7\u00e3o original. As propriedades top , right , bottom , left podem mov\u00ea-lo, mas ele ainda ocupa o espa\u00e7o original. Exemplo : <div class=\"relative-box\">Eu sou relativo!</div> .relative-box { width: 200px; height: 100px; background-color: lightgreen; position: relative; top: 20px; /* Movido 20px para baixo */ left: 15px; /* Movido 15px para a direita */ }","title":"2.2. relative"},{"location":"_Css/posicionamento/#23-absolute","text":"Descri\u00e7\u00e3o : O elemento \u00e9 removido do fluxo normal do documento e posicionado em rela\u00e7\u00e3o ao seu elemento pai mais pr\u00f3ximo que tenha position diferente de static . Se n\u00e3o houver um pai posicionado, ser\u00e1 em rela\u00e7\u00e3o ao body . Exemplo : <div class=\"parent\"> <div class=\"absolute-box\">Eu sou absoluto!</div> </div> .parent { position: relative; width: 300px; height: 200px; background-color: lightgray; } .absolute-box { position: absolute; top: 10px; right: 10px; width: 100px; height: 50px; background-color: salmon; }","title":"2.3. absolute"},{"location":"_Css/posicionamento/#24-fixed","text":"Descri\u00e7\u00e3o : O elemento \u00e9 posicionado em rela\u00e7\u00e3o \u00e0 janela de visualiza\u00e7\u00e3o (viewport) e n\u00e3o se move quando a p\u00e1gina \u00e9 rolada. Exemplo : <div class=\"fixed-box\">Eu sou fixo!</div> .fixed-box { position: fixed; bottom: 0; right: 0; width: 100px; height: 50px; background-color: yellow; }","title":"2.4. fixed"},{"location":"_Css/posicionamento/#25-sticky","text":"Descri\u00e7\u00e3o : O elemento alterna entre o comportamento relative e fixed , dependendo da rolagem da p\u00e1gina. Fica \"preso\" em uma posi\u00e7\u00e3o quando voc\u00ea rola al\u00e9m de um certo ponto. Exemplo : <div class=\"sticky-box\">Eu sou sticky!</div> .sticky-box { position: sticky; top: 0; /* Fica \"preso\" no topo ap\u00f3s rolar */ background-color: lightcoral; padding: 10px; }","title":"2.5. sticky"},{"location":"_Css/posicionamento/#3-propriedades-auxiliares","text":"top , right , bottom , left : Controlam a posi\u00e7\u00e3o do elemento posicionado. S\u00e3o aplic\u00e1veis quando position n\u00e3o \u00e9 static . z-index : Controla a ordem de sobreposi\u00e7\u00e3o dos elementos. Elementos com valores maiores de z-index aparecem acima de elementos com valores menores.","title":"3. Propriedades Auxiliares"},{"location":"_Css/posicionamento/#4-exercicio-pratico","text":"Criar uma p\u00e1gina com uma barra de navega\u00e7\u00e3o fixa ( fixed ), um conte\u00fado principal com um cabe\u00e7alho \"sticky\", e uma se\u00e7\u00e3o posicionada de forma relativa a um cont\u00eainer com position: relative e um bot\u00e3o posicionado de forma absoluta. HTML : <nav class=\"fixed-nav\">Navega\u00e7\u00e3o</nav> <header class=\"sticky-header\">Cabe\u00e7alho Sticky</header> <section class=\"content\"> <div class=\"relative-container\"> <button class=\"absolute-button\">Eu sou absoluto</button> </div> </section> CSS : .fixed-nav { position: fixed; top: 0; left: 0; width: 100%; background-color: #333; color: white; padding: 10px; } .sticky-header { position: sticky; top: 50px; background-color: #f4f4f4; padding: 15px; } .relative-container { position: relative; background-color: lightblue; height: 300px; margin: 20px; } .absolute-button { position: absolute; top: 20px; right: 20px; padding: 10px; } Isso d\u00e1 uma vis\u00e3o abrangente do sistema de posicionamento no CSS e como ele pode ser aplicado em p\u00e1ginas web.","title":"4. Exerc\u00edcio Pr\u00e1tico"},{"location":"_Css/siteresponsivo/","text":"Responsividade Para criar um site responsivo utilizando media queries e unidades de dimensionamento relativas , voc\u00ea pode seguir este exemplo b\u00e1sico: Estrutura do HTML: <!DOCTYPE html> <html lang=\"pt-br\"> <head> <meta charset=\"UTF-8\"> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"> <title>Site Responsivo</title> <link rel=\"stylesheet\" href=\"style.css\"> </head> <body> <header> <h1>Bem-vindo ao site responsivo</h1> </header> <nav> <ul> <li><a href=\"#home\">Home</a></li> <li><a href=\"#sobre\">Sobre</a></li> <li><a href=\"#contato\">Contato</a></li> </ul> </nav> <main> <section id=\"home\"> <h2>Home</h2> <p>Esta \u00e9 a p\u00e1gina principal do nosso site.</p> </section> <section id=\"sobre\"> <h2>Sobre</h2> <p>Saiba mais sobre o prop\u00f3sito deste site.</p> </section> <section id=\"contato\"> <h2>Contato</h2> <p>Entre em contato conosco para mais informa\u00e7\u00f5es.</p> </section> </main> <footer> <p>&copy; 2024 Site Responsivo. Todos os direitos reservados.</p> </footer> </body> </html> Estilos CSS: /* Reset b\u00e1sico */ * { margin: 0; padding: 0; box-sizing: border-box; } /* Layout b\u00e1sico para mobile */ body { font-family: Arial, sans-serif; font-size: 16px; /* Unidades relativas, usando 'em' */ line-height: 1.6; padding: 10px; } header { text-align: center; background-color: #333; color: white; padding: 1em; } nav ul { list-style: none; padding: 0; text-align: center; background-color: #444; } nav ul li { display: inline; margin-right: 10px; } nav ul li a { color: white; text-decoration: none; padding: 10px; display: inline-block; } main { margin-top: 20px; } section { margin-bottom: 20px; } footer { text-align: center; padding: 10px; background-color: #333; color: white; } /* Media Queries para telas maiores */ @media (min-width: 600px) { body { font-size: 1.2em; /* Aumenta a fonte em telas maiores */ } nav ul li { margin-right: 20px; } main { max-width: 900px; margin: 0 auto; } } @media (min-width: 1024px) { body { font-size: 1.5em; /* Aumenta mais a fonte para grandes telas */ } header, footer { text-align: left; padding: 20px; } nav ul { text-align: left; } nav ul li { display: inline-block; } } Explica\u00e7\u00e3o: Unidades relativas : O uso de em e rem permite que o layout seja mais flex\u00edvel e responsivo. Por exemplo, a font-size: 1.2em significa que o tamanho da fonte ser\u00e1 1,2 vezes o tamanho da fonte padr\u00e3o do elemento pai. Media Queries : @media (min-width: 600px) : Altera o layout para telas com largura maior que 600px. Neste caso, o tamanho da fonte e o espa\u00e7amento s\u00e3o aumentados. @media (min-width: 1024px) : Para telas grandes, como desktops, a fonte e o layout s\u00e3o ajustados para dar uma melhor experi\u00eancia visual, com mais espa\u00e7amento e uma disposi\u00e7\u00e3o diferente. Como testar: Abra o c\u00f3digo no navegador e redimensione a janela para ver como o layout se adapta a diferentes larguras de tela. Imagem Responsiva Para adicionar uma imagem responsiva ao seu site, voc\u00ea pode usar a propriedade CSS max-width para garantir que a imagem se ajuste ao tamanho da tela, sem exceder a largura do container. Atualiza\u00e7\u00e3o no HTML: No c\u00f3digo HTML, voc\u00ea pode adicionar uma imagem dentro de uma se\u00e7\u00e3o, como no exemplo abaixo: <main> <section id=\"home\"> <h2>Home</h2> <p>Esta \u00e9 a p\u00e1gina principal do nosso site.</p> <img src=\"imagem-exemplo.jpg\" alt=\"Exemplo de imagem responsiva\"> </section> <section id=\"sobre\"> <h2>Sobre</h2> <p>Saiba mais sobre o prop\u00f3sito deste site.</p> </section> <section id=\"contato\"> <h2>Contato</h2> <p>Entre em contato conosco para mais informa\u00e7\u00f5es.</p> </section> </main> Atualiza\u00e7\u00e3o no CSS: No CSS, voc\u00ea pode usar max-width: 100% para que a imagem n\u00e3o ultrapasse a largura do container: img { max-width: 100%; height: auto; /* Mant\u00e9m a propor\u00e7\u00e3o da imagem */ display: block; /* Remove espa\u00e7os brancos ao redor da imagem */ margin: 20px auto; /* Centraliza a imagem e adiciona margem */ } Explica\u00e7\u00e3o: max-width: 100% : Garante que a imagem ocupe no m\u00e1ximo 100% da largura do container (por exemplo, a largura da se\u00e7\u00e3o ou da p\u00e1gina), mas nunca mais do que isso. Se a imagem for menor que o container, ela manter\u00e1 seu tamanho original. height: auto : Mant\u00e9m a propor\u00e7\u00e3o da imagem enquanto ela \u00e9 redimensionada. display: block : Remove o comportamento padr\u00e3o da imagem como um elemento inline e permite que margens funcionem corretamente para centraliz\u00e1-la. margin: 20px auto : Adiciona espa\u00e7o em volta da imagem e a centraliza horizontalmente ( auto no eixo horizontal). Testando: Quando voc\u00ea abrir o site no navegador, redimensione a janela para observar como a imagem se ajusta automaticamente, sem distor\u00e7\u00f5es, conforme o tamanho da tela muda. Fontes A melhor forma de declarar fontes em um site envolve combinar boas pr\u00e1ticas de legibilidade, flexibilidade e otimiza\u00e7\u00e3o de performance. Aqui est\u00e3o alguns pontos importantes e um exemplo pr\u00e1tico usando a fonte padr\u00e3o do sistema , fontes alternativas, e uma fonte personalizada do Google Fonts. 1. Usar Fontes Seguras para a Web (Web Safe Fonts) : Definir uma pilha de fontes que inclua fontes padr\u00e3o, como Arial , Verdana , Times New Roman , entre outras, garante que o texto seja exibido mesmo se a fonte personalizada n\u00e3o for carregada. Exemplo: css font-family: \"Arial\", \"Helvetica\", sans-serif; 2. Fonte Personalizada com Google Fonts : Google Fonts \u00e9 uma op\u00e7\u00e3o amplamente usada e gratuita para incluir fontes personalizadas. Usar fontes personalizadas melhora a est\u00e9tica do site, mas tamb\u00e9m deve-se garantir o uso de fontes alternativas, caso a personalizada n\u00e3o carregue. Exemplo de importa\u00e7\u00e3o de uma fonte do Google: html <link href=\"https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&display=swap\" rel=\"stylesheet\"> 3. Pilha de Fontes com Fontes Gen\u00e9ricas : Sempre \u00e9 importante fornecer fontes de fallback (alternativas) no caso de a fonte principal n\u00e3o estar dispon\u00edvel. Isso ajuda a manter a consist\u00eancia e a acessibilidade do design. Exemplo com uma pilha de fontes: css body { font-family: \"Roboto\", \"Arial\", sans-serif; } Aqui, se a fonte Roboto n\u00e3o for carregada, o navegador utilizar\u00e1 Arial . Se nenhuma estiver dispon\u00edvel, ele usar\u00e1 qualquer fonte sans-serif dispon\u00edvel no sistema do usu\u00e1rio. 4. Uso de Fontes Padr\u00e3o do Sistema : As fontes padr\u00e3o de sistema, como -apple-system no macOS e iOS, Segoe UI no Windows, s\u00e3o r\u00e1pidas de carregar, garantindo que o site tenha uma boa performance. Exemplo: css body { font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif; } 5. Declarar Fontes com Diferentes Pesos e Estilos : Quando voc\u00ea importa uma fonte de servi\u00e7os como Google Fonts, \u00e9 poss\u00edvel especificar diferentes pesos e estilos. Isso garante flexibilidade no design, como o uso de negrito ou it\u00e1lico. Exemplo de importa\u00e7\u00e3o: html <link href=\"https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500;700&display=swap\" rel=\"stylesheet\"> Aqui, s\u00e3o carregados os pesos 300 , 400 , 500 , e 700 da fonte Roboto . 6. Melhorar Performance com font-display: swap : O atributo display=swap ao importar fontes personalizadas no Google Fonts instrui o navegador a usar uma fonte de fallback at\u00e9 que a fonte personalizada seja carregada, evitando que o texto fique invis\u00edvel enquanto a fonte carrega. Exemplo: html <link href=\"https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&display=swap\" rel=\"stylesheet\"> Exemplo Completo: Aqui est\u00e1 um exemplo de como configurar uma pilha de fontes de maneira eficiente: <!DOCTYPE html> <html lang=\"pt-br\"> <head> <meta charset=\"UTF-8\"> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"> <title>Exemplo de Fontes</title> <link href=\"https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&display=swap\" rel=\"stylesheet\"> <style> body { font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif; font-size: 1rem; line-height: 1.5; margin: 20px; } h1 { font-weight: 700; /* Negrito */ } p { font-weight: 400; /* Normal */ } </style> </head> <body> <h1>Exemplo de uso de fontes</h1> <p>Este \u00e9 um exemplo de como declarar fontes de forma eficiente e responsiva para garantir a melhor performance e legibilidade.</p> </body> </html> Resumo das Melhores Pr\u00e1ticas: Use fontes padr\u00e3o do sistema para melhorar a performance. Inclua uma pilha de fontes com alternativas em caso de falha no carregamento. Use Google Fonts ou outra fonte personalizada com font-display: swap para melhorar a experi\u00eancia de carregamento. Adicione diferentes pesos de fonte, mas somente os necess\u00e1rios, para evitar sobrecarga de downloads.","title":"Responsividade"},{"location":"_Css/siteresponsivo/#responsividade","text":"Para criar um site responsivo utilizando media queries e unidades de dimensionamento relativas , voc\u00ea pode seguir este exemplo b\u00e1sico:","title":"Responsividade"},{"location":"_Css/siteresponsivo/#estrutura-do-html","text":"<!DOCTYPE html> <html lang=\"pt-br\"> <head> <meta charset=\"UTF-8\"> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"> <title>Site Responsivo</title> <link rel=\"stylesheet\" href=\"style.css\"> </head> <body> <header> <h1>Bem-vindo ao site responsivo</h1> </header> <nav> <ul> <li><a href=\"#home\">Home</a></li> <li><a href=\"#sobre\">Sobre</a></li> <li><a href=\"#contato\">Contato</a></li> </ul> </nav> <main> <section id=\"home\"> <h2>Home</h2> <p>Esta \u00e9 a p\u00e1gina principal do nosso site.</p> </section> <section id=\"sobre\"> <h2>Sobre</h2> <p>Saiba mais sobre o prop\u00f3sito deste site.</p> </section> <section id=\"contato\"> <h2>Contato</h2> <p>Entre em contato conosco para mais informa\u00e7\u00f5es.</p> </section> </main> <footer> <p>&copy; 2024 Site Responsivo. Todos os direitos reservados.</p> </footer> </body> </html>","title":"Estrutura do HTML:"},{"location":"_Css/siteresponsivo/#estilos-css","text":"/* Reset b\u00e1sico */ * { margin: 0; padding: 0; box-sizing: border-box; } /* Layout b\u00e1sico para mobile */ body { font-family: Arial, sans-serif; font-size: 16px; /* Unidades relativas, usando 'em' */ line-height: 1.6; padding: 10px; } header { text-align: center; background-color: #333; color: white; padding: 1em; } nav ul { list-style: none; padding: 0; text-align: center; background-color: #444; } nav ul li { display: inline; margin-right: 10px; } nav ul li a { color: white; text-decoration: none; padding: 10px; display: inline-block; } main { margin-top: 20px; } section { margin-bottom: 20px; } footer { text-align: center; padding: 10px; background-color: #333; color: white; } /* Media Queries para telas maiores */ @media (min-width: 600px) { body { font-size: 1.2em; /* Aumenta a fonte em telas maiores */ } nav ul li { margin-right: 20px; } main { max-width: 900px; margin: 0 auto; } } @media (min-width: 1024px) { body { font-size: 1.5em; /* Aumenta mais a fonte para grandes telas */ } header, footer { text-align: left; padding: 20px; } nav ul { text-align: left; } nav ul li { display: inline-block; } }","title":"Estilos CSS:"},{"location":"_Css/siteresponsivo/#explicacao","text":"Unidades relativas : O uso de em e rem permite que o layout seja mais flex\u00edvel e responsivo. Por exemplo, a font-size: 1.2em significa que o tamanho da fonte ser\u00e1 1,2 vezes o tamanho da fonte padr\u00e3o do elemento pai. Media Queries : @media (min-width: 600px) : Altera o layout para telas com largura maior que 600px. Neste caso, o tamanho da fonte e o espa\u00e7amento s\u00e3o aumentados. @media (min-width: 1024px) : Para telas grandes, como desktops, a fonte e o layout s\u00e3o ajustados para dar uma melhor experi\u00eancia visual, com mais espa\u00e7amento e uma disposi\u00e7\u00e3o diferente.","title":"Explica\u00e7\u00e3o:"},{"location":"_Css/siteresponsivo/#como-testar","text":"Abra o c\u00f3digo no navegador e redimensione a janela para ver como o layout se adapta a diferentes larguras de tela.","title":"Como testar:"},{"location":"_Css/siteresponsivo/#imagem-responsiva","text":"Para adicionar uma imagem responsiva ao seu site, voc\u00ea pode usar a propriedade CSS max-width para garantir que a imagem se ajuste ao tamanho da tela, sem exceder a largura do container.","title":"Imagem Responsiva"},{"location":"_Css/siteresponsivo/#atualizacao-no-html","text":"No c\u00f3digo HTML, voc\u00ea pode adicionar uma imagem dentro de uma se\u00e7\u00e3o, como no exemplo abaixo: <main> <section id=\"home\"> <h2>Home</h2> <p>Esta \u00e9 a p\u00e1gina principal do nosso site.</p> <img src=\"imagem-exemplo.jpg\" alt=\"Exemplo de imagem responsiva\"> </section> <section id=\"sobre\"> <h2>Sobre</h2> <p>Saiba mais sobre o prop\u00f3sito deste site.</p> </section> <section id=\"contato\"> <h2>Contato</h2> <p>Entre em contato conosco para mais informa\u00e7\u00f5es.</p> </section> </main>","title":"Atualiza\u00e7\u00e3o no HTML:"},{"location":"_Css/siteresponsivo/#atualizacao-no-css","text":"No CSS, voc\u00ea pode usar max-width: 100% para que a imagem n\u00e3o ultrapasse a largura do container: img { max-width: 100%; height: auto; /* Mant\u00e9m a propor\u00e7\u00e3o da imagem */ display: block; /* Remove espa\u00e7os brancos ao redor da imagem */ margin: 20px auto; /* Centraliza a imagem e adiciona margem */ }","title":"Atualiza\u00e7\u00e3o no CSS:"},{"location":"_Css/siteresponsivo/#explicacao_1","text":"max-width: 100% : Garante que a imagem ocupe no m\u00e1ximo 100% da largura do container (por exemplo, a largura da se\u00e7\u00e3o ou da p\u00e1gina), mas nunca mais do que isso. Se a imagem for menor que o container, ela manter\u00e1 seu tamanho original. height: auto : Mant\u00e9m a propor\u00e7\u00e3o da imagem enquanto ela \u00e9 redimensionada. display: block : Remove o comportamento padr\u00e3o da imagem como um elemento inline e permite que margens funcionem corretamente para centraliz\u00e1-la. margin: 20px auto : Adiciona espa\u00e7o em volta da imagem e a centraliza horizontalmente ( auto no eixo horizontal).","title":"Explica\u00e7\u00e3o:"},{"location":"_Css/siteresponsivo/#testando","text":"Quando voc\u00ea abrir o site no navegador, redimensione a janela para observar como a imagem se ajusta automaticamente, sem distor\u00e7\u00f5es, conforme o tamanho da tela muda.","title":"Testando:"},{"location":"_Css/siteresponsivo/#fontes","text":"A melhor forma de declarar fontes em um site envolve combinar boas pr\u00e1ticas de legibilidade, flexibilidade e otimiza\u00e7\u00e3o de performance. Aqui est\u00e3o alguns pontos importantes e um exemplo pr\u00e1tico usando a fonte padr\u00e3o do sistema , fontes alternativas, e uma fonte personalizada do Google Fonts.","title":"Fontes"},{"location":"_Css/siteresponsivo/#1-usar-fontes-seguras-para-a-web-web-safe-fonts","text":"Definir uma pilha de fontes que inclua fontes padr\u00e3o, como Arial , Verdana , Times New Roman , entre outras, garante que o texto seja exibido mesmo se a fonte personalizada n\u00e3o for carregada. Exemplo: css font-family: \"Arial\", \"Helvetica\", sans-serif;","title":"1. Usar Fontes Seguras para a Web (Web Safe Fonts):"},{"location":"_Css/siteresponsivo/#2-fonte-personalizada-com-google-fonts","text":"Google Fonts \u00e9 uma op\u00e7\u00e3o amplamente usada e gratuita para incluir fontes personalizadas. Usar fontes personalizadas melhora a est\u00e9tica do site, mas tamb\u00e9m deve-se garantir o uso de fontes alternativas, caso a personalizada n\u00e3o carregue. Exemplo de importa\u00e7\u00e3o de uma fonte do Google: html <link href=\"https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&display=swap\" rel=\"stylesheet\">","title":"2. Fonte Personalizada com Google Fonts:"},{"location":"_Css/siteresponsivo/#3-pilha-de-fontes-com-fontes-genericas","text":"Sempre \u00e9 importante fornecer fontes de fallback (alternativas) no caso de a fonte principal n\u00e3o estar dispon\u00edvel. Isso ajuda a manter a consist\u00eancia e a acessibilidade do design. Exemplo com uma pilha de fontes: css body { font-family: \"Roboto\", \"Arial\", sans-serif; } Aqui, se a fonte Roboto n\u00e3o for carregada, o navegador utilizar\u00e1 Arial . Se nenhuma estiver dispon\u00edvel, ele usar\u00e1 qualquer fonte sans-serif dispon\u00edvel no sistema do usu\u00e1rio.","title":"3. Pilha de Fontes com Fontes Gen\u00e9ricas:"},{"location":"_Css/siteresponsivo/#4-uso-de-fontes-padrao-do-sistema","text":"As fontes padr\u00e3o de sistema, como -apple-system no macOS e iOS, Segoe UI no Windows, s\u00e3o r\u00e1pidas de carregar, garantindo que o site tenha uma boa performance. Exemplo: css body { font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif; }","title":"4. Uso de Fontes Padr\u00e3o do Sistema:"},{"location":"_Css/siteresponsivo/#5-declarar-fontes-com-diferentes-pesos-e-estilos","text":"Quando voc\u00ea importa uma fonte de servi\u00e7os como Google Fonts, \u00e9 poss\u00edvel especificar diferentes pesos e estilos. Isso garante flexibilidade no design, como o uso de negrito ou it\u00e1lico. Exemplo de importa\u00e7\u00e3o: html <link href=\"https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500;700&display=swap\" rel=\"stylesheet\"> Aqui, s\u00e3o carregados os pesos 300 , 400 , 500 , e 700 da fonte Roboto .","title":"5. Declarar Fontes com Diferentes Pesos e Estilos:"},{"location":"_Css/siteresponsivo/#6-melhorar-performance-com-font-display-swap","text":"O atributo display=swap ao importar fontes personalizadas no Google Fonts instrui o navegador a usar uma fonte de fallback at\u00e9 que a fonte personalizada seja carregada, evitando que o texto fique invis\u00edvel enquanto a fonte carrega. Exemplo: html <link href=\"https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&display=swap\" rel=\"stylesheet\">","title":"6. Melhorar Performance com font-display: swap:"},{"location":"_Css/siteresponsivo/#exemplo-completo","text":"Aqui est\u00e1 um exemplo de como configurar uma pilha de fontes de maneira eficiente: <!DOCTYPE html> <html lang=\"pt-br\"> <head> <meta charset=\"UTF-8\"> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"> <title>Exemplo de Fontes</title> <link href=\"https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&display=swap\" rel=\"stylesheet\"> <style> body { font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif; font-size: 1rem; line-height: 1.5; margin: 20px; } h1 { font-weight: 700; /* Negrito */ } p { font-weight: 400; /* Normal */ } </style> </head> <body> <h1>Exemplo de uso de fontes</h1> <p>Este \u00e9 um exemplo de como declarar fontes de forma eficiente e responsiva para garantir a melhor performance e legibilidade.</p> </body> </html>","title":"Exemplo Completo:"},{"location":"_Css/siteresponsivo/#resumo-das-melhores-praticas","text":"Use fontes padr\u00e3o do sistema para melhorar a performance. Inclua uma pilha de fontes com alternativas em caso de falha no carregamento. Use Google Fonts ou outra fonte personalizada com font-display: swap para melhorar a experi\u00eancia de carregamento. Adicione diferentes pesos de fonte, mas somente os necess\u00e1rios, para evitar sobrecarga de downloads.","title":"Resumo das Melhores Pr\u00e1ticas:"},{"location":"_Css/unidadesrelativas/","text":"Unidades Relativas As unidades relativas s\u00e3o essenciais no design responsivo, pois se adaptam a diferentes tamanhos de tela, oferecendo flexibilidade e escalabilidade no layout. Vamos explorar as principais unidades relativas utilizadas no CSS: 1. em (relativo ao tamanho da fonte) A unidade em \u00e9 relativa ao tamanho da fonte do elemento pai. Se o tamanho da fonte do elemento pai for 16px , por exemplo, 1em ser\u00e1 equivalente a 16px . Exemplo: body { font-size: 16px; } h1 { font-size: 2em; /* 32px */ } p { font-size: 1em; /* 16px */ } 2. rem (relativo ao tamanho da fonte raiz) A unidade rem \u00e9 relativa ao tamanho da fonte da raiz do documento, geralmente o elemento html . \u00c9 \u00fatil para manter a consist\u00eancia no design, pois sempre se refere ao tamanho de fonte definido no html . Exemplo: html { font-size: 16px; /* 1rem = 16px */ } h1 { font-size: 2rem; /* 32px */ } p { font-size: 1rem; /* 16px */ } 3. % (porcentagem) As porcentagens s\u00e3o usadas para definir tamanhos relativos ao elemento pai. Elas podem ser aplicadas a margens, larguras, alturas, etc. Exemplo: div { width: 50%; /* 50% da largura do elemento pai */ height: 100%; /* 100% da altura do elemento pai */ } 4. vh e vw (viewport height e viewport width) As unidades vh e vw s\u00e3o relativas \u00e0 altura e largura da viewport (janela vis\u00edvel). 1vh equivale a 1% da altura da viewport, e 1vw equivale a 1% da largura da viewport. Exemplo: section { width: 100vw; /* 100% da largura da viewport */ height: 50vh; /* 50% da altura da viewport */ } 5. min-width , max-width , min-height , max-height Essas propriedades controlam o tamanho m\u00ednimo e m\u00e1ximo dos elementos, tornando-os mais responsivos em diferentes telas. Exemplo: div { max-width: 100%; /* N\u00e3o excede 100% da largura da tela */ min-height: 300px; /* Altura m\u00ednima de 300px */ } Exemplo Pr\u00e1tico de Site Responsivo Aqui est\u00e1 um exemplo pr\u00e1tico aplicando algumas dessas unidades para criar um site responsivo: <!DOCTYPE html> <html lang=\"pt-BR\"> <head> <meta charset=\"UTF-8\"> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"> <title>Exemplo Responsivo</title> </head> <body> <header> <h1>Site Responsivo</h1> </header> <div class=\"container\"> <div class=\"box\"> <p>Esta \u00e9 uma caixa que usa unidades relativas para se adaptar a diferentes tamanhos de tela.</p> </div> <div class=\"box\"> <p>A largura da p\u00e1gina est\u00e1 definida em porcentagens, e o espa\u00e7amento em `rem` e `em`.</p> </div> </div> <footer> <p>Rodap\u00e9 do site</p> </footer> </body> </html> body { font-size: 16px; margin: 0; padding: 0; } header { background-color: #333; color: white; text-align: center; padding: 2rem; } .container { width: 90%; max-width: 1200px; margin: 0 auto; padding: 1rem; } .box { background-color: #f4f4f4; margin: 1rem 0; padding: 2em; border-radius: 5px; } footer { background-color: #333; color: white; text-align: center; padding: 1rem; position: relative; bottom: 0; width: 100vw; } Considera\u00e7\u00f5es Finais Ao combinar essas unidades relativas, voc\u00ea pode criar layouts que se adaptam a diferentes tamanhos de tela, tornando seu site mais responsivo e acess\u00edvel em dispositivos m\u00f3veis. \u00c9 importante testar os tamanhos e espa\u00e7amentos em v\u00e1rias resolu\u00e7\u00f5es para garantir uma boa experi\u00eancia de usu\u00e1rio.","title":"Unidades Relativas"},{"location":"_Css/unidadesrelativas/#unidades-relativas","text":"As unidades relativas s\u00e3o essenciais no design responsivo, pois se adaptam a diferentes tamanhos de tela, oferecendo flexibilidade e escalabilidade no layout. Vamos explorar as principais unidades relativas utilizadas no CSS:","title":"Unidades Relativas"},{"location":"_Css/unidadesrelativas/#1-em-relativo-ao-tamanho-da-fonte","text":"A unidade em \u00e9 relativa ao tamanho da fonte do elemento pai. Se o tamanho da fonte do elemento pai for 16px , por exemplo, 1em ser\u00e1 equivalente a 16px . Exemplo: body { font-size: 16px; } h1 { font-size: 2em; /* 32px */ } p { font-size: 1em; /* 16px */ }","title":"1. em (relativo ao tamanho da fonte)"},{"location":"_Css/unidadesrelativas/#2-rem-relativo-ao-tamanho-da-fonte-raiz","text":"A unidade rem \u00e9 relativa ao tamanho da fonte da raiz do documento, geralmente o elemento html . \u00c9 \u00fatil para manter a consist\u00eancia no design, pois sempre se refere ao tamanho de fonte definido no html . Exemplo: html { font-size: 16px; /* 1rem = 16px */ } h1 { font-size: 2rem; /* 32px */ } p { font-size: 1rem; /* 16px */ }","title":"2. rem (relativo ao tamanho da fonte raiz)"},{"location":"_Css/unidadesrelativas/#3-porcentagem","text":"As porcentagens s\u00e3o usadas para definir tamanhos relativos ao elemento pai. Elas podem ser aplicadas a margens, larguras, alturas, etc. Exemplo: div { width: 50%; /* 50% da largura do elemento pai */ height: 100%; /* 100% da altura do elemento pai */ }","title":"3. % (porcentagem)"},{"location":"_Css/unidadesrelativas/#4-vh-e-vw-viewport-height-e-viewport-width","text":"As unidades vh e vw s\u00e3o relativas \u00e0 altura e largura da viewport (janela vis\u00edvel). 1vh equivale a 1% da altura da viewport, e 1vw equivale a 1% da largura da viewport. Exemplo: section { width: 100vw; /* 100% da largura da viewport */ height: 50vh; /* 50% da altura da viewport */ }","title":"4. vh e vw (viewport height e viewport width)"},{"location":"_Css/unidadesrelativas/#5-min-width-max-width-min-height-max-height","text":"Essas propriedades controlam o tamanho m\u00ednimo e m\u00e1ximo dos elementos, tornando-os mais responsivos em diferentes telas. Exemplo: div { max-width: 100%; /* N\u00e3o excede 100% da largura da tela */ min-height: 300px; /* Altura m\u00ednima de 300px */ }","title":"5. min-width, max-width, min-height, max-height"},{"location":"_Css/unidadesrelativas/#exemplo-pratico-de-site-responsivo","text":"Aqui est\u00e1 um exemplo pr\u00e1tico aplicando algumas dessas unidades para criar um site responsivo: <!DOCTYPE html> <html lang=\"pt-BR\"> <head> <meta charset=\"UTF-8\"> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"> <title>Exemplo Responsivo</title> </head> <body> <header> <h1>Site Responsivo</h1> </header> <div class=\"container\"> <div class=\"box\"> <p>Esta \u00e9 uma caixa que usa unidades relativas para se adaptar a diferentes tamanhos de tela.</p> </div> <div class=\"box\"> <p>A largura da p\u00e1gina est\u00e1 definida em porcentagens, e o espa\u00e7amento em `rem` e `em`.</p> </div> </div> <footer> <p>Rodap\u00e9 do site</p> </footer> </body> </html> body { font-size: 16px; margin: 0; padding: 0; } header { background-color: #333; color: white; text-align: center; padding: 2rem; } .container { width: 90%; max-width: 1200px; margin: 0 auto; padding: 1rem; } .box { background-color: #f4f4f4; margin: 1rem 0; padding: 2em; border-radius: 5px; } footer { background-color: #333; color: white; text-align: center; padding: 1rem; position: relative; bottom: 0; width: 100vw; }","title":"Exemplo Pr\u00e1tico de Site Responsivo"},{"location":"_Css/unidadesrelativas/#consideracoes-finais","text":"Ao combinar essas unidades relativas, voc\u00ea pode criar layouts que se adaptam a diferentes tamanhos de tela, tornando seu site mais responsivo e acess\u00edvel em dispositivos m\u00f3veis. \u00c9 importante testar os tamanhos e espa\u00e7amentos em v\u00e1rias resolu\u00e7\u00f5es para garantir uma boa experi\u00eancia de usu\u00e1rio.","title":"Considera\u00e7\u00f5es Finais"},{"location":"_Html/blocos/","text":"Blocos HTML b\u00e1sicos: <span> , <div> , class e id . Objetivo Ensinar como usar os elementos <span> e <div> para estruturar conte\u00fado em HTML e como aplicar estilos e manipula\u00e7\u00f5es com os atributos class e id . 1. Introdu\u00e7\u00e3o aos Blocos HTML <div> : Um elemento de bloco usado para agrupar outros elementos. Ele ocupa toda a largura dispon\u00edvel. <span> : Um elemento em linha usado para estilizar ou manipular partes espec\u00edficas de texto ou conte\u00fado. 2. Diferen\u00e7a entre <div> e <span> Elemento Descri\u00e7\u00e3o Exemplo de Uso <div> Elemento de bloco. Usado para agrupar se\u00e7\u00f5es maiores de conte\u00fado. Agrupar par\u00e1grafos, imagens, etc. <span> Elemento em linha. Usado para estilizar ou manipular partes espec\u00edficas de texto. Destacar palavras ou frases. 3. Exemplo Pr\u00e1tico <!DOCTYPE html> <html lang=\"pt-br\"> <head> <meta charset=\"UTF-8\"> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"> <title>Blocos HTML</title> <style> .highlight { color: red; font-weight: bold; } #section { background-color: #f0f0f0; padding: 10px; border: 1px solid #ccc; } </style> </head> <body> <h1>Exemplo de Blocos HTML</h1> <!-- Uso de <div> --> <div id=\"section\"> <h2>Se\u00e7\u00e3o de Conte\u00fado</h2> <p>Este \u00e9 um exemplo de uso do elemento <strong>div</strong> para agrupar conte\u00fado.</p> <p>Voc\u00ea pode adicionar v\u00e1rios elementos dentro de um <code>div</code>.</p> </div> <!-- Uso de <span> --> <p>Este \u00e9 um exemplo de uso do elemento <span class=\"highlight\">span</span> para destacar partes espec\u00edficas do texto.</p> </body> </html> 4. Trabalhando com class e id class : Usado para aplicar estilos ou manipula\u00e7\u00f5es a m\u00faltiplos elementos. id : Usado para identificar um elemento \u00fanico na p\u00e1gina. Exemplo de Uso <div class=\"box\">Caixa 1</div> <div class=\"box\">Caixa 2</div> <div id=\"uniqueBox\">Caixa \u00danica</div> <style> .box { width: 100px; height: 100px; background-color: lightblue; margin: 10px; display: inline-block; } #uniqueBox { background-color: orange; } </style> 5. Diferen\u00e7a entre class e id Atributo Descri\u00e7\u00e3o Exemplo class Pode ser usado em m\u00faltiplos elementos. .box { ... } id Deve ser \u00fanico na p\u00e1gina. #uniqueBox { ... } Conclus\u00e3o Use <div> para agrupar elementos e estruturar o layout. Use <span> para estilizar ou manipular partes espec\u00edficas de texto. Utilize class para aplicar estilos a m\u00faltiplos elementos e id para identificar elementos \u00fanicos. Combine HTML, CSS e JavaScript para criar p\u00e1ginas interativas e bem estruturadas.","title":"Blocos HTML b\u00e1sicos: &lt;span&gt;, &lt;div&gt;, class e id."},{"location":"_Html/blocos/#blocos-html-basicos-span-div-class-e-id","text":"","title":"Blocos HTML b\u00e1sicos: &lt;span&gt;, &lt;div&gt;, class e id."},{"location":"_Html/blocos/#objetivo","text":"Ensinar como usar os elementos <span> e <div> para estruturar conte\u00fado em HTML e como aplicar estilos e manipula\u00e7\u00f5es com os atributos class e id .","title":"Objetivo"},{"location":"_Html/blocos/#1-introducao-aos-blocos-html","text":"<div> : Um elemento de bloco usado para agrupar outros elementos. Ele ocupa toda a largura dispon\u00edvel. <span> : Um elemento em linha usado para estilizar ou manipular partes espec\u00edficas de texto ou conte\u00fado.","title":"1. Introdu\u00e7\u00e3o aos Blocos HTML"},{"location":"_Html/blocos/#2-diferenca-entre-div-e-span","text":"Elemento Descri\u00e7\u00e3o Exemplo de Uso <div> Elemento de bloco. Usado para agrupar se\u00e7\u00f5es maiores de conte\u00fado. Agrupar par\u00e1grafos, imagens, etc. <span> Elemento em linha. Usado para estilizar ou manipular partes espec\u00edficas de texto. Destacar palavras ou frases.","title":"2. Diferen\u00e7a entre &lt;div&gt; e &lt;span&gt;"},{"location":"_Html/blocos/#3-exemplo-pratico","text":"<!DOCTYPE html> <html lang=\"pt-br\"> <head> <meta charset=\"UTF-8\"> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"> <title>Blocos HTML</title> <style> .highlight { color: red; font-weight: bold; } #section { background-color: #f0f0f0; padding: 10px; border: 1px solid #ccc; } </style> </head> <body> <h1>Exemplo de Blocos HTML</h1> <!-- Uso de <div> --> <div id=\"section\"> <h2>Se\u00e7\u00e3o de Conte\u00fado</h2> <p>Este \u00e9 um exemplo de uso do elemento <strong>div</strong> para agrupar conte\u00fado.</p> <p>Voc\u00ea pode adicionar v\u00e1rios elementos dentro de um <code>div</code>.</p> </div> <!-- Uso de <span> --> <p>Este \u00e9 um exemplo de uso do elemento <span class=\"highlight\">span</span> para destacar partes espec\u00edficas do texto.</p> </body> </html>","title":"3. Exemplo Pr\u00e1tico"},{"location":"_Html/blocos/#4-trabalhando-com-class-e-id","text":"class : Usado para aplicar estilos ou manipula\u00e7\u00f5es a m\u00faltiplos elementos. id : Usado para identificar um elemento \u00fanico na p\u00e1gina.","title":"4. Trabalhando com class e id"},{"location":"_Html/blocos/#exemplo-de-uso","text":"<div class=\"box\">Caixa 1</div> <div class=\"box\">Caixa 2</div> <div id=\"uniqueBox\">Caixa \u00danica</div> <style> .box { width: 100px; height: 100px; background-color: lightblue; margin: 10px; display: inline-block; } #uniqueBox { background-color: orange; } </style>","title":"Exemplo de Uso"},{"location":"_Html/blocos/#5-diferenca-entre-class-e-id","text":"Atributo Descri\u00e7\u00e3o Exemplo class Pode ser usado em m\u00faltiplos elementos. .box { ... } id Deve ser \u00fanico na p\u00e1gina. #uniqueBox { ... }","title":"5. Diferen\u00e7a entre class e id"},{"location":"_Html/blocos/#conclusao","text":"Use <div> para agrupar elementos e estruturar o layout. Use <span> para estilizar ou manipular partes espec\u00edficas de texto. Utilize class para aplicar estilos a m\u00faltiplos elementos e id para identificar elementos \u00fanicos. Combine HTML, CSS e JavaScript para criar p\u00e1ginas interativas e bem estruturadas.","title":"Conclus\u00e3o"},{"location":"_Html/forms/","text":"Introdu\u00e7\u00e3o e Uso Incremental de Formul\u00e1rios HTML** Objetivo Ensinar os conceitos fundamentais de formul\u00e1rios HTML, desde os elementos b\u00e1sicos at\u00e9 funcionalidades mais avan\u00e7adas, como valida\u00e7\u00e3o e integra\u00e7\u00e3o com JavaScript. Etapa 1: Introdu\u00e7\u00e3o aos Formul\u00e1rios HTML T\u00f3picos: O que \u00e9 um formul\u00e1rio HTML e sua finalidade. Estrutura b\u00e1sica de um formul\u00e1rio. Exemplo de C\u00f3digo: <!DOCTYPE html> <html lang=\"pt-br\"> <head> <meta charset=\"UTF-8\"> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"> <title>Formul\u00e1rio B\u00e1sico</title> </head> <body> <h1>Formul\u00e1rio B\u00e1sico</h1> <form action=\"/submit\" method=\"post\"> <label for=\"nome\">Nome:</label> <input type=\"text\" id=\"nome\" name=\"nome\"> <button type=\"submit\">Enviar</button> </form> </body> </html> Etapa 2: Adicionando Mais Campos T\u00f3picos: Tipos de entrada ( text , email , password , number , etc.). Uso de label para acessibilidade. Exemplo de C\u00f3digo: <form action=\"/submit\" method=\"post\"> <label for=\"email\">E-mail:</label> <input type=\"email\" id=\"email\" name=\"email\" required> <label for=\"senha\">Senha:</label> <input type=\"password\" id=\"senha\" name=\"senha\" required> <label for=\"idade\">Idade:</label> <input type=\"number\" id=\"idade\" name=\"idade\" min=\"1\" max=\"120\"> <button type=\"submit\">Enviar</button> </form> Etapa 3: Agrupando Campos com <fieldset> T\u00f3picos: Uso de <fieldset> e <legend> para organizar campos. Exemplo de C\u00f3digo: <form action=\"/submit\" method=\"post\"> <fieldset> <legend>Informa\u00e7\u00f5es Pessoais</legend> <label for=\"nome\">Nome:</label> <input type=\"text\" id=\"nome\" name=\"nome\"> <label for=\"email\">E-mail:</label> <input type=\"email\" id=\"email\" name=\"email\"> </fieldset> <button type=\"submit\">Enviar</button> </form> Etapa 4: Adicionando Bot\u00f5es e Seletores T\u00f3picos: Bot\u00f5es de r\u00e1dio ( radio ), caixas de sele\u00e7\u00e3o ( checkbox ) e menus suspensos ( select ). Exemplo de C\u00f3digo: <form action=\"/submit\" method=\"post\"> <label>G\u00eanero:</label> <input type=\"radio\" id=\"masculino\" name=\"genero\" value=\"masculino\"> <label for=\"masculino\">Masculino</label> <input type=\"radio\" id=\"feminino\" name=\"genero\" value=\"feminino\"> <label for=\"feminino\">Feminino</label> <label for=\"interesses\">Interesses:</label> <input type=\"checkbox\" id=\"esportes\" name=\"interesses\" value=\"esportes\"> <label for=\"esportes\">Esportes</label> <input type=\"checkbox\" id=\"musica\" name=\"interesses\" value=\"musica\"> <label for=\"musica\">M\u00fasica</label> <label for=\"pais\">Pa\u00eds:</label> <select id=\"pais\" name=\"pais\"> <option value=\"brasil\">Brasil</option> <option value=\"eua\">EUA</option> <option value=\"japao\">Jap\u00e3o</option> </select> <button type=\"submit\">Enviar</button> </form> Etapa 5: Valida\u00e7\u00e3o de Formul\u00e1rios T\u00f3picos: Atributos de valida\u00e7\u00e3o ( required , pattern , min , max , etc.). Mensagens de erro padr\u00e3o do navegador. Exemplo de C\u00f3digo: <form action=\"/submit\" method=\"post\"> <label for=\"telefone\">Telefone:</label> <input type=\"tel\" id=\"telefone\" name=\"telefone\" pattern=\"[0-9]{2}-[0-9]{4}-[0-9]{4}\" required> <small>Formato: 99-9999-9999</small> <button type=\"submit\">Enviar</button> </form> Etapa 6: Integra\u00e7\u00e3o com JavaScript T\u00f3picos: Manipula\u00e7\u00e3o de eventos ( onsubmit , onchange , etc.). Valida\u00e7\u00e3o personalizada com JavaScript. Exemplo de C\u00f3digo: <form id=\"meuFormulario\"> <label for=\"nome\">Nome:</label> <input type=\"text\" id=\"nome\" name=\"nome\" required> <button type=\"submit\">Enviar</button> </form> <script> document.getElementById('meuFormulario').addEventListener('submit', function(event) { const nome = document.getElementById('nome').value; if (nome.length < 3) { alert('O nome deve ter pelo menos 3 caracteres.'); event.preventDefault(); } }); </script> Etapa 7: Estilizando o Formul\u00e1rio com CSS T\u00f3picos: Aplica\u00e7\u00e3o de estilos b\u00e1sicos para melhorar a apar\u00eancia. Exemplo de C\u00f3digo: <style> form { max-width: 400px; margin: auto; padding: 1em; border: 1px solid #ccc; border-radius: 5px; } label { display: block; margin-bottom: 0.5em; } input, select, button { width: 100%; padding: 0.5em; margin-bottom: 1em; } </style> Conclus\u00e3o Ao final da aula, os alunos ter\u00e3o aprendido a criar formul\u00e1rios HTML funcionais, organizados e estilizados, al\u00e9m de validar dados e integrar com JavaScript para maior interatividade. Melhores pr\u00e1ticas e usabilidade 1. Acessibilidade Adicione o atributo aria-label ou aria-describedby para melhorar a acessibilidade. Certifique-se de que todos os campos tenham um label associado. Exemplo de melhoria: <label for=\"nome\">Nome:</label> <input type=\"text\" id=\"nome\" name=\"nome\" aria-label=\"Digite seu nome completo\"> 2. Mensagens de Ajuda Use elementos como <small> ou placeholder para fornecer dicas sobre o preenchimento dos campos. Exemplo: <label for=\"email\">E-mail:</label> <input type=\"email\" id=\"email\" name=\"email\" placeholder=\"exemplo@dominio.com\"> <small>Digite um e-mail v\u00e1lido.</small> 3. Valida\u00e7\u00e3o do Lado do Cliente Utilize atributos como required , pattern , min , max , e maxlength para valida\u00e7\u00e3o b\u00e1sica. Adicione mensagens personalizadas com o atributo title . Exemplo: <input type=\"password\" id=\"senha\" name=\"senha\" required minlength=\"6\" title=\"A senha deve ter pelo menos 6 caracteres.\"> 4. Organiza\u00e7\u00e3o com <fieldset> Agrupe campos relacionados usando <fieldset> e <legend> para melhorar a organiza\u00e7\u00e3o. Exemplo: <fieldset> <legend>Informa\u00e7\u00f5es de Contato</legend> <label for=\"telefone\">Telefone:</label> <input type=\"tel\" id=\"telefone\" name=\"telefone\" pattern=\"[0-9]{2}-[0-9]{4}-[0-9]{4}\" required> <small>Formato: 99-9999-9999</small> </fieldset> 5. Bot\u00e3o de Reset Adicione um bot\u00e3o de reset para permitir que o usu\u00e1rio limpe o formul\u00e1rio. Exemplo: <button type=\"reset\">Limpar</button> 6. Feedback Visual Use estilos CSS para destacar campos obrigat\u00f3rios ou com erro. Exemplo de CSS: input:invalid { border-color: red; } input:valid { border-color: green; } 7. Evite Campos Desnecess\u00e1rios Certifique-se de que todos os campos s\u00e3o realmente necess\u00e1rios para evitar sobrecarregar o usu\u00e1rio. 8. Responsividade Garanta que o formul\u00e1rio seja responsivo para dispositivos m\u00f3veis. Exemplo de CSS: form { max-width: 100%; padding: 1em; box-sizing: border-box; } 9. Mensagens de Erro Personalizadas Use JavaScript para exibir mensagens de erro personalizadas. Exemplo: <script> document.querySelector('form').addEventListener('submit', function(event) { const telefone = document.getElementById('telefone'); if (!telefone.value.match(/[0-9]{2}-[0-9]{4}-[0-9]{4}/)) { alert('Por favor, insira o telefone no formato correto: 99-9999-9999'); event.preventDefault(); } }); </script> 10. Experi\u00eancia do Usu\u00e1rio Adicione um bot\u00e3o de envio desativado at\u00e9 que todos os campos obrigat\u00f3rios sejam preenchidos. Exemplo: <button type=\"submit\" id=\"submitButton\" disabled>Enviar</button> <script> const form = document.querySelector('form'); const submitButton = document.getElementById('submitButton'); form.addEventListener('input', () => { submitButton.disabled = !form.checkValidity(); }); </script> Aplica\u00e7\u00e3o no Arquivo Atual Aqui est\u00e1 uma vers\u00e3o melhorada do seu formul\u00e1rio com base nas pr\u00e1ticas acima: <form action=\"/submit\" method=\"post\"> <fieldset> <legend>Informa\u00e7\u00f5es Pessoais</legend> <label for=\"nome\">Nome:</label> <input type=\"text\" id=\"nome\" name=\"nome\" required aria-label=\"Digite seu nome completo\"> <label for=\"email\">E-mail:</label> <input type=\"email\" id=\"email\" name=\"email\" required placeholder=\"exemplo@dominio.com\"> </fieldset> <fieldset> <legend>Informa\u00e7\u00f5es Adicionais</legend> <label for=\"senha\">Senha:</label> <input type=\"password\" id=\"senha\" name=\"senha\" required minlength=\"6\" title=\"A senha deve ter pelo menos 6 caracteres.\"> <label for=\"idade\">Idade:</label> <input type=\"number\" id=\"idade\" name=\"idade\" min=\"1\" max=\"120\" required> <label>G\u00eanero:</label> <input type=\"radio\" id=\"masculino\" name=\"genero\" value=\"masculino\"> <label for=\"masculino\">Masculino</label> <input type=\"radio\" id=\"feminino\" name=\"genero\" value=\"feminino\"> <label for=\"feminino\">Feminino</label> </fieldset> <fieldset> <legend>Prefer\u00eancias</legend> <label for=\"interesses\">Interesses:</label> <input type=\"checkbox\" id=\"esportes\" name=\"interesses\" value=\"esportes\"> <label for=\"esportes\">Esportes</label> <input type=\"checkbox\" id=\"musica\" name=\"interesses\" value=\"musica\"> <label for=\"musica\">M\u00fasica</label> <label for=\"pais\">Pa\u00eds:</label> <select id=\"pais\" name=\"pais\" required> <option value=\"\">Selecione...</option> <option value=\"brasil\">Brasil</option> <option value=\"eua\">EUA</option> <option value=\"japao\">Jap\u00e3o</option> </select> </fieldset> <fieldset> <legend>Contato</legend> <label for=\"telefone\">Telefone:</label> <input type=\"tel\" id=\"telefone\" name=\"telefone\" pattern=\"[0-9]{2}-[0-9]{4}-[0-9]{4}\" required> <small>Formato: 99-9999-9999</small> </fieldset> <button type=\"submit\" id=\"submitButton\" disabled>Enviar</button> <button type=\"reset\">Limpar</button> </form> <script> const form = document.querySelector('form'); const submitButton = document.getElementById('submitButton'); form.addEventListener('input', () => { submitButton.disabled = !form.checkValidity(); }); </script> Essas melhorias tornam o formul\u00e1rio mais acess\u00edvel, funcional e amig\u00e1vel para o usu\u00e1rio.","title":"Introdu\u00e7\u00e3o e Uso Incremental de Formul\u00e1rios HTML**"},{"location":"_Html/forms/#introducao-e-uso-incremental-de-formularios-html","text":"","title":"Introdu\u00e7\u00e3o e Uso Incremental de Formul\u00e1rios HTML**"},{"location":"_Html/forms/#objetivo","text":"Ensinar os conceitos fundamentais de formul\u00e1rios HTML, desde os elementos b\u00e1sicos at\u00e9 funcionalidades mais avan\u00e7adas, como valida\u00e7\u00e3o e integra\u00e7\u00e3o com JavaScript.","title":"Objetivo"},{"location":"_Html/forms/#etapa-1-introducao-aos-formularios-html","text":"T\u00f3picos: O que \u00e9 um formul\u00e1rio HTML e sua finalidade. Estrutura b\u00e1sica de um formul\u00e1rio. Exemplo de C\u00f3digo: <!DOCTYPE html> <html lang=\"pt-br\"> <head> <meta charset=\"UTF-8\"> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"> <title>Formul\u00e1rio B\u00e1sico</title> </head> <body> <h1>Formul\u00e1rio B\u00e1sico</h1> <form action=\"/submit\" method=\"post\"> <label for=\"nome\">Nome:</label> <input type=\"text\" id=\"nome\" name=\"nome\"> <button type=\"submit\">Enviar</button> </form> </body> </html>","title":"Etapa 1: Introdu\u00e7\u00e3o aos Formul\u00e1rios HTML"},{"location":"_Html/forms/#etapa-2-adicionando-mais-campos","text":"T\u00f3picos: Tipos de entrada ( text , email , password , number , etc.). Uso de label para acessibilidade. Exemplo de C\u00f3digo: <form action=\"/submit\" method=\"post\"> <label for=\"email\">E-mail:</label> <input type=\"email\" id=\"email\" name=\"email\" required> <label for=\"senha\">Senha:</label> <input type=\"password\" id=\"senha\" name=\"senha\" required> <label for=\"idade\">Idade:</label> <input type=\"number\" id=\"idade\" name=\"idade\" min=\"1\" max=\"120\"> <button type=\"submit\">Enviar</button> </form>","title":"Etapa 2: Adicionando Mais Campos"},{"location":"_Html/forms/#etapa-3-agrupando-campos-com-fieldset","text":"T\u00f3picos: Uso de <fieldset> e <legend> para organizar campos. Exemplo de C\u00f3digo: <form action=\"/submit\" method=\"post\"> <fieldset> <legend>Informa\u00e7\u00f5es Pessoais</legend> <label for=\"nome\">Nome:</label> <input type=\"text\" id=\"nome\" name=\"nome\"> <label for=\"email\">E-mail:</label> <input type=\"email\" id=\"email\" name=\"email\"> </fieldset> <button type=\"submit\">Enviar</button> </form>","title":"Etapa 3: Agrupando Campos com &lt;fieldset&gt;"},{"location":"_Html/forms/#etapa-4-adicionando-botoes-e-seletores","text":"T\u00f3picos: Bot\u00f5es de r\u00e1dio ( radio ), caixas de sele\u00e7\u00e3o ( checkbox ) e menus suspensos ( select ). Exemplo de C\u00f3digo: <form action=\"/submit\" method=\"post\"> <label>G\u00eanero:</label> <input type=\"radio\" id=\"masculino\" name=\"genero\" value=\"masculino\"> <label for=\"masculino\">Masculino</label> <input type=\"radio\" id=\"feminino\" name=\"genero\" value=\"feminino\"> <label for=\"feminino\">Feminino</label> <label for=\"interesses\">Interesses:</label> <input type=\"checkbox\" id=\"esportes\" name=\"interesses\" value=\"esportes\"> <label for=\"esportes\">Esportes</label> <input type=\"checkbox\" id=\"musica\" name=\"interesses\" value=\"musica\"> <label for=\"musica\">M\u00fasica</label> <label for=\"pais\">Pa\u00eds:</label> <select id=\"pais\" name=\"pais\"> <option value=\"brasil\">Brasil</option> <option value=\"eua\">EUA</option> <option value=\"japao\">Jap\u00e3o</option> </select> <button type=\"submit\">Enviar</button> </form>","title":"Etapa 4: Adicionando Bot\u00f5es e Seletores"},{"location":"_Html/forms/#etapa-5-validacao-de-formularios","text":"T\u00f3picos: Atributos de valida\u00e7\u00e3o ( required , pattern , min , max , etc.). Mensagens de erro padr\u00e3o do navegador. Exemplo de C\u00f3digo: <form action=\"/submit\" method=\"post\"> <label for=\"telefone\">Telefone:</label> <input type=\"tel\" id=\"telefone\" name=\"telefone\" pattern=\"[0-9]{2}-[0-9]{4}-[0-9]{4}\" required> <small>Formato: 99-9999-9999</small> <button type=\"submit\">Enviar</button> </form>","title":"Etapa 5: Valida\u00e7\u00e3o de Formul\u00e1rios"},{"location":"_Html/forms/#etapa-6-integracao-com-javascript","text":"T\u00f3picos: Manipula\u00e7\u00e3o de eventos ( onsubmit , onchange , etc.). Valida\u00e7\u00e3o personalizada com JavaScript. Exemplo de C\u00f3digo: <form id=\"meuFormulario\"> <label for=\"nome\">Nome:</label> <input type=\"text\" id=\"nome\" name=\"nome\" required> <button type=\"submit\">Enviar</button> </form> <script> document.getElementById('meuFormulario').addEventListener('submit', function(event) { const nome = document.getElementById('nome').value; if (nome.length < 3) { alert('O nome deve ter pelo menos 3 caracteres.'); event.preventDefault(); } }); </script>","title":"Etapa 6: Integra\u00e7\u00e3o com JavaScript"},{"location":"_Html/forms/#etapa-7-estilizando-o-formulario-com-css","text":"T\u00f3picos: Aplica\u00e7\u00e3o de estilos b\u00e1sicos para melhorar a apar\u00eancia. Exemplo de C\u00f3digo: <style> form { max-width: 400px; margin: auto; padding: 1em; border: 1px solid #ccc; border-radius: 5px; } label { display: block; margin-bottom: 0.5em; } input, select, button { width: 100%; padding: 0.5em; margin-bottom: 1em; } </style>","title":"Etapa 7: Estilizando o Formul\u00e1rio com CSS"},{"location":"_Html/forms/#conclusao","text":"Ao final da aula, os alunos ter\u00e3o aprendido a criar formul\u00e1rios HTML funcionais, organizados e estilizados, al\u00e9m de validar dados e integrar com JavaScript para maior interatividade.","title":"Conclus\u00e3o"},{"location":"_Html/forms/#melhores-praticas-e-usabilidade","text":"","title":"Melhores pr\u00e1ticas e usabilidade"},{"location":"_Html/forms/#1-acessibilidade","text":"Adicione o atributo aria-label ou aria-describedby para melhorar a acessibilidade. Certifique-se de que todos os campos tenham um label associado. Exemplo de melhoria: <label for=\"nome\">Nome:</label> <input type=\"text\" id=\"nome\" name=\"nome\" aria-label=\"Digite seu nome completo\">","title":"1. Acessibilidade"},{"location":"_Html/forms/#2-mensagens-de-ajuda","text":"Use elementos como <small> ou placeholder para fornecer dicas sobre o preenchimento dos campos. Exemplo: <label for=\"email\">E-mail:</label> <input type=\"email\" id=\"email\" name=\"email\" placeholder=\"exemplo@dominio.com\"> <small>Digite um e-mail v\u00e1lido.</small>","title":"2. Mensagens de Ajuda"},{"location":"_Html/forms/#3-validacao-do-lado-do-cliente","text":"Utilize atributos como required , pattern , min , max , e maxlength para valida\u00e7\u00e3o b\u00e1sica. Adicione mensagens personalizadas com o atributo title . Exemplo: <input type=\"password\" id=\"senha\" name=\"senha\" required minlength=\"6\" title=\"A senha deve ter pelo menos 6 caracteres.\">","title":"3. Valida\u00e7\u00e3o do Lado do Cliente"},{"location":"_Html/forms/#4-organizacao-com-fieldset","text":"Agrupe campos relacionados usando <fieldset> e <legend> para melhorar a organiza\u00e7\u00e3o. Exemplo: <fieldset> <legend>Informa\u00e7\u00f5es de Contato</legend> <label for=\"telefone\">Telefone:</label> <input type=\"tel\" id=\"telefone\" name=\"telefone\" pattern=\"[0-9]{2}-[0-9]{4}-[0-9]{4}\" required> <small>Formato: 99-9999-9999</small> </fieldset>","title":"4. Organiza\u00e7\u00e3o com &lt;fieldset&gt;"},{"location":"_Html/forms/#5-botao-de-reset","text":"Adicione um bot\u00e3o de reset para permitir que o usu\u00e1rio limpe o formul\u00e1rio. Exemplo: <button type=\"reset\">Limpar</button>","title":"5. Bot\u00e3o de Reset"},{"location":"_Html/forms/#6-feedback-visual","text":"Use estilos CSS para destacar campos obrigat\u00f3rios ou com erro. Exemplo de CSS: input:invalid { border-color: red; } input:valid { border-color: green; }","title":"6. Feedback Visual"},{"location":"_Html/forms/#7-evite-campos-desnecessarios","text":"Certifique-se de que todos os campos s\u00e3o realmente necess\u00e1rios para evitar sobrecarregar o usu\u00e1rio.","title":"7. Evite Campos Desnecess\u00e1rios"},{"location":"_Html/forms/#8-responsividade","text":"Garanta que o formul\u00e1rio seja responsivo para dispositivos m\u00f3veis. Exemplo de CSS: form { max-width: 100%; padding: 1em; box-sizing: border-box; }","title":"8. Responsividade"},{"location":"_Html/forms/#9-mensagens-de-erro-personalizadas","text":"Use JavaScript para exibir mensagens de erro personalizadas. Exemplo: <script> document.querySelector('form').addEventListener('submit', function(event) { const telefone = document.getElementById('telefone'); if (!telefone.value.match(/[0-9]{2}-[0-9]{4}-[0-9]{4}/)) { alert('Por favor, insira o telefone no formato correto: 99-9999-9999'); event.preventDefault(); } }); </script>","title":"9. Mensagens de Erro Personalizadas"},{"location":"_Html/forms/#10-experiencia-do-usuario","text":"Adicione um bot\u00e3o de envio desativado at\u00e9 que todos os campos obrigat\u00f3rios sejam preenchidos. Exemplo: <button type=\"submit\" id=\"submitButton\" disabled>Enviar</button> <script> const form = document.querySelector('form'); const submitButton = document.getElementById('submitButton'); form.addEventListener('input', () => { submitButton.disabled = !form.checkValidity(); }); </script>","title":"10. Experi\u00eancia do Usu\u00e1rio"},{"location":"_Html/forms/#aplicacao-no-arquivo-atual","text":"Aqui est\u00e1 uma vers\u00e3o melhorada do seu formul\u00e1rio com base nas pr\u00e1ticas acima: <form action=\"/submit\" method=\"post\"> <fieldset> <legend>Informa\u00e7\u00f5es Pessoais</legend> <label for=\"nome\">Nome:</label> <input type=\"text\" id=\"nome\" name=\"nome\" required aria-label=\"Digite seu nome completo\"> <label for=\"email\">E-mail:</label> <input type=\"email\" id=\"email\" name=\"email\" required placeholder=\"exemplo@dominio.com\"> </fieldset> <fieldset> <legend>Informa\u00e7\u00f5es Adicionais</legend> <label for=\"senha\">Senha:</label> <input type=\"password\" id=\"senha\" name=\"senha\" required minlength=\"6\" title=\"A senha deve ter pelo menos 6 caracteres.\"> <label for=\"idade\">Idade:</label> <input type=\"number\" id=\"idade\" name=\"idade\" min=\"1\" max=\"120\" required> <label>G\u00eanero:</label> <input type=\"radio\" id=\"masculino\" name=\"genero\" value=\"masculino\"> <label for=\"masculino\">Masculino</label> <input type=\"radio\" id=\"feminino\" name=\"genero\" value=\"feminino\"> <label for=\"feminino\">Feminino</label> </fieldset> <fieldset> <legend>Prefer\u00eancias</legend> <label for=\"interesses\">Interesses:</label> <input type=\"checkbox\" id=\"esportes\" name=\"interesses\" value=\"esportes\"> <label for=\"esportes\">Esportes</label> <input type=\"checkbox\" id=\"musica\" name=\"interesses\" value=\"musica\"> <label for=\"musica\">M\u00fasica</label> <label for=\"pais\">Pa\u00eds:</label> <select id=\"pais\" name=\"pais\" required> <option value=\"\">Selecione...</option> <option value=\"brasil\">Brasil</option> <option value=\"eua\">EUA</option> <option value=\"japao\">Jap\u00e3o</option> </select> </fieldset> <fieldset> <legend>Contato</legend> <label for=\"telefone\">Telefone:</label> <input type=\"tel\" id=\"telefone\" name=\"telefone\" pattern=\"[0-9]{2}-[0-9]{4}-[0-9]{4}\" required> <small>Formato: 99-9999-9999</small> </fieldset> <button type=\"submit\" id=\"submitButton\" disabled>Enviar</button> <button type=\"reset\">Limpar</button> </form> <script> const form = document.querySelector('form'); const submitButton = document.getElementById('submitButton'); form.addEventListener('input', () => { submitButton.disabled = !form.checkValidity(); }); </script> Essas melhorias tornam o formul\u00e1rio mais acess\u00edvel, funcional e amig\u00e1vel para o usu\u00e1rio.","title":"Aplica\u00e7\u00e3o no Arquivo Atual"},{"location":"_Html/tabelas/","text":"Aqui est\u00e1 uma proposta de aula incremental para ensinar os conceitos de tabelas HTML. A aula \u00e9 dividida em etapas, come\u00e7ando com os fundamentos e avan\u00e7ando gradualmente para conceitos mais complexos. Aula: Introdu\u00e7\u00e3o \u00e0s Tabelas em HTML Objetivo Ensinar os conceitos b\u00e1sicos e avan\u00e7ados de tabelas HTML, incluindo estrutura\u00e7\u00e3o, estiliza\u00e7\u00e3o e boas pr\u00e1ticas. Etapa 1: Introdu\u00e7\u00e3o ao Conceito de Tabelas Explica\u00e7\u00e3o Te\u00f3rica : O que \u00e9 uma tabela e para que serve. Elementos b\u00e1sicos: <table> , <tr> , <td> , <th> . Exemplo Pr\u00e1tico : ```html Tabela Simples Minha Primeira Tabela Nome Idade Jo\u00e3o 25 Maria 30 ``` Etapa 2: Adicionando Estilo Explica\u00e7\u00e3o Te\u00f3rica : Uso de CSS para estilizar tabelas. Propriedades como border , padding , text-align , background-color . Exemplo Pr\u00e1tico : ```html table { width: 50%; border-collapse: collapse; margin: 20px 0; } th, td { border: 1px solid #ddd; padding: 8px; text-align: left; } th { background-color: #f4f4f4; } ``` Etapa 3: Estrutura Avan\u00e7ada Explica\u00e7\u00e3o Te\u00f3rica : Uso de <thead> , <tbody> e <tfoot> . Colspan e rowspan para mesclar c\u00e9lulas. Exemplo Pr\u00e1tico : ```html Produto Quantidade Pre\u00e7o Arroz 2 R$ 10,00 Feij\u00e3o 1 R$ 8,00 Total R$ 18,00 ``` Etapa 4: Boas Pr\u00e1ticas e Acessibilidade Explica\u00e7\u00e3o Te\u00f3rica : Uso de atributos como scope e caption para melhorar a acessibilidade. Import\u00e2ncia de tabelas sem\u00e2nticas. Exemplo Pr\u00e1tico : ```html Tabela de Vendas Produto Quantidade Pre\u00e7o Arroz 2 R$ 10,00 Feij\u00e3o 1 R$ 8,00 ``` Etapa 5: Exerc\u00edcios Pr\u00e1ticos Criar uma tabela de hor\u00e1rios de aulas. Criar uma tabela de pre\u00e7os de produtos com total calculado. Estilizar uma tabela com CSS. Conclus\u00e3o Recapitular os conceitos aprendidos. Discutir quando usar tabelas e quando evitar (ex.: n\u00e3o usar para layout). Essa abordagem incremental garante que os alunos compreendam os fundamentos antes de avan\u00e7ar para t\u00f3picos mais complexos. Similar code found with 2 license types Exemplos Com base no c\u00f3digo fornecido, aqui est\u00e3o alguns exemplos pr\u00e1ticos que podem ser incrementados para enriquecer o aprendizado sobre tabelas HTML: Exemplo 1: Adicionar um Rodap\u00e9 com Total Adicione um <tfoot> para exibir o total dos pre\u00e7os. <tfoot> <tr> <td colspan=\"2\">Total</td> <td>R$ 18,00</td> </tr> </tfoot> Resultado Final: <table> <caption>Tabela de Vendas</caption> <thead> <tr> <th scope=\"col\">Produto</th> <th scope=\"col\">Quantidade</th> <th scope=\"col\">Pre\u00e7o</th> </tr> </thead> <tbody> <tr> <td>Arroz</td> <td>2</td> <td>R$ 10,00</td> </tr> <tr> <td>Feij\u00e3o</td> <td>1</td> <td>R$ 8,00</td> </tr> </tbody> <tfoot> <tr> <td colspan=\"2\">Total</td> <td>R$ 18,00</td> </tr> </tfoot> </table> Exemplo 2: Mesclar C\u00e9lulas com colspan e rowspan Demonstre como mesclar c\u00e9lulas para criar uma tabela mais complexa. <tr> <td rowspan=\"2\">Arroz</td> <td>1</td> <td>R$ 5,00</td> </tr> <tr> <td>1</td> <td>R$ 5,00</td> </tr> Resultado Final: <table> <caption>Tabela de Vendas</caption> <thead> <tr> <th scope=\"col\">Produto</th> <th scope=\"col\">Quantidade</th> <th scope=\"col\">Pre\u00e7o</th> </tr> </thead> <tbody> <tr> <td rowspan=\"2\">Arroz</td> <td>1</td> <td>R$ 5,00</td> </tr> <tr> <td>1</td> <td>R$ 5,00</td> </tr> <tr> <td>Feij\u00e3o</td> <td>1</td> <td>R$ 8,00</td> </tr> </tbody> </table> Exemplo 3: Adicionar Estilo com Classes Use classes CSS para estilizar linhas alternadas. <style> .linha-par { background-color: #f9f9f9; } </style> HTML Atualizado: <tbody> <tr class=\"linha-par\"> <td>Arroz</td> <td>2</td> <td>R$ 10,00</td> </tr> <tr> <td>Feij\u00e3o</td> <td>1</td> <td>R$ 8,00</td> </tr> </tbody> Exemplo 4: Melhorar Acessibilidade com scope e caption J\u00e1 est\u00e1 parcialmente implementado no seu c\u00f3digo, mas pode ser refor\u00e7ado com explica\u00e7\u00f5es sobre como o atributo scope ajuda leitores de tela. <caption>Tabela de Vendas</caption> <th scope=\"col\">Produto</th> <th scope=\"col\">Quantidade</th> <th scope=\"col\">Pre\u00e7o</th> Exemplo 5: Tabela Responsiva Adicione um cont\u00eainer para tornar a tabela responsiva em dispositivos m\u00f3veis. <style> .tabela-responsiva { overflow-x: auto; } </style> <div class=\"tabela-responsiva\"> <table> <!-- conte\u00fado da tabela --> </table> </div> Esses exemplos incrementais ajudam a explorar diferentes aspectos das tabelas HTML, desde estrutura b\u00e1sica at\u00e9 estiliza\u00e7\u00e3o e acessibilidade. Similar code found with 2 license types","title":"Tabelas"},{"location":"_Html/tabelas/#aula-introducao-as-tabelas-em-html","text":"","title":"Aula: Introdu\u00e7\u00e3o \u00e0s Tabelas em HTML"},{"location":"_Html/tabelas/#objetivo","text":"Ensinar os conceitos b\u00e1sicos e avan\u00e7ados de tabelas HTML, incluindo estrutura\u00e7\u00e3o, estiliza\u00e7\u00e3o e boas pr\u00e1ticas.","title":"Objetivo"},{"location":"_Html/tabelas/#etapa-1-introducao-ao-conceito-de-tabelas","text":"Explica\u00e7\u00e3o Te\u00f3rica : O que \u00e9 uma tabela e para que serve. Elementos b\u00e1sicos: <table> , <tr> , <td> , <th> . Exemplo Pr\u00e1tico : ```html Tabela Simples","title":"Etapa 1: Introdu\u00e7\u00e3o ao Conceito de Tabelas"},{"location":"_Html/tabelas/#etapa-2-adicionando-estilo","text":"Explica\u00e7\u00e3o Te\u00f3rica : Uso de CSS para estilizar tabelas. Propriedades como border , padding , text-align , background-color . Exemplo Pr\u00e1tico : ```html table { width: 50%; border-collapse: collapse; margin: 20px 0; } th, td { border: 1px solid #ddd; padding: 8px; text-align: left; } th { background-color: #f4f4f4; } ```","title":"Etapa 2: Adicionando Estilo"},{"location":"_Html/tabelas/#etapa-3-estrutura-avancada","text":"Explica\u00e7\u00e3o Te\u00f3rica : Uso de <thead> , <tbody> e <tfoot> . Colspan e rowspan para mesclar c\u00e9lulas. Exemplo Pr\u00e1tico : ```html Produto Quantidade Pre\u00e7o Arroz 2 R$ 10,00 Feij\u00e3o 1 R$ 8,00 Total R$ 18,00 ```","title":"Etapa 3: Estrutura Avan\u00e7ada"},{"location":"_Html/tabelas/#etapa-4-boas-praticas-e-acessibilidade","text":"Explica\u00e7\u00e3o Te\u00f3rica : Uso de atributos como scope e caption para melhorar a acessibilidade. Import\u00e2ncia de tabelas sem\u00e2nticas. Exemplo Pr\u00e1tico : ```html Tabela de Vendas Produto Quantidade Pre\u00e7o Arroz 2 R$ 10,00 Feij\u00e3o 1 R$ 8,00 ```","title":"Etapa 4: Boas Pr\u00e1ticas e Acessibilidade"},{"location":"_Html/tabelas/#etapa-5-exercicios-praticos","text":"Criar uma tabela de hor\u00e1rios de aulas. Criar uma tabela de pre\u00e7os de produtos com total calculado. Estilizar uma tabela com CSS.","title":"Etapa 5: Exerc\u00edcios Pr\u00e1ticos"},{"location":"_Html/tabelas/#conclusao","text":"Recapitular os conceitos aprendidos. Discutir quando usar tabelas e quando evitar (ex.: n\u00e3o usar para layout). Essa abordagem incremental garante que os alunos compreendam os fundamentos antes de avan\u00e7ar para t\u00f3picos mais complexos.","title":"Conclus\u00e3o"},{"location":"_Html/tabelas/#similar-code-found-with-2-license-types","text":"","title":"Similar code found with 2 license types"},{"location":"_Html/tabelas/#exemplos","text":"Com base no c\u00f3digo fornecido, aqui est\u00e3o alguns exemplos pr\u00e1ticos que podem ser incrementados para enriquecer o aprendizado sobre tabelas HTML:","title":"Exemplos"},{"location":"_Html/tabelas/#exemplo-1-adicionar-um-rodape-com-total","text":"Adicione um <tfoot> para exibir o total dos pre\u00e7os. <tfoot> <tr> <td colspan=\"2\">Total</td> <td>R$ 18,00</td> </tr> </tfoot> Resultado Final: <table> <caption>Tabela de Vendas</caption> <thead> <tr> <th scope=\"col\">Produto</th> <th scope=\"col\">Quantidade</th> <th scope=\"col\">Pre\u00e7o</th> </tr> </thead> <tbody> <tr> <td>Arroz</td> <td>2</td> <td>R$ 10,00</td> </tr> <tr> <td>Feij\u00e3o</td> <td>1</td> <td>R$ 8,00</td> </tr> </tbody> <tfoot> <tr> <td colspan=\"2\">Total</td> <td>R$ 18,00</td> </tr> </tfoot> </table>","title":"Exemplo 1: Adicionar um Rodap\u00e9 com Total"},{"location":"_Html/tabelas/#exemplo-2-mesclar-celulas-com-colspan-e-rowspan","text":"Demonstre como mesclar c\u00e9lulas para criar uma tabela mais complexa. <tr> <td rowspan=\"2\">Arroz</td> <td>1</td> <td>R$ 5,00</td> </tr> <tr> <td>1</td> <td>R$ 5,00</td> </tr> Resultado Final: <table> <caption>Tabela de Vendas</caption> <thead> <tr> <th scope=\"col\">Produto</th> <th scope=\"col\">Quantidade</th> <th scope=\"col\">Pre\u00e7o</th> </tr> </thead> <tbody> <tr> <td rowspan=\"2\">Arroz</td> <td>1</td> <td>R$ 5,00</td> </tr> <tr> <td>1</td> <td>R$ 5,00</td> </tr> <tr> <td>Feij\u00e3o</td> <td>1</td> <td>R$ 8,00</td> </tr> </tbody> </table>","title":"Exemplo 2: Mesclar C\u00e9lulas com colspan e rowspan"},{"location":"_Html/tabelas/#exemplo-3-adicionar-estilo-com-classes","text":"Use classes CSS para estilizar linhas alternadas. <style> .linha-par { background-color: #f9f9f9; } </style> HTML Atualizado: <tbody> <tr class=\"linha-par\"> <td>Arroz</td> <td>2</td> <td>R$ 10,00</td> </tr> <tr> <td>Feij\u00e3o</td> <td>1</td> <td>R$ 8,00</td> </tr> </tbody>","title":"Exemplo 3: Adicionar Estilo com Classes"},{"location":"_Html/tabelas/#exemplo-4-melhorar-acessibilidade-com-scope-e-caption","text":"J\u00e1 est\u00e1 parcialmente implementado no seu c\u00f3digo, mas pode ser refor\u00e7ado com explica\u00e7\u00f5es sobre como o atributo scope ajuda leitores de tela. <caption>Tabela de Vendas</caption> <th scope=\"col\">Produto</th> <th scope=\"col\">Quantidade</th> <th scope=\"col\">Pre\u00e7o</th>","title":"Exemplo 4: Melhorar Acessibilidade com scope e caption"},{"location":"_Html/tabelas/#exemplo-5-tabela-responsiva","text":"Adicione um cont\u00eainer para tornar a tabela responsiva em dispositivos m\u00f3veis. <style> .tabela-responsiva { overflow-x: auto; } </style> <div class=\"tabela-responsiva\"> <table> <!-- conte\u00fado da tabela --> </table> </div> Esses exemplos incrementais ajudam a explorar diferentes aspectos das tabelas HTML, desde estrutura b\u00e1sica at\u00e9 estiliza\u00e7\u00e3o e acessibilidade. Similar code found with 2 license types","title":"Exemplo 5: Tabela Responsiva"},{"location":"_Html/tags%20sem%C3%A2ntica/","text":"Tags Sem\u00e2nticas em HTML Objetivo: Nesta aula, voc\u00ea aprender\u00e1 sobre as tags sem\u00e2nticas do HTML e como us\u00e1-las para criar uma estrutura de site b\u00e1sica. Utilizaremos conte\u00fado fict\u00edcio \"Lorem Ipsum\" para ilustrar a aplica\u00e7\u00e3o dessas tags. 1. Introdu\u00e7\u00e3o \u00e0s Tags Sem\u00e2nticas Tags sem\u00e2nticas s\u00e3o elementos HTML que n\u00e3o apenas definem o layout de um site, mas tamb\u00e9m fornecem significado ao conte\u00fado. Isso melhora a acessibilidade, a usabilidade e o SEO (Search Engine Optimization) de um site. Algumas das principais tags sem\u00e2nticas incluem: <header> : Cabe\u00e7alho do site ou de uma se\u00e7\u00e3o. <nav> : Menu de navega\u00e7\u00e3o. <article> : Conte\u00fado independente, como um post ou um artigo. <section> : Se\u00e7\u00e3o de conte\u00fado relacionada. <aside> : Conte\u00fado relacionado, como barras laterais. <footer> : Rodap\u00e9 do site ou de uma se\u00e7\u00e3o. 2. Estrutura do Site B\u00e1sico Vamos criar um site simples com as seguintes se\u00e7\u00f5es: Cabe\u00e7alho com o t\u00edtulo do site. Menu de navega\u00e7\u00e3o. Um artigo principal. Uma se\u00e7\u00e3o adicional. Um rodap\u00e9. 3. Exemplo de C\u00f3digo <!DOCTYPE html> <html lang=\"pt-BR\"> <head> <meta charset=\"UTF-8\"> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"> <title>Meu Site B\u00e1sico</title> <style> body { font-family: Arial, sans-serif; margin: 0; padding: 0; } header, nav, article, section, aside, footer { padding: 20px; margin: 10px; border: 1px solid #ddd; } header { background-color: #f8f8f8; } nav { background-color: #e8e8e8; } footer { background-color: #f1f1f1; } </style> </head> <body> <header> <h1>Bem-vindo ao Meu Site</h1> </header> <nav> <ul> <li><a href=\"#\">In\u00edcio</a></li> <li><a href=\"#\">Sobre</a></li> <li><a href=\"#\">Servi\u00e7os</a></li> <li><a href=\"#\">Contato</a></li> </ul> </nav> <article> <h2>Artigo Principal</h2> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam id dolor id nibh ultricies vehicula ut id elit. Cras mattis consectetur purus sit amet fermentum.</p> <p>Maecenas sed diam eget risus varius blandit sit amet non magna. Curabitur blandit tempus porttitor. Fusce dapibus, tellus ac cursus commodo, tortor mauris condimentum nibh, ut fermentum massa justo sit amet risus.</p> </article> <section> <h2>Outra Se\u00e7\u00e3o</h2> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer posuere erat a ante venenatis dapibus posuere velit aliquet.</p> <p>Donec ullamcorper nulla non metus auctor fringilla. Vestibulum id ligula porta felis euismod semper.</p> </section> <aside> <h2>Barra Lateral</h2> <p>Informa\u00e7\u00f5es adicionais ou links relacionados podem ser colocados aqui.</p> </aside> <footer> <p>\u00a9 2024 Meu Site B\u00e1sico. Todos os direitos reservados.</p> </footer> </body> </html> 4. Explica\u00e7\u00e3o do Exemplo <header> : Cont\u00e9m o t\u00edtulo do site. <nav> : Um menu de navega\u00e7\u00e3o b\u00e1sico com links fict\u00edcios. <article> : O conte\u00fado principal do site. <section> : Uma se\u00e7\u00e3o adicional que poderia conter mais conte\u00fado relacionado. <aside> : Uma barra lateral com informa\u00e7\u00f5es extras. <footer> : O rodap\u00e9 com informa\u00e7\u00f5es de direitos autorais. 5. Conclus\u00e3o As tags sem\u00e2nticas s\u00e3o fundamentais para criar sites bem estruturados e acess\u00edveis. Ao usar essas tags, o HTML fica mais claro tanto para desenvolvedores quanto para mecanismos de busca, melhorando a experi\u00eancia geral do usu\u00e1rio. Tarefa: Crie seu pr\u00f3prio site usando tags sem\u00e2nticas e substitua o conte\u00fado \"Lorem Ipsum\" por informa\u00e7\u00f5es reais de um projeto ou interesse pessoal.","title":"Tags sem\u00e2ntica"},{"location":"_Html/tags%20sem%C3%A2ntica/#tags-semanticas-em-html","text":"","title":"Tags Sem\u00e2nticas em HTML"},{"location":"_Html/tags%20sem%C3%A2ntica/#objetivo","text":"Nesta aula, voc\u00ea aprender\u00e1 sobre as tags sem\u00e2nticas do HTML e como us\u00e1-las para criar uma estrutura de site b\u00e1sica. Utilizaremos conte\u00fado fict\u00edcio \"Lorem Ipsum\" para ilustrar a aplica\u00e7\u00e3o dessas tags.","title":"Objetivo:"},{"location":"_Html/tags%20sem%C3%A2ntica/#1-introducao-as-tags-semanticas","text":"Tags sem\u00e2nticas s\u00e3o elementos HTML que n\u00e3o apenas definem o layout de um site, mas tamb\u00e9m fornecem significado ao conte\u00fado. Isso melhora a acessibilidade, a usabilidade e o SEO (Search Engine Optimization) de um site. Algumas das principais tags sem\u00e2nticas incluem: <header> : Cabe\u00e7alho do site ou de uma se\u00e7\u00e3o. <nav> : Menu de navega\u00e7\u00e3o. <article> : Conte\u00fado independente, como um post ou um artigo. <section> : Se\u00e7\u00e3o de conte\u00fado relacionada. <aside> : Conte\u00fado relacionado, como barras laterais. <footer> : Rodap\u00e9 do site ou de uma se\u00e7\u00e3o.","title":"1. Introdu\u00e7\u00e3o \u00e0s Tags Sem\u00e2nticas"},{"location":"_Html/tags%20sem%C3%A2ntica/#2-estrutura-do-site-basico","text":"Vamos criar um site simples com as seguintes se\u00e7\u00f5es: Cabe\u00e7alho com o t\u00edtulo do site. Menu de navega\u00e7\u00e3o. Um artigo principal. Uma se\u00e7\u00e3o adicional. Um rodap\u00e9.","title":"2. Estrutura do Site B\u00e1sico"},{"location":"_Html/tags%20sem%C3%A2ntica/#3-exemplo-de-codigo","text":"<!DOCTYPE html> <html lang=\"pt-BR\"> <head> <meta charset=\"UTF-8\"> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"> <title>Meu Site B\u00e1sico</title> <style> body { font-family: Arial, sans-serif; margin: 0; padding: 0; } header, nav, article, section, aside, footer { padding: 20px; margin: 10px; border: 1px solid #ddd; } header { background-color: #f8f8f8; } nav { background-color: #e8e8e8; } footer { background-color: #f1f1f1; } </style> </head> <body> <header> <h1>Bem-vindo ao Meu Site</h1> </header> <nav> <ul> <li><a href=\"#\">In\u00edcio</a></li> <li><a href=\"#\">Sobre</a></li> <li><a href=\"#\">Servi\u00e7os</a></li> <li><a href=\"#\">Contato</a></li> </ul> </nav> <article> <h2>Artigo Principal</h2> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam id dolor id nibh ultricies vehicula ut id elit. Cras mattis consectetur purus sit amet fermentum.</p> <p>Maecenas sed diam eget risus varius blandit sit amet non magna. Curabitur blandit tempus porttitor. Fusce dapibus, tellus ac cursus commodo, tortor mauris condimentum nibh, ut fermentum massa justo sit amet risus.</p> </article> <section> <h2>Outra Se\u00e7\u00e3o</h2> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer posuere erat a ante venenatis dapibus posuere velit aliquet.</p> <p>Donec ullamcorper nulla non metus auctor fringilla. Vestibulum id ligula porta felis euismod semper.</p> </section> <aside> <h2>Barra Lateral</h2> <p>Informa\u00e7\u00f5es adicionais ou links relacionados podem ser colocados aqui.</p> </aside> <footer> <p>\u00a9 2024 Meu Site B\u00e1sico. Todos os direitos reservados.</p> </footer> </body> </html>","title":"3. Exemplo de C\u00f3digo"},{"location":"_Html/tags%20sem%C3%A2ntica/#4-explicacao-do-exemplo","text":"<header> : Cont\u00e9m o t\u00edtulo do site. <nav> : Um menu de navega\u00e7\u00e3o b\u00e1sico com links fict\u00edcios. <article> : O conte\u00fado principal do site. <section> : Uma se\u00e7\u00e3o adicional que poderia conter mais conte\u00fado relacionado. <aside> : Uma barra lateral com informa\u00e7\u00f5es extras. <footer> : O rodap\u00e9 com informa\u00e7\u00f5es de direitos autorais.","title":"4. Explica\u00e7\u00e3o do Exemplo"},{"location":"_Html/tags%20sem%C3%A2ntica/#5-conclusao","text":"As tags sem\u00e2nticas s\u00e3o fundamentais para criar sites bem estruturados e acess\u00edveis. Ao usar essas tags, o HTML fica mais claro tanto para desenvolvedores quanto para mecanismos de busca, melhorando a experi\u00eancia geral do usu\u00e1rio. Tarefa: Crie seu pr\u00f3prio site usando tags sem\u00e2nticas e substitua o conte\u00fado \"Lorem Ipsum\" por informa\u00e7\u00f5es reais de um projeto ou interesse pessoal.","title":"5. Conclus\u00e3o"},{"location":"_Js/01_Intro/","text":"01 - Introdu\u00e7\u00e3o ao JavaScript Introdu\u00e7\u00e3o O que \u00e9 JavaScript? Linguagem de programa\u00e7\u00e3o para web (front-end e back-end com Node.js). Compara\u00e7\u00e3o com HTML e CSS (HTML = estrutura, CSS = estilo, JS = interatividade). Onde o JavaScript \u00e9 usado? P\u00e1ginas web din\u00e2micas (ex.: formul\u00e1rios, anima\u00e7\u00f5es). Aplicativos mobile (React Native, Ionic). Back-end (Node.js), games, IoT. Ferramentas necess\u00e1rias: Navegador (Chrome + DevTools). Editor de c\u00f3digo (VS Code). Node.js (opcional para rodar JS fora do navegador). Configurando o Ambiente Instala\u00e7\u00e3o do VS Code e extens\u00f5es \u00fateis: Live Preview (para rodar p\u00e1ginas localmente). Prettier (formata\u00e7\u00e3o autom\u00e1tica). Hello World no navegador: Criar um arquivo index.html com <script> embutido. Usar console.log(\"Hello World\") e inspecionar no DevTools (F12). Vari\u00e1veis e Tipos de Dados Declara\u00e7\u00e3o de vari\u00e1veis: var (antigo, escopo global/fun\u00e7\u00e3o). let (escopo de bloco, mut\u00e1vel). const (escopo de bloco, imut\u00e1vel). Tipos de dados primitivos: String , Number , Boolean , null , undefined , Symbol . Operadores: Aritm\u00e9ticos ( + , - , * , / ). Compara\u00e7\u00e3o ( == , === , != , !== ). L\u00f3gicos ( && , || , ! ). Exemplo pr\u00e1tico: javascript const nome = \"Jo\u00e3o\"; let idade = 25; var isProgrammer = true; console.log(`${nome} tem ${idade} anos. \u00c9 programador? ${isProgrammer}`); Estruturas Condicionais If/Else: if (idade >= 18) { console.log(\"Maior de idade\"); } else { console.log(\"Menor de idade\"); } Switch/Case: switch (diaDaSemana) { case 1: console.log(\"Segunda\"); break; case 2: console.log(\"Ter\u00e7a\"); break; default: console.log(\"Dia inv\u00e1lido\"); } Operador tern\u00e1rio: const status = (idade >= 18) ? \"Adulto\" : \"Adolescente\"; Estruturas de Repeti\u00e7\u00e3o For: for (let i = 0; i < 5; i++) { console.log(`N\u00famero: ${i}`); } While/Do-While: let contador = 0; while (contador < 3) { console.log(contador); contador++; } Loop em arrays (pr\u00e9via da Aula 3): const frutas = [\"Ma\u00e7\u00e3\", \"Banana\", \"Uva\"]; for (const fruta of frutas) { console.log(fruta); } ``` --- ### Fun\u00e7\u00f5es - **Declara\u00e7\u00e3o vs. Express\u00e3o vs. Arrow Function:** ```javascript // Declara\u00e7\u00e3o function soma(a, b) { return a + b; } // Express\u00e3o const soma = function(a, b) { return a + b; }; // Arrow Function (ES6+) const soma = (a, b) => a + b; Par\u00e2metros e retorno: Valores padr\u00e3o ( function greet(name = \"Visitante\") ). Exerc\u00edcio: Criar uma fun\u00e7\u00e3o que verifica se um n\u00famero \u00e9 par. Exerc\u00edcio Pr\u00e1tico Final Desafio: Criar uma calculadora simples no console: Perguntar ao usu\u00e1rio dois n\u00fameros (usar prompt ). Perguntar a opera\u00e7\u00e3o ( + , - , * , / ). Exibir o resultado no console. Exemplo de solu\u00e7\u00e3o: const num1 = parseFloat(prompt(\"Digite o primeiro n\u00famero:\")); const num2 = parseFloat(prompt(\"Digite o segundo n\u00famero:\")); const operacao = prompt(\"Digite a opera\u00e7\u00e3o (+, -, *, /):\"); let resultado; switch (operacao) { case \"+\": resultado = num1 + num2; break; case \"-\": resultado = num1 - num2; break; case \"*\": resultado = num1 * num2; break; case \"/\": resultado = num1 / num2; break; default: resultado = \"Opera\u00e7\u00e3o inv\u00e1lida\"; } console.log(`Resultado: ${resultado}`); Recursos Complementares MDN JavaScript Guide JavaScript.info","title":"01 - Introdu\u00e7\u00e3o ao JavaScript"},{"location":"_Js/01_Intro/#01-introducao-ao-javascript","text":"","title":"01 - Introdu\u00e7\u00e3o ao JavaScript"},{"location":"_Js/01_Intro/#introducao","text":"O que \u00e9 JavaScript? Linguagem de programa\u00e7\u00e3o para web (front-end e back-end com Node.js). Compara\u00e7\u00e3o com HTML e CSS (HTML = estrutura, CSS = estilo, JS = interatividade). Onde o JavaScript \u00e9 usado? P\u00e1ginas web din\u00e2micas (ex.: formul\u00e1rios, anima\u00e7\u00f5es). Aplicativos mobile (React Native, Ionic). Back-end (Node.js), games, IoT. Ferramentas necess\u00e1rias: Navegador (Chrome + DevTools). Editor de c\u00f3digo (VS Code). Node.js (opcional para rodar JS fora do navegador).","title":"Introdu\u00e7\u00e3o"},{"location":"_Js/01_Intro/#configurando-o-ambiente","text":"Instala\u00e7\u00e3o do VS Code e extens\u00f5es \u00fateis: Live Preview (para rodar p\u00e1ginas localmente). Prettier (formata\u00e7\u00e3o autom\u00e1tica). Hello World no navegador: Criar um arquivo index.html com <script> embutido. Usar console.log(\"Hello World\") e inspecionar no DevTools (F12).","title":"Configurando o Ambiente"},{"location":"_Js/01_Intro/#variaveis-e-tipos-de-dados","text":"Declara\u00e7\u00e3o de vari\u00e1veis: var (antigo, escopo global/fun\u00e7\u00e3o). let (escopo de bloco, mut\u00e1vel). const (escopo de bloco, imut\u00e1vel). Tipos de dados primitivos: String , Number , Boolean , null , undefined , Symbol . Operadores: Aritm\u00e9ticos ( + , - , * , / ). Compara\u00e7\u00e3o ( == , === , != , !== ). L\u00f3gicos ( && , || , ! ). Exemplo pr\u00e1tico: javascript const nome = \"Jo\u00e3o\"; let idade = 25; var isProgrammer = true; console.log(`${nome} tem ${idade} anos. \u00c9 programador? ${isProgrammer}`);","title":"Vari\u00e1veis e Tipos de Dados"},{"location":"_Js/01_Intro/#estruturas-condicionais","text":"If/Else: if (idade >= 18) { console.log(\"Maior de idade\"); } else { console.log(\"Menor de idade\"); } Switch/Case: switch (diaDaSemana) { case 1: console.log(\"Segunda\"); break; case 2: console.log(\"Ter\u00e7a\"); break; default: console.log(\"Dia inv\u00e1lido\"); } Operador tern\u00e1rio: const status = (idade >= 18) ? \"Adulto\" : \"Adolescente\";","title":"Estruturas Condicionais"},{"location":"_Js/01_Intro/#estruturas-de-repeticao","text":"For: for (let i = 0; i < 5; i++) { console.log(`N\u00famero: ${i}`); } While/Do-While: let contador = 0; while (contador < 3) { console.log(contador); contador++; } Loop em arrays (pr\u00e9via da Aula 3): const frutas = [\"Ma\u00e7\u00e3\", \"Banana\", \"Uva\"]; for (const fruta of frutas) { console.log(fruta); } ``` --- ### Fun\u00e7\u00f5es - **Declara\u00e7\u00e3o vs. Express\u00e3o vs. Arrow Function:** ```javascript // Declara\u00e7\u00e3o function soma(a, b) { return a + b; } // Express\u00e3o const soma = function(a, b) { return a + b; }; // Arrow Function (ES6+) const soma = (a, b) => a + b; Par\u00e2metros e retorno: Valores padr\u00e3o ( function greet(name = \"Visitante\") ). Exerc\u00edcio: Criar uma fun\u00e7\u00e3o que verifica se um n\u00famero \u00e9 par.","title":"Estruturas de Repeti\u00e7\u00e3o"},{"location":"_Js/01_Intro/#exercicio-pratico-final","text":"Desafio: Criar uma calculadora simples no console: Perguntar ao usu\u00e1rio dois n\u00fameros (usar prompt ). Perguntar a opera\u00e7\u00e3o ( + , - , * , / ). Exibir o resultado no console. Exemplo de solu\u00e7\u00e3o: const num1 = parseFloat(prompt(\"Digite o primeiro n\u00famero:\")); const num2 = parseFloat(prompt(\"Digite o segundo n\u00famero:\")); const operacao = prompt(\"Digite a opera\u00e7\u00e3o (+, -, *, /):\"); let resultado; switch (operacao) { case \"+\": resultado = num1 + num2; break; case \"-\": resultado = num1 - num2; break; case \"*\": resultado = num1 * num2; break; case \"/\": resultado = num1 / num2; break; default: resultado = \"Opera\u00e7\u00e3o inv\u00e1lida\"; } console.log(`Resultado: ${resultado}`);","title":"Exerc\u00edcio Pr\u00e1tico Final"},{"location":"_Js/01_Intro/#recursos-complementares","text":"MDN JavaScript Guide JavaScript.info","title":"Recursos Complementares"},{"location":"_Js/02_Arrays/","text":"02 - Arrays, Objetos e M\u00e9todos Avan\u00e7ados Arrays: Conceitos e M\u00e9todos B\u00e1sicos O que s\u00e3o Arrays? Estrutura ordenada para armazenar m\u00faltiplos valores. Sintaxe: const frutas = [\"Ma\u00e7\u00e3\", \"Banana\", \"Uva\"]; const numeros = [1, 2, 3, 4, 5]; M\u00e9todos Fundamentais M\u00e9todo Descri\u00e7\u00e3o Exemplo push() Adiciona ao final frutas.push(\"Morango\") pop() Remove do final frutas.pop() shift() Remove do in\u00edcio frutas.shift() unshift() Adiciona no in\u00edcio frutas.unshift(\"Pera\") length Tamanho do array frutas.length Pr\u00e1tica: const listaCompras = [\"Leite\", \"Ovos\"]; listaCompras.push(\"P\u00e3o\"); console.log(listaCompras); // [\"Leite\", \"Ovos\", \"P\u00e3o\"] 2. M\u00e9todos Avan\u00e7ados de Arrays map() Cria um novo array transformando cada item. const numerosDobrados = numeros.map(num => num * 2); // [2, 4, 6, 8, 10] filter() Filtra itens com base em uma condi\u00e7\u00e3o. const pares = numeros.filter(num => num % 2 === 0); // [2, 4] reduce() Reduz o array a um \u00fanico valor (soma, m\u00e9dia, etc). const soma = numeros.reduce((total, num) => total + num, 0); // 15 Exerc\u00edcio Dado o array [10, 20, 30, 40] : Calcular o dobro de cada n\u00famero ( map ). Filtrar valores maiores que 25 ( filter ). Somar todos os valores ( reduce ). 3. Objetos em JavaScript Cria\u00e7\u00e3o e Acesso const pessoa = { nome: \"Ana\", idade: 30, profissao: \"Engenheira\" }; console.log(pessoa.nome); // \"Ana\" M\u00e9todos em Objetos: const pessoa = { nome: \"Carlos\", cumprimentar() { return `Ol\u00e1, eu sou ${this.nome}!`; } }; console.log(pessoa.cumprimentar()); Exerc\u00edcios Criar um objeto livro com: T\u00edtulo, autor, ano de publica\u00e7\u00e3o. M\u00e9todo info() que retorna: \"O livro [T\u00cdTULO] foi escrito por [AUTOR] em [ANO].\" 4. Desestrutura\u00e7\u00e3o e Spread Operator Desestrutura\u00e7\u00e3o de Arrays: const [primeiro, segundo] = [\"A\", \"B\", \"C\"]; console.log(primeiro); // \"A\" Desestrutura\u00e7\u00e3o de Objetos const { nome, idade } = pessoa; console.log(nome); // \"Ana\" Spread Operator ( ... ) Copiar arrays/objetos ou combinar. const novoArray = [...numeros, 6, 7]; // [1, 2, 3, 4, 5, 6, 7] const novoObjeto = { ...pessoa, cidade: \"S\u00e3o Paulo\" }; Exerc\u00edcios arrays/objetos Desestruturar um array [100, 200, 300] em vari\u00e1veis a , b , c . Combinar dois objetos ( usuario e endereco ) em um novo. 5. Projeto Pr\u00e1tico: Lista de Produtos Objetivo: Criar um sistema que: Filtra produtos com pre\u00e7o > R$50. Aplica 10% de desconto nos produtos ( map ). Calcula o total da compra ( reduce ). Dados Iniciais: const produtos = [ { nome: \"Notebook\", preco: 2500 }, { nome: \"Celular\", preco: 800 }, { nome: \"Tablet\", preco: 1200 } ]; Solu\u00e7\u00e3o const produtosFiltrados = produtos.filter(p => p.preco > 50); const comDesconto = produtosFiltrados.map(p => ({ ...p, preco: p.preco * 0.9 })); const total = comDesconto.reduce((soma, p) => soma + p.preco, 0); Recursos Complementares: MDN - Array Methods JavaScript.info - Objetos","title":"02 - Arrays, Objetos e M\u00e9todos Avan\u00e7ados"},{"location":"_Js/02_Arrays/#02-arrays-objetos-e-metodos-avancados","text":"","title":"02 - Arrays, Objetos e M\u00e9todos Avan\u00e7ados"},{"location":"_Js/02_Arrays/#arrays-conceitos-e-metodos-basicos","text":"","title":"Arrays: Conceitos e M\u00e9todos B\u00e1sicos"},{"location":"_Js/02_Arrays/#o-que-sao-arrays","text":"Estrutura ordenada para armazenar m\u00faltiplos valores. Sintaxe: const frutas = [\"Ma\u00e7\u00e3\", \"Banana\", \"Uva\"]; const numeros = [1, 2, 3, 4, 5];","title":"O que s\u00e3o Arrays?"},{"location":"_Js/02_Arrays/#metodos-fundamentais","text":"M\u00e9todo Descri\u00e7\u00e3o Exemplo push() Adiciona ao final frutas.push(\"Morango\") pop() Remove do final frutas.pop() shift() Remove do in\u00edcio frutas.shift() unshift() Adiciona no in\u00edcio frutas.unshift(\"Pera\") length Tamanho do array frutas.length","title":"M\u00e9todos Fundamentais"},{"location":"_Js/02_Arrays/#pratica","text":"const listaCompras = [\"Leite\", \"Ovos\"]; listaCompras.push(\"P\u00e3o\"); console.log(listaCompras); // [\"Leite\", \"Ovos\", \"P\u00e3o\"]","title":"Pr\u00e1tica:"},{"location":"_Js/02_Arrays/#2-metodos-avancados-de-arrays","text":"","title":"2. M\u00e9todos Avan\u00e7ados de Arrays"},{"location":"_Js/02_Arrays/#map","text":"Cria um novo array transformando cada item. const numerosDobrados = numeros.map(num => num * 2); // [2, 4, 6, 8, 10]","title":"map()"},{"location":"_Js/02_Arrays/#filter","text":"Filtra itens com base em uma condi\u00e7\u00e3o. const pares = numeros.filter(num => num % 2 === 0); // [2, 4]","title":"filter()"},{"location":"_Js/02_Arrays/#reduce","text":"Reduz o array a um \u00fanico valor (soma, m\u00e9dia, etc). const soma = numeros.reduce((total, num) => total + num, 0); // 15","title":"reduce()"},{"location":"_Js/02_Arrays/#exercicio","text":"Dado o array [10, 20, 30, 40] : Calcular o dobro de cada n\u00famero ( map ). Filtrar valores maiores que 25 ( filter ). Somar todos os valores ( reduce ).","title":"Exerc\u00edcio"},{"location":"_Js/02_Arrays/#3-objetos-em-javascript","text":"","title":"3. Objetos em JavaScript"},{"location":"_Js/02_Arrays/#criacao-e-acesso","text":"const pessoa = { nome: \"Ana\", idade: 30, profissao: \"Engenheira\" }; console.log(pessoa.nome); // \"Ana\"","title":"Cria\u00e7\u00e3o e Acesso"},{"location":"_Js/02_Arrays/#metodos-em-objetos","text":"const pessoa = { nome: \"Carlos\", cumprimentar() { return `Ol\u00e1, eu sou ${this.nome}!`; } }; console.log(pessoa.cumprimentar());","title":"M\u00e9todos em Objetos:"},{"location":"_Js/02_Arrays/#exercicios","text":"Criar um objeto livro com: T\u00edtulo, autor, ano de publica\u00e7\u00e3o. M\u00e9todo info() que retorna: \"O livro [T\u00cdTULO] foi escrito por [AUTOR] em [ANO].\"","title":"Exerc\u00edcios"},{"location":"_Js/02_Arrays/#4-desestruturacao-e-spread-operator","text":"","title":"4. Desestrutura\u00e7\u00e3o e Spread Operator"},{"location":"_Js/02_Arrays/#desestruturacao-de-arrays","text":"const [primeiro, segundo] = [\"A\", \"B\", \"C\"]; console.log(primeiro); // \"A\"","title":"Desestrutura\u00e7\u00e3o de Arrays:"},{"location":"_Js/02_Arrays/#desestruturacao-de-objetos","text":"const { nome, idade } = pessoa; console.log(nome); // \"Ana\"","title":"Desestrutura\u00e7\u00e3o de Objetos"},{"location":"_Js/02_Arrays/#spread-operator","text":"Copiar arrays/objetos ou combinar. const novoArray = [...numeros, 6, 7]; // [1, 2, 3, 4, 5, 6, 7] const novoObjeto = { ...pessoa, cidade: \"S\u00e3o Paulo\" };","title":"Spread Operator (...)"},{"location":"_Js/02_Arrays/#exercicios-arraysobjetos","text":"Desestruturar um array [100, 200, 300] em vari\u00e1veis a , b , c . Combinar dois objetos ( usuario e endereco ) em um novo.","title":"Exerc\u00edcios arrays/objetos"},{"location":"_Js/02_Arrays/#5-projeto-pratico-lista-de-produtos","text":"Objetivo: Criar um sistema que: Filtra produtos com pre\u00e7o > R$50. Aplica 10% de desconto nos produtos ( map ). Calcula o total da compra ( reduce ).","title":"5. Projeto Pr\u00e1tico: Lista de Produtos"},{"location":"_Js/02_Arrays/#dados-iniciais","text":"const produtos = [ { nome: \"Notebook\", preco: 2500 }, { nome: \"Celular\", preco: 800 }, { nome: \"Tablet\", preco: 1200 } ];","title":"Dados Iniciais:"},{"location":"_Js/02_Arrays/#solucao","text":"const produtosFiltrados = produtos.filter(p => p.preco > 50); const comDesconto = produtosFiltrados.map(p => ({ ...p, preco: p.preco * 0.9 })); const total = comDesconto.reduce((soma, p) => soma + p.preco, 0);","title":"Solu\u00e7\u00e3o"},{"location":"_Js/02_Arrays/#recursos-complementares","text":"MDN - Array Methods JavaScript.info - Objetos","title":"Recursos Complementares:"},{"location":"_Js/03_Dom/","text":"03 - DOM e Manipula\u00e7\u00e3o de HTML com JavaScript Objetivo: Aprender a interagir com elementos HTML usando JavaScript, manipular eventos e criar dinamicamente conte\u00fado na p\u00e1gina. 1. Introdu\u00e7\u00e3o ao DOM O que \u00e9 o DOM? DOM (Document Object Model): Representa\u00e7\u00e3o estruturada do HTML como uma \u00e1rvore de objetos. Como o JavaScript interage com o DOM? Acessa, modifica e remove elementos. Reage a eventos (cliques, teclas, formul\u00e1rios). Selecionando Elementos M\u00e9todos cl\u00e1ssicos: document.getElementById(\"meuId\"); // Retorna um \u00fanico elemento document.getElementsByClassName(\"classe\"); // Retorna uma HTMLCollection document.getElementsByTagName(\"div\"); // Retorna uma HTMLCollection M\u00e9todos modernos (querySelector): document.querySelector(\"#meuId\"); // Retorna o PRIMEIRO elemento que corresponde document.querySelectorAll(\".classe\"); // Retorna uma NodeList (todos os elementos) Pr\u00e1tica Guiada: Criar uma p\u00e1gina HTML com: <h1 id=\"titulo\">Ol\u00e1, DOM!</h1> <p class=\"texto\">Texto 1</p> <p class=\"texto\">Texto 2</p> No console: const titulo = document.querySelector(\"#titulo\"); titulo.textContent = \"Novo T\u00edtulo!\"; const textos = document.querySelectorAll(\".texto\"); textos.forEach(texto => texto.style.color = \"blue\"); 2. Modificando Elementos Propriedades e M\u00e9todos \u00dateis: Propriedade/M\u00e9todo Descri\u00e7\u00e3o Exemplo textContent Altera o texto interno elemento.textContent = \"Novo texto\" innerHTML Permite inserir HTML elemento.innerHTML = \"<strong>Negrito</strong>\" setAttribute() Altera atributos img.setAttribute(\"src\", \"foto.jpg\") style Modifica CSS inline elemento.style.backgroundColor = \"red\" classList Manipula classes CSS elemento.classList.add(\"destaque\") Exerc\u00edcio: Criar um bot\u00e3o em HTML: <button id=\"mudarCor\">Mudar Cor</button> <div id=\"caixa\" style=\"width: 100px; height: 100px; background: yellow;\"></div> No JavaScript: const botao = document.querySelector(\"#mudarCor\"); const caixa = document.querySelector(\"#caixa\"); botao.addEventListener(\"click\", () => { caixa.style.backgroundColor = \"purple\"; }); 3. Eventos Principais Eventos: Evento Descri\u00e7\u00e3o Exemplo click Clique do mouse botao.addEventListener(\"click\", fun\u00e7\u00e3o) submit Envio de formul\u00e1rio form.addEventListener(\"submit\", fun\u00e7\u00e3o) keypress Tecla pressionada input.addEventListener(\"keypress\", fun\u00e7\u00e3o) mouseover Mouse sobre o elemento div.addEventListener(\"mouseover\", fun\u00e7\u00e3o) Pr\u00e1tica: Criar um formul\u00e1rio: <form id=\"meuForm\"> <input type=\"text\" id=\"nome\" placeholder=\"Seu nome\"> <button type=\"submit\">Enviar</button> </form> Validar o formul\u00e1rio: const form = document.querySelector(\"#meuForm\"); form.addEventListener(\"submit\", (event) => { event.preventDefault(); // Evita o recarregamento const nome = document.querySelector(\"#nome\").value; alert(`Nome digitado: ${nome}`); }); 4. Criando e Removendo Elementos M\u00e9todos do DOM: M\u00e9todo Descri\u00e7\u00e3o Exemplo createElement() Cria um novo elemento const div = document.createElement(\"div\") appendChild() Adiciona ao final de um elemento pai pai.appendChild(div) remove() Remove um elemento elemento.remove() Exerc\u00edcio (To-Do List): Estrutura HTML: <input type=\"text\" id=\"tarefa\"> <button id=\"adicionar\">Adicionar</button> <ul id=\"lista\"></ul> JavaScript: const botao = document.querySelector(\"#adicionar\"); const lista = document.querySelector(\"#lista\"); botao.addEventListener(\"click\", () => { const input = document.querySelector(\"#tarefa\"); if (input.value.trim() === \"\") return; // Evita tarefa vazia const li = document.createElement(\"li\"); li.textContent = input.value; lista.appendChild(li); input.value = \"\"; // Limpa o input }); 5. Projeto Final da Aula Desafio: Criar um \"Editor de Perfil\" onde o usu\u00e1rio possa: Digitar um nome e ver a atualiza\u00e7\u00e3o em tempo real ( keyup ). Escolher uma cor para o fundo do perfil. Adicionar uma descri\u00e7\u00e3o via textarea e exibi-la abaixo. Exemplo de Solu\u00e7\u00e3o: <div id=\"perfil\" style=\"border: 1px solid #000; padding: 20px;\"> <h2 id=\"nomePerfil\">Nome</h2> <p id=\"descricao\">Descri\u00e7\u00e3o...</p> </div> <input type=\"text\" id=\"inputNome\" placeholder=\"Seu nome\"> <textarea id=\"inputDescricao\" placeholder=\"Sua descri\u00e7\u00e3o\"></textarea> <input type=\"color\" id=\"corFundo\"> const inputNome = document.querySelector(\"#inputNome\"); const inputDescricao = document.querySelector(\"#inputDescricao\"); const corFundo = document.querySelector(\"#corFundo\"); const perfil = document.querySelector(\"#perfil\"); inputNome.addEventListener(\"keyup\", () => { document.querySelector(\"#nomePerfil\").textContent = inputNome.value; }); inputDescricao.addEventListener(\"keyup\", () => { document.querySelector(\"#descricao\").textContent = inputDescricao.value; }); corFundo.addEventListener(\"input\", () => { perfil.style.backgroundColor = corFundo.value; }); Recursos Complementares: MDN - DOM JavaScript.info - Eventos","title":"03 - DOM e Manipula\u00e7\u00e3o de HTML com JavaScript"},{"location":"_Js/03_Dom/#03-dom-e-manipulacao-de-html-com-javascript","text":"Objetivo: Aprender a interagir com elementos HTML usando JavaScript, manipular eventos e criar dinamicamente conte\u00fado na p\u00e1gina.","title":"03 - DOM e Manipula\u00e7\u00e3o de HTML com JavaScript"},{"location":"_Js/03_Dom/#1-introducao-ao-dom","text":"","title":"1. Introdu\u00e7\u00e3o ao DOM"},{"location":"_Js/03_Dom/#o-que-e-o-dom","text":"DOM (Document Object Model): Representa\u00e7\u00e3o estruturada do HTML como uma \u00e1rvore de objetos. Como o JavaScript interage com o DOM? Acessa, modifica e remove elementos. Reage a eventos (cliques, teclas, formul\u00e1rios).","title":"O que \u00e9 o DOM?"},{"location":"_Js/03_Dom/#selecionando-elementos","text":"M\u00e9todos cl\u00e1ssicos: document.getElementById(\"meuId\"); // Retorna um \u00fanico elemento document.getElementsByClassName(\"classe\"); // Retorna uma HTMLCollection document.getElementsByTagName(\"div\"); // Retorna uma HTMLCollection M\u00e9todos modernos (querySelector): document.querySelector(\"#meuId\"); // Retorna o PRIMEIRO elemento que corresponde document.querySelectorAll(\".classe\"); // Retorna uma NodeList (todos os elementos)","title":"Selecionando Elementos"},{"location":"_Js/03_Dom/#pratica-guiada","text":"Criar uma p\u00e1gina HTML com: <h1 id=\"titulo\">Ol\u00e1, DOM!</h1> <p class=\"texto\">Texto 1</p> <p class=\"texto\">Texto 2</p> No console: const titulo = document.querySelector(\"#titulo\"); titulo.textContent = \"Novo T\u00edtulo!\"; const textos = document.querySelectorAll(\".texto\"); textos.forEach(texto => texto.style.color = \"blue\");","title":"Pr\u00e1tica Guiada:"},{"location":"_Js/03_Dom/#2-modificando-elementos","text":"","title":"2. Modificando Elementos"},{"location":"_Js/03_Dom/#propriedades-e-metodos-uteis","text":"Propriedade/M\u00e9todo Descri\u00e7\u00e3o Exemplo textContent Altera o texto interno elemento.textContent = \"Novo texto\" innerHTML Permite inserir HTML elemento.innerHTML = \"<strong>Negrito</strong>\" setAttribute() Altera atributos img.setAttribute(\"src\", \"foto.jpg\") style Modifica CSS inline elemento.style.backgroundColor = \"red\" classList Manipula classes CSS elemento.classList.add(\"destaque\")","title":"Propriedades e M\u00e9todos \u00dateis:"},{"location":"_Js/03_Dom/#exercicio","text":"Criar um bot\u00e3o em HTML: <button id=\"mudarCor\">Mudar Cor</button> <div id=\"caixa\" style=\"width: 100px; height: 100px; background: yellow;\"></div> No JavaScript: const botao = document.querySelector(\"#mudarCor\"); const caixa = document.querySelector(\"#caixa\"); botao.addEventListener(\"click\", () => { caixa.style.backgroundColor = \"purple\"; });","title":"Exerc\u00edcio:"},{"location":"_Js/03_Dom/#3-eventos","text":"","title":"3. Eventos"},{"location":"_Js/03_Dom/#principais-eventos","text":"Evento Descri\u00e7\u00e3o Exemplo click Clique do mouse botao.addEventListener(\"click\", fun\u00e7\u00e3o) submit Envio de formul\u00e1rio form.addEventListener(\"submit\", fun\u00e7\u00e3o) keypress Tecla pressionada input.addEventListener(\"keypress\", fun\u00e7\u00e3o) mouseover Mouse sobre o elemento div.addEventListener(\"mouseover\", fun\u00e7\u00e3o)","title":"Principais Eventos:"},{"location":"_Js/03_Dom/#pratica","text":"Criar um formul\u00e1rio: <form id=\"meuForm\"> <input type=\"text\" id=\"nome\" placeholder=\"Seu nome\"> <button type=\"submit\">Enviar</button> </form> Validar o formul\u00e1rio: const form = document.querySelector(\"#meuForm\"); form.addEventListener(\"submit\", (event) => { event.preventDefault(); // Evita o recarregamento const nome = document.querySelector(\"#nome\").value; alert(`Nome digitado: ${nome}`); });","title":"Pr\u00e1tica:"},{"location":"_Js/03_Dom/#4-criando-e-removendo-elementos","text":"","title":"4. Criando e Removendo Elementos"},{"location":"_Js/03_Dom/#metodos-do-dom","text":"M\u00e9todo Descri\u00e7\u00e3o Exemplo createElement() Cria um novo elemento const div = document.createElement(\"div\") appendChild() Adiciona ao final de um elemento pai pai.appendChild(div) remove() Remove um elemento elemento.remove()","title":"M\u00e9todos do DOM:"},{"location":"_Js/03_Dom/#exercicio-to-do-list","text":"Estrutura HTML: <input type=\"text\" id=\"tarefa\"> <button id=\"adicionar\">Adicionar</button> <ul id=\"lista\"></ul> JavaScript: const botao = document.querySelector(\"#adicionar\"); const lista = document.querySelector(\"#lista\"); botao.addEventListener(\"click\", () => { const input = document.querySelector(\"#tarefa\"); if (input.value.trim() === \"\") return; // Evita tarefa vazia const li = document.createElement(\"li\"); li.textContent = input.value; lista.appendChild(li); input.value = \"\"; // Limpa o input });","title":"Exerc\u00edcio (To-Do List):"},{"location":"_Js/03_Dom/#5-projeto-final-da-aula","text":"Desafio: Criar um \"Editor de Perfil\" onde o usu\u00e1rio possa: Digitar um nome e ver a atualiza\u00e7\u00e3o em tempo real ( keyup ). Escolher uma cor para o fundo do perfil. Adicionar uma descri\u00e7\u00e3o via textarea e exibi-la abaixo. Exemplo de Solu\u00e7\u00e3o: <div id=\"perfil\" style=\"border: 1px solid #000; padding: 20px;\"> <h2 id=\"nomePerfil\">Nome</h2> <p id=\"descricao\">Descri\u00e7\u00e3o...</p> </div> <input type=\"text\" id=\"inputNome\" placeholder=\"Seu nome\"> <textarea id=\"inputDescricao\" placeholder=\"Sua descri\u00e7\u00e3o\"></textarea> <input type=\"color\" id=\"corFundo\"> const inputNome = document.querySelector(\"#inputNome\"); const inputDescricao = document.querySelector(\"#inputDescricao\"); const corFundo = document.querySelector(\"#corFundo\"); const perfil = document.querySelector(\"#perfil\"); inputNome.addEventListener(\"keyup\", () => { document.querySelector(\"#nomePerfil\").textContent = inputNome.value; }); inputDescricao.addEventListener(\"keyup\", () => { document.querySelector(\"#descricao\").textContent = inputDescricao.value; }); corFundo.addEventListener(\"input\", () => { perfil.style.backgroundColor = corFundo.value; });","title":"5. Projeto Final da Aula"},{"location":"_Js/03_Dom/#recursos-complementares","text":"MDN - DOM JavaScript.info - Eventos","title":"Recursos Complementares:"},{"location":"_Js/04_Forms/","text":"04 - Valida\u00e7\u00e3o de Formul\u00e1rios Site simples em HTML e CSS com valida\u00e7\u00e3o de formul\u00e1rio usando JavaScript: Estrutura 1. index.html (HTML) <!DOCTYPE html> <html lang=\"en\"> <head> <meta charset=\"UTF-8\"> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"> <title>Form Validation Example</title> <link rel=\"stylesheet\" href=\"css/style.css\"> </head> <body> <div class=\"container\"> <h2>Sign Up</h2> <form id=\"signupForm\" onsubmit=\"return validateForm()\"> <label for=\"name\">Name:</label> <input type=\"text\" id=\"name\" name=\"name\" required> <label for=\"email\">Email:</label> <input type=\"email\" id=\"email\" name=\"email\" required> <label for=\"password\">Password:</label> <input type=\"password\" id=\"password\" name=\"password\" required> <label for=\"confirmPassword\">Confirm Password:</label> <input type=\"password\" id=\"confirmPassword\" name=\"confirmPassword\" required> <button type=\"submit\">Submit</button> <p id=\"error-message\"></p> </form> </div> <script src=\"js/validation.js\"></script> </body> </html> 2. style.css (CSS) * { margin: 0; padding: 0; box-sizing: border-box; } body { font-family: Arial, sans-serif; background-color: #f4f4f4; } .container { max-width: 500px; margin: 50px auto; background: white; padding: 20px; border-radius: 8px; box-shadow: 0 0 10px rgba(0, 0, 0, 0.1); } h2 { text-align: center; margin-bottom: 20px; } form { display: flex; flex-direction: column; } label { margin-bottom: 5px; } input { margin-bottom: 15px; padding: 10px; border: 1px solid #ccc; border-radius: 4px; } button { padding: 10px; background-color: #28a745; color: white; border: none; border-radius: 4px; cursor: pointer; } button:hover { background-color: #218838; } #error-message { color: red; text-align: center; margin-top: 10px; } 3. validation.js (JavaScript) function validateForm() { let name = document.getElementById(\"name\").value; let email = document.getElementById(\"email\").value; let password = document.getElementById(\"password\").value; let confirmPassword = document.getElementById(\"confirmPassword\").value; let errorMessage = document.getElementById(\"error-message\"); // Reset error message errorMessage.textContent = \"\"; // Basic validation checks if (name === \"\") { errorMessage.textContent = \"Name is required\"; return false; } if (!validateEmail(email)) { errorMessage.textContent = \"Invalid email address\"; return false; } if (password.length < 6) { errorMessage.textContent = \"Password must be at least 6 characters long\"; return false; } if (password !== confirmPassword) { errorMessage.textContent = \"Passwords do not match\"; return false; } return true; } // Email validation function function validateEmail(email) { const re = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/; return re.test(String(email).toLowerCase()); } Funcionamento: HTML : O formul\u00e1rio possui campos de nome, e-mail, senha e confirma\u00e7\u00e3o de senha. CSS : Aplica um estilo simples para o layout e elementos. JavaScript : A fun\u00e7\u00e3o validateForm() valida os campos antes de permitir o envio do formul\u00e1rio. Verifica se o nome est\u00e1 preenchido, se o e-mail \u00e9 v\u00e1lido, se a senha tem pelo menos 6 caracteres, e se as senhas coincidem.","title":"04 - Valida\u00e7\u00e3o de Formul\u00e1rios"},{"location":"_Js/04_Forms/#04-validacao-de-formularios","text":"Site simples em HTML e CSS com valida\u00e7\u00e3o de formul\u00e1rio usando JavaScript:","title":"04 - Valida\u00e7\u00e3o de Formul\u00e1rios"},{"location":"_Js/04_Forms/#estrutura","text":"","title":"Estrutura"},{"location":"_Js/04_Forms/#1-indexhtml-html","text":"<!DOCTYPE html> <html lang=\"en\"> <head> <meta charset=\"UTF-8\"> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"> <title>Form Validation Example</title> <link rel=\"stylesheet\" href=\"css/style.css\"> </head> <body> <div class=\"container\"> <h2>Sign Up</h2> <form id=\"signupForm\" onsubmit=\"return validateForm()\"> <label for=\"name\">Name:</label> <input type=\"text\" id=\"name\" name=\"name\" required> <label for=\"email\">Email:</label> <input type=\"email\" id=\"email\" name=\"email\" required> <label for=\"password\">Password:</label> <input type=\"password\" id=\"password\" name=\"password\" required> <label for=\"confirmPassword\">Confirm Password:</label> <input type=\"password\" id=\"confirmPassword\" name=\"confirmPassword\" required> <button type=\"submit\">Submit</button> <p id=\"error-message\"></p> </form> </div> <script src=\"js/validation.js\"></script> </body> </html>","title":"1. index.html (HTML)"},{"location":"_Js/04_Forms/#2-stylecss-css","text":"* { margin: 0; padding: 0; box-sizing: border-box; } body { font-family: Arial, sans-serif; background-color: #f4f4f4; } .container { max-width: 500px; margin: 50px auto; background: white; padding: 20px; border-radius: 8px; box-shadow: 0 0 10px rgba(0, 0, 0, 0.1); } h2 { text-align: center; margin-bottom: 20px; } form { display: flex; flex-direction: column; } label { margin-bottom: 5px; } input { margin-bottom: 15px; padding: 10px; border: 1px solid #ccc; border-radius: 4px; } button { padding: 10px; background-color: #28a745; color: white; border: none; border-radius: 4px; cursor: pointer; } button:hover { background-color: #218838; } #error-message { color: red; text-align: center; margin-top: 10px; }","title":"2. style.css (CSS)"},{"location":"_Js/04_Forms/#3-validationjs-javascript","text":"function validateForm() { let name = document.getElementById(\"name\").value; let email = document.getElementById(\"email\").value; let password = document.getElementById(\"password\").value; let confirmPassword = document.getElementById(\"confirmPassword\").value; let errorMessage = document.getElementById(\"error-message\"); // Reset error message errorMessage.textContent = \"\"; // Basic validation checks if (name === \"\") { errorMessage.textContent = \"Name is required\"; return false; } if (!validateEmail(email)) { errorMessage.textContent = \"Invalid email address\"; return false; } if (password.length < 6) { errorMessage.textContent = \"Password must be at least 6 characters long\"; return false; } if (password !== confirmPassword) { errorMessage.textContent = \"Passwords do not match\"; return false; } return true; } // Email validation function function validateEmail(email) { const re = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/; return re.test(String(email).toLowerCase()); }","title":"3. validation.js (JavaScript)"},{"location":"_Js/04_Forms/#funcionamento","text":"HTML : O formul\u00e1rio possui campos de nome, e-mail, senha e confirma\u00e7\u00e3o de senha. CSS : Aplica um estilo simples para o layout e elementos. JavaScript : A fun\u00e7\u00e3o validateForm() valida os campos antes de permitir o envio do formul\u00e1rio. Verifica se o nome est\u00e1 preenchido, se o e-mail \u00e9 v\u00e1lido, se a senha tem pelo menos 6 caracteres, e se as senhas coincidem.","title":"Funcionamento:"},{"location":"_Js/05_Http/","text":"05 - Http 1. Introdu\u00e7\u00e3o ao Protocolo HTTP HTTP: A Base da Comunica\u00e7\u00e3o na Web HTTP \u00e9 a sigla para Hypertext Transfer Protocol ou, em portugu\u00eas, Protocolo de Transfer\u00eancia de Hipertexto . \u00c9 o protocolo fundamental que permite a comunica\u00e7\u00e3o entre navegadores web (como o Chrome, Firefox, Safari) e servidores web (onde est\u00e3o hospedados os sites). Em resumo, o HTTP \u00e9 como a linguagem que seu navegador e os servidores da internet usam para \"conversar\" e mostrar as p\u00e1ginas que voc\u00ea visita. Como funciona? Voc\u00ea digita um endere\u00e7o (URL) na barra de endere\u00e7os do seu navegador. Seu navegador envia uma solicita\u00e7\u00e3o HTTP para o servidor onde est\u00e1 hospedado o site. O servidor processa a solicita\u00e7\u00e3o e envia uma resposta HTTP com o conte\u00fado da p\u00e1gina. Seu navegador recebe a resposta e exibe a p\u00e1gina na sua tela. Imagine o HTTP como um gar\u00e7om em um restaurante: voc\u00ea faz um pedido (a solicita\u00e7\u00e3o HTTP), o gar\u00e7om leva o pedido para a cozinha (o servidor), a cozinha prepara o prato (processa a solicita\u00e7\u00e3o) e o gar\u00e7om traz o prato para voc\u00ea (a resposta HTTP). Por que o HTTP \u00e9 importante? *Base da World Wide Web (WWW): \u00c9 o protocolo que permite a exist\u00eancia da internet como a conhecemos, com p\u00e1ginas interligadas por links. *Facilita a navega\u00e7\u00e3o: Permite que voc\u00ea navegue entre diferentes p\u00e1ginas de um site e de diferentes sites com facilidade. *Transfere diversos tipos de dados: N\u00e3o se limita a texto, mas tamb\u00e9m permite a transfer\u00eancia de imagens, v\u00eddeos, arquivos e outros tipos de dados. HTTP vs. HTTPS \u00c9 comum confundir HTTP com HTTPS. A principal diferen\u00e7a \u00e9 que o HTTPS \u00e9 uma vers\u00e3o segura do HTTP. Ele utiliza criptografia para proteger a comunica\u00e7\u00e3o entre o seu navegador e o servidor, garantindo a privacidade e a integridade dos dados transmitidos. Por isso, \u00e9 altamente recomendado acessar sites que utilizam HTTPS, especialmente aqueles que envolvem transa\u00e7\u00f5es financeiras ou informa\u00e7\u00f5es pessoais. Em resumo, o HTTP \u00e9 o protocolo que torna a internet poss\u00edvel, permitindo que voc\u00ea acesse e interaja com milh\u00f5es de sites ao redor do mundo. Gostaria de saber mais sobre algum aspecto espec\u00edfico do HTTP? Por exemplo, voc\u00ea pode me perguntar sobre: *M\u00e9todos HTTP: GET, POST, PUT, DELETE e outros. *Cabe\u00e7alhos HTTP: informa\u00e7\u00f5es adicionais que acompanham as solicita\u00e7\u00f5es e respostas. *C\u00f3digos de status HTTP: como 200 (OK), 404 (N\u00e3o encontrado) e 500 (Erro interno do servidor). *Diferen\u00e7as entre HTTP e HTTPS. Se tiver alguma outra d\u00favida, fique \u00e0 vontade para perguntar! 2. M\u00e9todos HTTP - GET : Usado para solicitar dados de um servidor. N\u00e3o altera o estado do servidor (idempotente). - Exemplo: acessar uma p\u00e1gina da web ou recuperar uma lista de produtos. ```http GET /produtos HTTP/1.1 Host: www.exemplo.com ``` - POST : Envia dados ao servidor para criar ou modificar um recurso. - Exemplo: enviar um formul\u00e1rio de cadastro. ```http POST /cadastro HTTP/1.1 Host: www.exemplo.com Content-Type: application/json { \"nome\": \"Jo\u00e3o\", \"email\": \"joao@example.com\" } ``` PUT : Envia dados para substituir um recurso existente no servidor. Exemplo: atualizar o perfil de um usu\u00e1rio. - PATCH : Semelhante ao PUT , mas usado para modifica\u00e7\u00f5es parciais de um recurso. DELETE : Remove um recurso do servidor. Exemplo: excluir uma conta de usu\u00e1rio. HEAD : Igual ao GET , mas sem o corpo da resposta. Usado para verificar se o recurso existe ou para recuperar metadados. OPTIONS : Pergunta ao servidor quais m\u00e9todos e op\u00e7\u00f5es s\u00e3o suportados para um determinado recurso. TRACE : Usado para diagn\u00f3stico, retorna o conte\u00fado exato da requisi\u00e7\u00e3o recebida pelo servidor. Atividade pr\u00e1tica : Utilize uma ferramenta como o Postman ou curl para testar os m\u00e9todos HTTP. 3. Status HTTP Os c\u00f3digos de status HTTP indicam o resultado de uma requisi\u00e7\u00e3o. Eles s\u00e3o divididos em cinco categorias: 1xx \u2013 Informacional Indicam que a requisi\u00e7\u00e3o foi recebida e est\u00e1 sendo processada. 100 Continue : O servidor est\u00e1 pronto para receber o corpo da requisi\u00e7\u00e3o. 2xx \u2013 Sucesso Indicam que a requisi\u00e7\u00e3o foi bem-sucedida. 200 OK : A requisi\u00e7\u00e3o foi bem-sucedida. 201 Created : Um novo recurso foi criado (geralmente ap\u00f3s um POST ). 204 No Content : A requisi\u00e7\u00e3o foi bem-sucedida, mas n\u00e3o h\u00e1 conte\u00fado para retornar. 3xx \u2013 Redirecionamento Indicam que o cliente precisa realizar uma a\u00e7\u00e3o adicional para completar a requisi\u00e7\u00e3o. 301 Moved Permanently : O recurso foi movido permanentemente para uma nova URL. 302 Found : O recurso foi temporariamente movido para outra URL. 4xx \u2013 Erro do Cliente Indicam que houve um erro por parte do cliente. 400 Bad Request : A requisi\u00e7\u00e3o est\u00e1 malformada ou inv\u00e1lida. 401 Unauthorized : Acesso negado, geralmente por falta de autentica\u00e7\u00e3o. 403 Forbidden : Acesso negado, mesmo com autentica\u00e7\u00e3o. 404 Not Found : O recurso solicitado n\u00e3o foi encontrado no servidor. 5xx \u2013 Erro do Servidor Indicam que o servidor encontrou um erro ao tentar processar a requisi\u00e7\u00e3o. 500 Internal Server Error : Um erro gen\u00e9rico no servidor. 502 Bad Gateway : O servidor recebeu uma resposta inv\u00e1lida de outro servidor. 503 Service Unavailable : O servidor est\u00e1 temporariamente indispon\u00edvel (sobrecarga ou manuten\u00e7\u00e3o). 4. Exemplo Pr\u00e1tico de Requisi\u00e7\u00e3o HTTP Montar uma requisi\u00e7\u00e3o GET e uma POST usando JavaScript com o fetch . Mostrar a diferen\u00e7a entre os m\u00e9todos e como lidar com os diferentes status HTTP retornados. ```javascript fetch('https://api.exemplo.com/recurso') .then(response=>{ if (!response.ok) { thrownewError(`Erro: ${response.status}`); } return response.json(); }) .then(data=> console.log(data)) .catch(error=> console.error(error)); ```","title":"05 - Http"},{"location":"_Js/05_Http/#05-http","text":"","title":"05 - Http"},{"location":"_Js/05_Http/#1-introducao-ao-protocolo-http","text":"","title":"1. Introdu\u00e7\u00e3o ao Protocolo HTTP"},{"location":"_Js/05_Http/#http-a-base-da-comunicacao-na-web","text":"HTTP \u00e9 a sigla para Hypertext Transfer Protocol ou, em portugu\u00eas, Protocolo de Transfer\u00eancia de Hipertexto . \u00c9 o protocolo fundamental que permite a comunica\u00e7\u00e3o entre navegadores web (como o Chrome, Firefox, Safari) e servidores web (onde est\u00e3o hospedados os sites). Em resumo, o HTTP \u00e9 como a linguagem que seu navegador e os servidores da internet usam para \"conversar\" e mostrar as p\u00e1ginas que voc\u00ea visita.","title":"HTTP: A Base da Comunica\u00e7\u00e3o na Web"},{"location":"_Js/05_Http/#como-funciona","text":"Voc\u00ea digita um endere\u00e7o (URL) na barra de endere\u00e7os do seu navegador. Seu navegador envia uma solicita\u00e7\u00e3o HTTP para o servidor onde est\u00e1 hospedado o site. O servidor processa a solicita\u00e7\u00e3o e envia uma resposta HTTP com o conte\u00fado da p\u00e1gina. Seu navegador recebe a resposta e exibe a p\u00e1gina na sua tela. Imagine o HTTP como um gar\u00e7om em um restaurante: voc\u00ea faz um pedido (a solicita\u00e7\u00e3o HTTP), o gar\u00e7om leva o pedido para a cozinha (o servidor), a cozinha prepara o prato (processa a solicita\u00e7\u00e3o) e o gar\u00e7om traz o prato para voc\u00ea (a resposta HTTP).","title":"Como funciona?"},{"location":"_Js/05_Http/#por-que-o-http-e-importante","text":"*Base da World Wide Web (WWW): \u00c9 o protocolo que permite a exist\u00eancia da internet como a conhecemos, com p\u00e1ginas interligadas por links. *Facilita a navega\u00e7\u00e3o: Permite que voc\u00ea navegue entre diferentes p\u00e1ginas de um site e de diferentes sites com facilidade. *Transfere diversos tipos de dados: N\u00e3o se limita a texto, mas tamb\u00e9m permite a transfer\u00eancia de imagens, v\u00eddeos, arquivos e outros tipos de dados.","title":"Por que o HTTP \u00e9 importante?"},{"location":"_Js/05_Http/#http-vs-https","text":"\u00c9 comum confundir HTTP com HTTPS. A principal diferen\u00e7a \u00e9 que o HTTPS \u00e9 uma vers\u00e3o segura do HTTP. Ele utiliza criptografia para proteger a comunica\u00e7\u00e3o entre o seu navegador e o servidor, garantindo a privacidade e a integridade dos dados transmitidos. Por isso, \u00e9 altamente recomendado acessar sites que utilizam HTTPS, especialmente aqueles que envolvem transa\u00e7\u00f5es financeiras ou informa\u00e7\u00f5es pessoais. Em resumo, o HTTP \u00e9 o protocolo que torna a internet poss\u00edvel, permitindo que voc\u00ea acesse e interaja com milh\u00f5es de sites ao redor do mundo. Gostaria de saber mais sobre algum aspecto espec\u00edfico do HTTP? Por exemplo, voc\u00ea pode me perguntar sobre: *M\u00e9todos HTTP: GET, POST, PUT, DELETE e outros. *Cabe\u00e7alhos HTTP: informa\u00e7\u00f5es adicionais que acompanham as solicita\u00e7\u00f5es e respostas. *C\u00f3digos de status HTTP: como 200 (OK), 404 (N\u00e3o encontrado) e 500 (Erro interno do servidor). *Diferen\u00e7as entre HTTP e HTTPS. Se tiver alguma outra d\u00favida, fique \u00e0 vontade para perguntar!","title":"HTTP vs. HTTPS"},{"location":"_Js/05_Http/#2-metodos-http","text":"- GET : Usado para solicitar dados de um servidor. N\u00e3o altera o estado do servidor (idempotente). - Exemplo: acessar uma p\u00e1gina da web ou recuperar uma lista de produtos. ```http GET /produtos HTTP/1.1 Host: www.exemplo.com ``` - POST : Envia dados ao servidor para criar ou modificar um recurso. - Exemplo: enviar um formul\u00e1rio de cadastro. ```http POST /cadastro HTTP/1.1 Host: www.exemplo.com Content-Type: application/json { \"nome\": \"Jo\u00e3o\", \"email\": \"joao@example.com\" } ``` PUT : Envia dados para substituir um recurso existente no servidor. Exemplo: atualizar o perfil de um usu\u00e1rio. - PATCH : Semelhante ao PUT , mas usado para modifica\u00e7\u00f5es parciais de um recurso. DELETE : Remove um recurso do servidor. Exemplo: excluir uma conta de usu\u00e1rio. HEAD : Igual ao GET , mas sem o corpo da resposta. Usado para verificar se o recurso existe ou para recuperar metadados. OPTIONS : Pergunta ao servidor quais m\u00e9todos e op\u00e7\u00f5es s\u00e3o suportados para um determinado recurso. TRACE : Usado para diagn\u00f3stico, retorna o conte\u00fado exato da requisi\u00e7\u00e3o recebida pelo servidor. Atividade pr\u00e1tica : Utilize uma ferramenta como o Postman ou curl para testar os m\u00e9todos HTTP.","title":"2. M\u00e9todos HTTP"},{"location":"_Js/05_Http/#3-status-http","text":"Os c\u00f3digos de status HTTP indicam o resultado de uma requisi\u00e7\u00e3o. Eles s\u00e3o divididos em cinco categorias:","title":"3. Status HTTP"},{"location":"_Js/05_Http/#1xx-informacional","text":"Indicam que a requisi\u00e7\u00e3o foi recebida e est\u00e1 sendo processada. 100 Continue : O servidor est\u00e1 pronto para receber o corpo da requisi\u00e7\u00e3o.","title":"1xx \u2013 Informacional"},{"location":"_Js/05_Http/#2xx-sucesso","text":"Indicam que a requisi\u00e7\u00e3o foi bem-sucedida. 200 OK : A requisi\u00e7\u00e3o foi bem-sucedida. 201 Created : Um novo recurso foi criado (geralmente ap\u00f3s um POST ). 204 No Content : A requisi\u00e7\u00e3o foi bem-sucedida, mas n\u00e3o h\u00e1 conte\u00fado para retornar.","title":"2xx \u2013 Sucesso"},{"location":"_Js/05_Http/#3xx-redirecionamento","text":"Indicam que o cliente precisa realizar uma a\u00e7\u00e3o adicional para completar a requisi\u00e7\u00e3o. 301 Moved Permanently : O recurso foi movido permanentemente para uma nova URL. 302 Found : O recurso foi temporariamente movido para outra URL.","title":"3xx \u2013 Redirecionamento"},{"location":"_Js/05_Http/#4xx-erro-do-cliente","text":"Indicam que houve um erro por parte do cliente. 400 Bad Request : A requisi\u00e7\u00e3o est\u00e1 malformada ou inv\u00e1lida. 401 Unauthorized : Acesso negado, geralmente por falta de autentica\u00e7\u00e3o. 403 Forbidden : Acesso negado, mesmo com autentica\u00e7\u00e3o. 404 Not Found : O recurso solicitado n\u00e3o foi encontrado no servidor.","title":"4xx \u2013 Erro do Cliente"},{"location":"_Js/05_Http/#5xx-erro-do-servidor","text":"Indicam que o servidor encontrou um erro ao tentar processar a requisi\u00e7\u00e3o. 500 Internal Server Error : Um erro gen\u00e9rico no servidor. 502 Bad Gateway : O servidor recebeu uma resposta inv\u00e1lida de outro servidor. 503 Service Unavailable : O servidor est\u00e1 temporariamente indispon\u00edvel (sobrecarga ou manuten\u00e7\u00e3o).","title":"5xx \u2013 Erro do Servidor"},{"location":"_Js/05_Http/#4-exemplo-pratico-de-requisicao-http","text":"Montar uma requisi\u00e7\u00e3o GET e uma POST usando JavaScript com o fetch . Mostrar a diferen\u00e7a entre os m\u00e9todos e como lidar com os diferentes status HTTP retornados. ```javascript fetch('https://api.exemplo.com/recurso') .then(response=>{ if (!response.ok) { thrownewError(`Erro: ${response.status}`); } return response.json(); }) .then(data=> console.log(data)) .catch(error=> console.error(error)); ```","title":"4. Exemplo Pr\u00e1tico de Requisi\u00e7\u00e3o HTTP"},{"location":"_Js/06_Json/","text":"06 - JavaScript JSON Introdu\u00e7\u00e3o JSON \u00e9 um formato para armazenar e transportar dados. O JSON \u00e9 frequentemente usado quando os dados s\u00e3o enviados de um servidor para uma web p\u00e1gina. O que \u00e9 JSON? JSON significa JavaScript Object Notation JSON \u00e9 um formato leve de interc\u00e2mbio de dados JSON \u00e9 independente de idioma * JSON \u00e9 \"autodescritivo\" e f\u00e1cil de entender A sintaxe JSON \u00e9 derivada da sintaxe de nota\u00e7\u00e3o de objeto JavaScript, mas o formato JSON \u00e9 apenas texto. O c\u00f3digo para leitura e gera\u00e7\u00e3o de dados JSON pode ser escrito em qualquer programa\u00e7\u00e3o Idioma. Exemplo de JSON Essa sintaxe JSON define um objeto employees: uma matriz de 3 registros de funcion\u00e1rios (objetos): { \"employees\":[ {\"firstName\":\"John\", \"lastName\":\"Doe\"}, {\"firstName\":\"Anna\", \"lastName\":\"Smith\"}, {\"firstName\":\"Peter\", \"lastName\":\"Jones\"} ] } O formato JSON \u00e9 avaliado como objetos JavaScript O formato JSON \u00e9 sintaticamente id\u00eantico ao c\u00f3digo para criar Objetos JavaScript. Devido a essa semelhan\u00e7a, um programa JavaScript pode facilmente converter dados JSON em nativos Objetos JavaScript. Regras de sintaxe JSON Os dados est\u00e3o em pares de nome/valor Os dados s\u00e3o separados por v\u00edrgulas Chaves seguram objetos Os colchetes cont\u00eam matrizes Dados JSON - Um nome e um valor Os dados JSON s\u00e3o gravados como pares de nome/valor, assim como o objeto JavaScript Propriedades. Um par nome/valor consiste em um nome de campo (entre aspas duplas), seguido por dois pontos, seguido por um valor: \"firstName\":\"John\" Os nomes JSON exigem aspas duplas. Nomes JavaScript n\u00e3o. Objetos JSON Os objetos JSON s\u00e3o gravados dentro de chaves. Assim como em JavaScript, os objetos podem conter v\u00e1rios pares de nome/valor: {\"firstName\":\"John\", \"lastName\":\"Doe\"} Matrizes JSON As matrizes JSON s\u00e3o escritas entre colchetes. Assim como em JavaScript, um array pode conter objetos: \"employees\":[ {\"firstName\":\"John\", \"lastName\":\"Doe\"}, {\"firstName\":\"Anna\", \"lastName\":\"Smith\"}, {\"firstName\":\"Peter\", \"lastName\":\"Jones\"} ] No exemplo acima, o objeto \"funcion\u00e1rios\" \u00e9 uma matriz. Ele cont\u00e9m tr\u00eas Objetos. Cada objeto \u00e9 um registro de uma pessoa (com um nome e um sobrenome). Convertendo um texto JSON em um objeto JavaScript Um uso comum do JSON \u00e9 ler dados de um servidor web, e exibir os dados em uma p\u00e1gina da web. Para simplificar, isso pode ser demonstrado usando uma string como entrada. Primeiro, crie uma string JavaScript contendo a sintaxe JSON: let text = '{ \"employees\" : [' + '{ \"firstName\":\"John\" , \"lastName\":\"Doe\" },' + '{ \"firstName\":\"Anna\" , \"lastName\":\"Smith\" },' + '{ \"firstName\":\"Peter\" , \"lastName\":\"Jones\" } ]}'; let text = '{ \"employees\" : [' + '{ \"firstName\":\"John\" , \"lastName\":\"Doe\" },' + '{ \"firstName\":\"Anna\" , \"lastName\":\"Smith\" },' + '{ \"firstName\":\"Peter\" , \"lastName\":\"Jones\" } ]}'; Em seguida, use a fun\u00e7\u00e3o interna do JavaScript para converter a string em um objeto JavaScript:JSON.parse() const obj = JSON.parse(text); Por fim, use o novo objeto JavaScript em sua p\u00e1gina: <p id=\"demo\"></p> <script> document.getElementById(\"demo\").innerHTML = obj.employees[1].firstName + \" \" + obj.employees[1].lastName; </script> const obj = JSON.parse(text); obj.employees[1].firstName + \" \" + obj.employees[1].lastName;","title":"06 - JavaScript JSON"},{"location":"_Js/06_Json/#06-javascript-json","text":"","title":"06 - JavaScript JSON"},{"location":"_Js/06_Json/#introducao","text":"JSON \u00e9 um formato para armazenar e transportar dados. O JSON \u00e9 frequentemente usado quando os dados s\u00e3o enviados de um servidor para uma web p\u00e1gina.","title":"Introdu\u00e7\u00e3o"},{"location":"_Js/06_Json/#o-que-e-json","text":"JSON significa JavaScript Object Notation JSON \u00e9 um formato leve de interc\u00e2mbio de dados JSON \u00e9 independente de idioma * JSON \u00e9 \"autodescritivo\" e f\u00e1cil de entender A sintaxe JSON \u00e9 derivada da sintaxe de nota\u00e7\u00e3o de objeto JavaScript, mas o formato JSON \u00e9 apenas texto. O c\u00f3digo para leitura e gera\u00e7\u00e3o de dados JSON pode ser escrito em qualquer programa\u00e7\u00e3o Idioma.","title":"O que \u00e9 JSON?"},{"location":"_Js/06_Json/#exemplo-de-json","text":"Essa sintaxe JSON define um objeto employees: uma matriz de 3 registros de funcion\u00e1rios (objetos): { \"employees\":[ {\"firstName\":\"John\", \"lastName\":\"Doe\"}, {\"firstName\":\"Anna\", \"lastName\":\"Smith\"}, {\"firstName\":\"Peter\", \"lastName\":\"Jones\"} ] } O formato JSON \u00e9 avaliado como objetos JavaScript O formato JSON \u00e9 sintaticamente id\u00eantico ao c\u00f3digo para criar Objetos JavaScript. Devido a essa semelhan\u00e7a, um programa JavaScript pode facilmente converter dados JSON em nativos Objetos JavaScript.","title":"Exemplo de JSON"},{"location":"_Js/06_Json/#regras-de-sintaxe-json","text":"Os dados est\u00e3o em pares de nome/valor Os dados s\u00e3o separados por v\u00edrgulas Chaves seguram objetos Os colchetes cont\u00eam matrizes","title":"Regras de sintaxe JSON"},{"location":"_Js/06_Json/#dados-json-um-nome-e-um-valor","text":"Os dados JSON s\u00e3o gravados como pares de nome/valor, assim como o objeto JavaScript Propriedades. Um par nome/valor consiste em um nome de campo (entre aspas duplas), seguido por dois pontos, seguido por um valor: \"firstName\":\"John\" Os nomes JSON exigem aspas duplas. Nomes JavaScript n\u00e3o.","title":"Dados JSON - Um nome e um valor"},{"location":"_Js/06_Json/#objetos-json","text":"Os objetos JSON s\u00e3o gravados dentro de chaves. Assim como em JavaScript, os objetos podem conter v\u00e1rios pares de nome/valor: {\"firstName\":\"John\", \"lastName\":\"Doe\"}","title":"Objetos JSON"},{"location":"_Js/06_Json/#matrizes-json","text":"As matrizes JSON s\u00e3o escritas entre colchetes. Assim como em JavaScript, um array pode conter objetos: \"employees\":[ {\"firstName\":\"John\", \"lastName\":\"Doe\"}, {\"firstName\":\"Anna\", \"lastName\":\"Smith\"}, {\"firstName\":\"Peter\", \"lastName\":\"Jones\"} ] No exemplo acima, o objeto \"funcion\u00e1rios\" \u00e9 uma matriz. Ele cont\u00e9m tr\u00eas Objetos. Cada objeto \u00e9 um registro de uma pessoa (com um nome e um sobrenome).","title":"Matrizes JSON"},{"location":"_Js/06_Json/#convertendo-um-texto-json-em-um-objeto-javascript","text":"Um uso comum do JSON \u00e9 ler dados de um servidor web, e exibir os dados em uma p\u00e1gina da web. Para simplificar, isso pode ser demonstrado usando uma string como entrada. Primeiro, crie uma string JavaScript contendo a sintaxe JSON: let text = '{ \"employees\" : [' + '{ \"firstName\":\"John\" , \"lastName\":\"Doe\" },' + '{ \"firstName\":\"Anna\" , \"lastName\":\"Smith\" },' + '{ \"firstName\":\"Peter\" , \"lastName\":\"Jones\" } ]}'; let text = '{ \"employees\" : [' + '{ \"firstName\":\"John\" , \"lastName\":\"Doe\" },' + '{ \"firstName\":\"Anna\" , \"lastName\":\"Smith\" },' + '{ \"firstName\":\"Peter\" , \"lastName\":\"Jones\" } ]}'; Em seguida, use a fun\u00e7\u00e3o interna do JavaScript para converter a string em um objeto JavaScript:JSON.parse() const obj = JSON.parse(text); Por fim, use o novo objeto JavaScript em sua p\u00e1gina: <p id=\"demo\"></p> <script> document.getElementById(\"demo\").innerHTML = obj.employees[1].firstName + \" \" + obj.employees[1].lastName; </script> const obj = JSON.parse(text); obj.employees[1].firstName + \" \" + obj.employees[1].lastName;","title":"Convertendo um texto JSON em um objeto JavaScript"},{"location":"_Js/07_Lendo%20Json/","text":"07 - Lendo Json Introdu\u00e7\u00e3o Ler dados em JavaScript pode ser feito de v\u00e1rias formas dependendo da origem dos dados. Vou te mostrar tr\u00eas abordagens comuns: Ler dados de um arquivo JSON local: Para carregar dados JSON armazenados localmente (por exemplo, data.json ), podemos usar fetch() : js fetch('data.json') .then(response => response.json()) .then(data => { console.log(data); // Manipule os dados aqui }) .catch(error => console.error('Erro ao ler dados:', error)); Ler dados de uma API (requisi\u00e7\u00e3o HTTP): Se os dados est\u00e3o em uma API, podemos usar o fetch() da mesma forma: js fetch('https://api.exemplo.com/dados') .then(response => response.json()) .then(data => { console.log(data); // Manipule os dados da API aqui }) .catch(error => console.error('Erro ao obter dados da API:', error)); Ler dados de um arquivo CSV (usando bibliotecas): Para CSV, uma biblioteca como o PapaParse pode ser muito \u00fatil: js Papa.parse('data.csv', { download: true, header: true, complete: function(results) { console.log(results.data); // Manipule os dados CSV aqui } }); Esses m\u00e9todos permitem carregar e manipular dados em tempo real, seja para atualizar uma p\u00e1gina, renderizar informa\u00e7\u00f5es ou armazenar para uso em sess\u00f5es. Para ler e manipular dados armazenados em uma vari\u00e1vel JSON em JavaScript, primeiro \u00e9 importante que o conte\u00fado JSON esteja em um formato v\u00e1lido. Em JavaScript, normalmente, usamos objetos JavaScript (similar ao JSON) para armazenar dados. Aqui est\u00e1 um exemplo b\u00e1sico: Exemplo 1: JSON como Objeto JavaScript Se voc\u00ea j\u00e1 tem os dados armazenados como um objeto JavaScript, pode acessar diretamente os valores com a nota\u00e7\u00e3o de ponto ou colchetes: // Dados JSON armazenados em uma vari\u00e1vel const jsonData = { \"nome\": \"Maria\", \"idade\": 30, \"endereco\": { \"cidade\": \"S\u00e3o Paulo\", \"estado\": \"SP\" } }; // Acessando os dados console.log(jsonData.nome); // Maria console.log(jsonData.idade); // 30 console.log(jsonData.endereco.cidade); // S\u00e3o Paulo Exemplo 2: JSON como String Se os dados JSON est\u00e3o em formato de string, voc\u00ea precisa transform\u00e1-los em um objeto usando JSON.parse() antes de acess\u00e1-los. // Dados JSON como string const jsonString = '{\"nome\": \"Carlos\", \"idade\": 25, \"cidade\": \"Rio de Janeiro\"}'; // Transformando em objeto JavaScript const jsonData = JSON.parse(jsonString); // Acessando os dados console.log(jsonData.nome); // Carlos console.log(jsonData.idade); // 25 Exemplo 3: Convertendo Objeto para String JSON Caso queira fazer o contr\u00e1rio (converter um objeto em uma string JSON), voc\u00ea pode usar JSON.stringify() : const data = { nome: \"Ana\", idade: 28 }; // Convertendo em string JSON const jsonString = JSON.stringify(data); console.log(jsonString); // {\"nome\":\"Ana\",\"idade\":28} Esses m\u00e9todos ajudam a manipular facilmente o JSON dentro do JavaScript, permitindo uma leitura e escrita eficiente dos dados. Criar uma p\u00e1gina Vamos criar uma p\u00e1gina web simples que l\u00ea dados em JSON de v\u00e1rias formas: a partir de uma vari\u00e1vel objeto, de uma string JSON e de um arquivo JSON local. Estrutura do projeto Crie uma pasta com os seguintes arquivos: 1. index.html : o arquivo HTML principal. 2. script.js : o arquivo JavaScript com o c\u00f3digo de leitura dos dados. 3. data.json : o arquivo JSON local com os dados. Passo 1: Criando o arquivo data.json Esse arquivo conter\u00e1 dados JSON b\u00e1sicos para a leitura local. { \"nome\": \"Pedro\", \"idade\": 34, \"endereco\": { \"cidade\": \"Curitiba\", \"estado\": \"PR\" } } Passo 2: Criando o HTML ( index.html ) Aqui est\u00e1 o c\u00f3digo HTML b\u00e1sico que referencia o arquivo script.js e tem se\u00e7\u00f5es para exibir os dados lidos. <!DOCTYPE html> <html lang=\"pt-br\"> <head> <meta charset=\"UTF-8\"> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"> <title>Leitura de Dados JSON</title> </head> <body> <h1>Exemplo de Leitura de Dados JSON</h1> <h2>Dados de um Objeto JavaScript</h2> <pre id=\"fromObject\"></pre> <h2>Dados de uma String JSON</h2> <pre id=\"fromString\"></pre> <h2>Dados de um Arquivo JSON</h2> <pre id=\"fromFile\"></pre> <script src=\"script.js\"></script> </body> </html> Passo 3: Criando o JavaScript ( script.js ) O c\u00f3digo abaixo l\u00ea os dados das tr\u00eas formas descritas: de uma vari\u00e1vel JavaScript, de uma string JSON e de um arquivo JSON. // Exemplo 1: Lendo dados de um objeto JavaScript const jsonDataObject = { \"nome\": \"Maria\", \"idade\": 30, \"endereco\": { \"cidade\": \"S\u00e3o Paulo\", \"estado\": \"SP\" } }; // Exibindo dados no HTML document.getElementById(\"fromObject\").textContent = JSON.stringify(jsonDataObject, null, 2); // Exemplo 2: Lendo dados de uma string JSON const jsonString = '{\"nome\": \"Carlos\", \"idade\": 25, \"cidade\": \"Rio de Janeiro\"}'; const jsonDataFromString = JSON.parse(jsonString); // Exibindo dados no HTML document.getElementById(\"fromString\").textContent = JSON.stringify(jsonDataFromString, null, 2); // Exemplo 3: Lendo dados de um arquivo JSON usando fetch fetch('data.json') .then(response => { if (!response.ok) { throw new Error('Erro ao carregar o arquivo JSON'); } return response.json(); }) .then(data => { // Exibindo dados no HTML document.getElementById(\"fromFile\").textContent = JSON.stringify(data, null, 2); }) .catch(error => { console.error(error); document.getElementById(\"fromFile\").textContent = \"Erro ao carregar os dados do arquivo JSON\"; }); Explica\u00e7\u00e3o do JavaScript Objeto JavaScript : A vari\u00e1vel jsonDataObject cont\u00e9m os dados diretamente em forma de objeto. Usamos JSON.stringify para format\u00e1-lo e exibi-lo no HTML. String JSON : A vari\u00e1vel jsonString cont\u00e9m os dados em formato de string JSON, que \u00e9 transformada em objeto com JSON.parse antes de exibir. Arquivo JSON : Usamos fetch para carregar o arquivo data.json e converter o conte\u00fado em JSON com response.json() . Em caso de erro, ele \u00e9 tratado com .catch . Resultado Ao abrir o arquivo index.html no navegador, voc\u00ea ver\u00e1 tr\u00eas se\u00e7\u00f5es com os dados JSON exibidos de cada uma das formas. Esse exemplo cobre as abordagens de leitura JSON em JavaScript com um visual simples e f\u00e1cil de entender. Lista de Objetos Para adicionar um exemplo em que uma vari\u00e1vel recebe uma lista de v\u00e1rios objetos (array de objetos JSON), podemos estender o exemplo no JavaScript para incluir uma nova vari\u00e1vel que contenha v\u00e1rios objetos. Essa nova vari\u00e1vel ser\u00e1 ent\u00e3o exibida no HTML de forma semelhante \u00e0s anteriores. Passo 4: Atualizando o HTML ( index.html ) Adicione uma nova se\u00e7\u00e3o ao HTML para exibir os dados de v\u00e1rios objetos. <h2>Dados de uma Lista de Objetos JSON</h2> <pre id=\"fromArray\"></pre> Passo 5: Atualizando o JavaScript ( script.js ) Adicione uma nova vari\u00e1vel contendo v\u00e1rios objetos JSON e exiba-a no HTML. // Exemplo 4: Lendo dados de uma lista de objetos JSON const jsonArray = [ { \"nome\": \"Lucas\", \"idade\": 22, \"cidade\": \"Bras\u00edlia\" }, { \"nome\": \"Ana\", \"idade\": 29, \"cidade\": \"Salvador\" }, { \"nome\": \"Pedro\", \"idade\": 35, \"cidade\": \"Recife\" } ]; // Exibindo dados no HTML document.getElementById(\"fromArray\").textContent = JSON.stringify(jsonArray, null, 2); Explica\u00e7\u00e3o do C\u00f3digo Lista de Objetos JSON : A vari\u00e1vel jsonArray armazena uma lista (array) contendo v\u00e1rios objetos JSON. Cada objeto representa uma pessoa com nome , idade e cidade . Exibi\u00e7\u00e3o : Usamos JSON.stringify para formatar a lista de objetos com indenta\u00e7\u00e3o de 2 espa\u00e7os, e o resultado \u00e9 exibido na se\u00e7\u00e3o <pre id=\"fromArray\"> do HTML. Visualiza\u00e7\u00e3o Completa Ao abrir o arquivo index.html , voc\u00ea ver\u00e1 agora quatro se\u00e7\u00f5es: 1. Dados de um Objeto JavaScript. 2. Dados de uma String JSON. 3. Dados de um Arquivo JSON. 4. Dados de uma Lista de Objetos JSON. Essas se\u00e7\u00f5es exibir\u00e3o cada tipo de dado JSON conforme o exemplo.","title":"07 - Lendo Json"},{"location":"_Js/07_Lendo%20Json/#07-lendo-json","text":"","title":"07 - Lendo Json"},{"location":"_Js/07_Lendo%20Json/#introducao","text":"Ler dados em JavaScript pode ser feito de v\u00e1rias formas dependendo da origem dos dados. Vou te mostrar tr\u00eas abordagens comuns: Ler dados de um arquivo JSON local: Para carregar dados JSON armazenados localmente (por exemplo, data.json ), podemos usar fetch() : js fetch('data.json') .then(response => response.json()) .then(data => { console.log(data); // Manipule os dados aqui }) .catch(error => console.error('Erro ao ler dados:', error)); Ler dados de uma API (requisi\u00e7\u00e3o HTTP): Se os dados est\u00e3o em uma API, podemos usar o fetch() da mesma forma: js fetch('https://api.exemplo.com/dados') .then(response => response.json()) .then(data => { console.log(data); // Manipule os dados da API aqui }) .catch(error => console.error('Erro ao obter dados da API:', error)); Ler dados de um arquivo CSV (usando bibliotecas): Para CSV, uma biblioteca como o PapaParse pode ser muito \u00fatil: js Papa.parse('data.csv', { download: true, header: true, complete: function(results) { console.log(results.data); // Manipule os dados CSV aqui } }); Esses m\u00e9todos permitem carregar e manipular dados em tempo real, seja para atualizar uma p\u00e1gina, renderizar informa\u00e7\u00f5es ou armazenar para uso em sess\u00f5es. Para ler e manipular dados armazenados em uma vari\u00e1vel JSON em JavaScript, primeiro \u00e9 importante que o conte\u00fado JSON esteja em um formato v\u00e1lido. Em JavaScript, normalmente, usamos objetos JavaScript (similar ao JSON) para armazenar dados. Aqui est\u00e1 um exemplo b\u00e1sico:","title":"Introdu\u00e7\u00e3o"},{"location":"_Js/07_Lendo%20Json/#exemplo-1-json-como-objeto-javascript","text":"Se voc\u00ea j\u00e1 tem os dados armazenados como um objeto JavaScript, pode acessar diretamente os valores com a nota\u00e7\u00e3o de ponto ou colchetes: // Dados JSON armazenados em uma vari\u00e1vel const jsonData = { \"nome\": \"Maria\", \"idade\": 30, \"endereco\": { \"cidade\": \"S\u00e3o Paulo\", \"estado\": \"SP\" } }; // Acessando os dados console.log(jsonData.nome); // Maria console.log(jsonData.idade); // 30 console.log(jsonData.endereco.cidade); // S\u00e3o Paulo","title":"Exemplo 1: JSON como Objeto JavaScript"},{"location":"_Js/07_Lendo%20Json/#exemplo-2-json-como-string","text":"Se os dados JSON est\u00e3o em formato de string, voc\u00ea precisa transform\u00e1-los em um objeto usando JSON.parse() antes de acess\u00e1-los. // Dados JSON como string const jsonString = '{\"nome\": \"Carlos\", \"idade\": 25, \"cidade\": \"Rio de Janeiro\"}'; // Transformando em objeto JavaScript const jsonData = JSON.parse(jsonString); // Acessando os dados console.log(jsonData.nome); // Carlos console.log(jsonData.idade); // 25","title":"Exemplo 2: JSON como String"},{"location":"_Js/07_Lendo%20Json/#exemplo-3-convertendo-objeto-para-string-json","text":"Caso queira fazer o contr\u00e1rio (converter um objeto em uma string JSON), voc\u00ea pode usar JSON.stringify() : const data = { nome: \"Ana\", idade: 28 }; // Convertendo em string JSON const jsonString = JSON.stringify(data); console.log(jsonString); // {\"nome\":\"Ana\",\"idade\":28} Esses m\u00e9todos ajudam a manipular facilmente o JSON dentro do JavaScript, permitindo uma leitura e escrita eficiente dos dados.","title":"Exemplo 3: Convertendo Objeto para String JSON"},{"location":"_Js/07_Lendo%20Json/#criar-uma-pagina","text":"Vamos criar uma p\u00e1gina web simples que l\u00ea dados em JSON de v\u00e1rias formas: a partir de uma vari\u00e1vel objeto, de uma string JSON e de um arquivo JSON local.","title":"Criar uma p\u00e1gina"},{"location":"_Js/07_Lendo%20Json/#estrutura-do-projeto","text":"Crie uma pasta com os seguintes arquivos: 1. index.html : o arquivo HTML principal. 2. script.js : o arquivo JavaScript com o c\u00f3digo de leitura dos dados. 3. data.json : o arquivo JSON local com os dados.","title":"Estrutura do projeto"},{"location":"_Js/07_Lendo%20Json/#passo-1-criando-o-arquivo-datajson","text":"Esse arquivo conter\u00e1 dados JSON b\u00e1sicos para a leitura local. { \"nome\": \"Pedro\", \"idade\": 34, \"endereco\": { \"cidade\": \"Curitiba\", \"estado\": \"PR\" } }","title":"Passo 1: Criando o arquivo data.json"},{"location":"_Js/07_Lendo%20Json/#passo-2-criando-o-html-indexhtml","text":"Aqui est\u00e1 o c\u00f3digo HTML b\u00e1sico que referencia o arquivo script.js e tem se\u00e7\u00f5es para exibir os dados lidos. <!DOCTYPE html> <html lang=\"pt-br\"> <head> <meta charset=\"UTF-8\"> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"> <title>Leitura de Dados JSON</title> </head> <body> <h1>Exemplo de Leitura de Dados JSON</h1> <h2>Dados de um Objeto JavaScript</h2> <pre id=\"fromObject\"></pre> <h2>Dados de uma String JSON</h2> <pre id=\"fromString\"></pre> <h2>Dados de um Arquivo JSON</h2> <pre id=\"fromFile\"></pre> <script src=\"script.js\"></script> </body> </html>","title":"Passo 2: Criando o HTML (index.html)"},{"location":"_Js/07_Lendo%20Json/#passo-3-criando-o-javascript-scriptjs","text":"O c\u00f3digo abaixo l\u00ea os dados das tr\u00eas formas descritas: de uma vari\u00e1vel JavaScript, de uma string JSON e de um arquivo JSON. // Exemplo 1: Lendo dados de um objeto JavaScript const jsonDataObject = { \"nome\": \"Maria\", \"idade\": 30, \"endereco\": { \"cidade\": \"S\u00e3o Paulo\", \"estado\": \"SP\" } }; // Exibindo dados no HTML document.getElementById(\"fromObject\").textContent = JSON.stringify(jsonDataObject, null, 2); // Exemplo 2: Lendo dados de uma string JSON const jsonString = '{\"nome\": \"Carlos\", \"idade\": 25, \"cidade\": \"Rio de Janeiro\"}'; const jsonDataFromString = JSON.parse(jsonString); // Exibindo dados no HTML document.getElementById(\"fromString\").textContent = JSON.stringify(jsonDataFromString, null, 2); // Exemplo 3: Lendo dados de um arquivo JSON usando fetch fetch('data.json') .then(response => { if (!response.ok) { throw new Error('Erro ao carregar o arquivo JSON'); } return response.json(); }) .then(data => { // Exibindo dados no HTML document.getElementById(\"fromFile\").textContent = JSON.stringify(data, null, 2); }) .catch(error => { console.error(error); document.getElementById(\"fromFile\").textContent = \"Erro ao carregar os dados do arquivo JSON\"; });","title":"Passo 3: Criando o JavaScript (script.js)"},{"location":"_Js/07_Lendo%20Json/#explicacao-do-javascript","text":"Objeto JavaScript : A vari\u00e1vel jsonDataObject cont\u00e9m os dados diretamente em forma de objeto. Usamos JSON.stringify para format\u00e1-lo e exibi-lo no HTML. String JSON : A vari\u00e1vel jsonString cont\u00e9m os dados em formato de string JSON, que \u00e9 transformada em objeto com JSON.parse antes de exibir. Arquivo JSON : Usamos fetch para carregar o arquivo data.json e converter o conte\u00fado em JSON com response.json() . Em caso de erro, ele \u00e9 tratado com .catch .","title":"Explica\u00e7\u00e3o do JavaScript"},{"location":"_Js/07_Lendo%20Json/#resultado","text":"Ao abrir o arquivo index.html no navegador, voc\u00ea ver\u00e1 tr\u00eas se\u00e7\u00f5es com os dados JSON exibidos de cada uma das formas. Esse exemplo cobre as abordagens de leitura JSON em JavaScript com um visual simples e f\u00e1cil de entender.","title":"Resultado"},{"location":"_Js/07_Lendo%20Json/#lista-de-objetos","text":"Para adicionar um exemplo em que uma vari\u00e1vel recebe uma lista de v\u00e1rios objetos (array de objetos JSON), podemos estender o exemplo no JavaScript para incluir uma nova vari\u00e1vel que contenha v\u00e1rios objetos. Essa nova vari\u00e1vel ser\u00e1 ent\u00e3o exibida no HTML de forma semelhante \u00e0s anteriores.","title":"Lista de Objetos"},{"location":"_Js/07_Lendo%20Json/#passo-4-atualizando-o-html-indexhtml","text":"Adicione uma nova se\u00e7\u00e3o ao HTML para exibir os dados de v\u00e1rios objetos. <h2>Dados de uma Lista de Objetos JSON</h2> <pre id=\"fromArray\"></pre>","title":"Passo 4: Atualizando o HTML (index.html)"},{"location":"_Js/07_Lendo%20Json/#passo-5-atualizando-o-javascript-scriptjs","text":"Adicione uma nova vari\u00e1vel contendo v\u00e1rios objetos JSON e exiba-a no HTML. // Exemplo 4: Lendo dados de uma lista de objetos JSON const jsonArray = [ { \"nome\": \"Lucas\", \"idade\": 22, \"cidade\": \"Bras\u00edlia\" }, { \"nome\": \"Ana\", \"idade\": 29, \"cidade\": \"Salvador\" }, { \"nome\": \"Pedro\", \"idade\": 35, \"cidade\": \"Recife\" } ]; // Exibindo dados no HTML document.getElementById(\"fromArray\").textContent = JSON.stringify(jsonArray, null, 2);","title":"Passo 5: Atualizando o JavaScript (script.js)"},{"location":"_Js/07_Lendo%20Json/#explicacao-do-codigo","text":"Lista de Objetos JSON : A vari\u00e1vel jsonArray armazena uma lista (array) contendo v\u00e1rios objetos JSON. Cada objeto representa uma pessoa com nome , idade e cidade . Exibi\u00e7\u00e3o : Usamos JSON.stringify para formatar a lista de objetos com indenta\u00e7\u00e3o de 2 espa\u00e7os, e o resultado \u00e9 exibido na se\u00e7\u00e3o <pre id=\"fromArray\"> do HTML.","title":"Explica\u00e7\u00e3o do C\u00f3digo"},{"location":"_Js/07_Lendo%20Json/#visualizacao-completa","text":"Ao abrir o arquivo index.html , voc\u00ea ver\u00e1 agora quatro se\u00e7\u00f5es: 1. Dados de um Objeto JavaScript. 2. Dados de uma String JSON. 3. Dados de um Arquivo JSON. 4. Dados de uma Lista de Objetos JSON. Essas se\u00e7\u00f5es exibir\u00e3o cada tipo de dado JSON conforme o exemplo.","title":"Visualiza\u00e7\u00e3o Completa"},{"location":"_Js/08_Fetch/","text":"08 - Fetch API Introdu\u00e7\u00e3o ao fetch fetch \u00e9 uma API nativa do JavaScript que permite realizar requisi\u00e7\u00f5es HTTP de forma simples e moderna. Ela \u00e9 usada principalmente para buscar (ou \"fetch\") recursos de um servidor, como dados de uma API, arquivos ou outros tipos de conte\u00fado. O fetch retorna uma Promise , o que significa que ele trabalha de forma ass\u00edncrona, permitindo que o JavaScript continue a executar outras opera\u00e7\u00f5es enquanto a requisi\u00e7\u00e3o est\u00e1 em andamento. Caracter\u00edsticas principais do fetch : Simplicidade : Comparado ao antigo XMLHttpRequest , o fetch possui uma sintaxe muito mais f\u00e1cil de usar. Promessas (Promises) : O fetch retorna uma Promise , o que facilita o tratamento de opera\u00e7\u00f5es ass\u00edncronas. Suporte a m\u00faltiplos m\u00e9todos HTTP : Pode ser usado para diferentes tipos de requisi\u00e7\u00f5es, como GET , POST , PUT , DELETE , etc. Configura\u00e7\u00e3o flex\u00edvel : Permite configurar cabe\u00e7alhos, enviar dados no corpo da requisi\u00e7\u00e3o, e muito mais. Exemplo b\u00e1sico de uso do fetch : fetch('https://api.exemplo.com/dados') .then(response => response.json()) // Converte a resposta para JSON .then(data => console.log(data)) // Exibe os dados no console .catch(error => console.error('Erro:', error)); // Lida com erros Neste exemplo, o fetch faz uma requisi\u00e7\u00e3o GET para a URL fornecida, processa a resposta como JSON, e lida com poss\u00edveis erros. Um exemplo de como usar o fetch com a API do JSONPlaceholder, uma API p\u00fablica para testes e prototipagem: Exemplo de requisi\u00e7\u00e3o GET Neste exemplo, vamos buscar uma lista de posts da API usando o fetch . // Fazendo uma requisi\u00e7\u00e3o GET para obter posts da API JSONPlaceholder fetch('https://jsonplaceholder.typicode.com/posts') .then(response => { if (!response.ok) { throw new Error('Erro na requisi\u00e7\u00e3o: ' + response.status); } return response.json(); // Converte a resposta para JSON }) .then(posts => { console.log(posts); // Exibe os posts no console }) .catch(error => console.error('Erro:', error)); // Lida com erros Exemplo de requisi\u00e7\u00e3o POST Neste exemplo, vamos enviar um novo post para a API com uma requisi\u00e7\u00e3o POST . // Enviando dados para criar um novo post fetch('https://jsonplaceholder.typicode.com/posts', { method: 'POST', headers: { 'Content-Type': 'application/json', }, body: JSON.stringify({ title: 'Meu novo post', body: 'Este \u00e9 o conte\u00fado do post', userId: 1 }), }) .then(response => { if (!response.ok) { throw new Error('Erro na requisi\u00e7\u00e3o: ' + response.status); } return response.json(); // Converte a resposta para JSON }) .then(post => { console.log('Post criado:', post); // Exibe o post criado }) .catch(error => console.error('Erro:', error)); // Lida com erros Explica\u00e7\u00e3o: GET : O primeiro exemplo faz uma requisi\u00e7\u00e3o para obter uma lista de posts, e a resposta \u00e9 convertida para JSON e exibida no console. POST : No segundo exemplo, criamos um novo post com os campos title , body e userId , enviando esses dados como JSON no corpo da requisi\u00e7\u00e3o. A API do JSONPlaceholder \u00e9 \u00f3tima para testes r\u00e1pidos e experimenta\u00e7\u00e3o com fetch .","title":"08 - Fetch API"},{"location":"_Js/08_Fetch/#08-fetch-api","text":"","title":"08 - Fetch API"},{"location":"_Js/08_Fetch/#introducao-ao-fetch","text":"fetch \u00e9 uma API nativa do JavaScript que permite realizar requisi\u00e7\u00f5es HTTP de forma simples e moderna. Ela \u00e9 usada principalmente para buscar (ou \"fetch\") recursos de um servidor, como dados de uma API, arquivos ou outros tipos de conte\u00fado. O fetch retorna uma Promise , o que significa que ele trabalha de forma ass\u00edncrona, permitindo que o JavaScript continue a executar outras opera\u00e7\u00f5es enquanto a requisi\u00e7\u00e3o est\u00e1 em andamento.","title":"Introdu\u00e7\u00e3o ao fetch"},{"location":"_Js/08_Fetch/#caracteristicas-principais-do-fetch","text":"Simplicidade : Comparado ao antigo XMLHttpRequest , o fetch possui uma sintaxe muito mais f\u00e1cil de usar. Promessas (Promises) : O fetch retorna uma Promise , o que facilita o tratamento de opera\u00e7\u00f5es ass\u00edncronas. Suporte a m\u00faltiplos m\u00e9todos HTTP : Pode ser usado para diferentes tipos de requisi\u00e7\u00f5es, como GET , POST , PUT , DELETE , etc. Configura\u00e7\u00e3o flex\u00edvel : Permite configurar cabe\u00e7alhos, enviar dados no corpo da requisi\u00e7\u00e3o, e muito mais.","title":"Caracter\u00edsticas principais do fetch:"},{"location":"_Js/08_Fetch/#exemplo-basico-de-uso-do-fetch","text":"fetch('https://api.exemplo.com/dados') .then(response => response.json()) // Converte a resposta para JSON .then(data => console.log(data)) // Exibe os dados no console .catch(error => console.error('Erro:', error)); // Lida com erros Neste exemplo, o fetch faz uma requisi\u00e7\u00e3o GET para a URL fornecida, processa a resposta como JSON, e lida com poss\u00edveis erros.","title":"Exemplo b\u00e1sico de uso do fetch:"},{"location":"_Js/08_Fetch/#um-exemplo-de-como-usar-o-fetch-com-a-api-do-jsonplaceholder-uma-api-publica-para-testes-e-prototipagem","text":"","title":"Um exemplo de como usar o fetch com a API do JSONPlaceholder, uma API p\u00fablica para testes e prototipagem:"},{"location":"_Js/08_Fetch/#exemplo-de-requisicao-get","text":"Neste exemplo, vamos buscar uma lista de posts da API usando o fetch . // Fazendo uma requisi\u00e7\u00e3o GET para obter posts da API JSONPlaceholder fetch('https://jsonplaceholder.typicode.com/posts') .then(response => { if (!response.ok) { throw new Error('Erro na requisi\u00e7\u00e3o: ' + response.status); } return response.json(); // Converte a resposta para JSON }) .then(posts => { console.log(posts); // Exibe os posts no console }) .catch(error => console.error('Erro:', error)); // Lida com erros","title":"Exemplo de requisi\u00e7\u00e3o GET"},{"location":"_Js/08_Fetch/#exemplo-de-requisicao-post","text":"Neste exemplo, vamos enviar um novo post para a API com uma requisi\u00e7\u00e3o POST . // Enviando dados para criar um novo post fetch('https://jsonplaceholder.typicode.com/posts', { method: 'POST', headers: { 'Content-Type': 'application/json', }, body: JSON.stringify({ title: 'Meu novo post', body: 'Este \u00e9 o conte\u00fado do post', userId: 1 }), }) .then(response => { if (!response.ok) { throw new Error('Erro na requisi\u00e7\u00e3o: ' + response.status); } return response.json(); // Converte a resposta para JSON }) .then(post => { console.log('Post criado:', post); // Exibe o post criado }) .catch(error => console.error('Erro:', error)); // Lida com erros","title":"Exemplo de requisi\u00e7\u00e3o POST"},{"location":"_Js/08_Fetch/#explicacao","text":"GET : O primeiro exemplo faz uma requisi\u00e7\u00e3o para obter uma lista de posts, e a resposta \u00e9 convertida para JSON e exibida no console. POST : No segundo exemplo, criamos um novo post com os campos title , body e userId , enviando esses dados como JSON no corpo da requisi\u00e7\u00e3o. A API do JSONPlaceholder \u00e9 \u00f3tima para testes r\u00e1pidos e experimenta\u00e7\u00e3o com fetch .","title":"Explica\u00e7\u00e3o:"},{"location":"_Js/09_FetchApi/","text":"09 - Consumindo com Fetch API - Um exemplo simples de como consumir uma API usando fetch em JavaScript. Vou usar a API p\u00fablica JSONPlaceholder , que simula dados t\u00edpicos (como posts, coment\u00e1rios, etc.) para desenvolvimento e testes. O exemplo abaixo faz uma requisi\u00e7\u00e3o para a rota /posts dessa API, que retorna uma lista de posts fict\u00edcios. Vamos exibir os t\u00edtulos desses posts em uma lista no HTML. Estrutura do projeto Crie uma pasta com os seguintes arquivos: 1. index.html : o arquivo HTML principal. 2. script.js : o arquivo JavaScript com o c\u00f3digo de consumo da API. Passo 1: Criando o HTML ( index.html ) <!DOCTYPE html> <html lang=\"pt-br\"> <head> <meta charset=\"UTF-8\"> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"> <title>Consumo de API com Fetch</title> </head> <body> <h1>Posts da API JSONPlaceholder</h1> <ul id=\"postsList\"></ul> <script src=\"script.js\"></script> </body> </html> Passo 2: Criando o JavaScript ( script.js ) Aqui est\u00e1 o c\u00f3digo JavaScript que faz a requisi\u00e7\u00e3o \u00e0 API e exibe os dados no HTML. // URL da API const apiUrl = 'https://jsonplaceholder.typicode.com/posts'; // Fun\u00e7\u00e3o para buscar e exibir os posts function fetchPosts() { fetch(apiUrl) .then(response => { if (!response.ok) { throw new Error('Erro ao obter dados da API'); } return response.json(); // Converte a resposta em JSON }) .then(data => { const postsList = document.getElementById('postsList'); // Itera pelos posts e cria itens de lista data.forEach(post => { const listItem = document.createElement('li'); listItem.textContent = post.title; postsList.appendChild(listItem); }); }) .catch(error => { console.error(error); document.getElementById('postsList').textContent = 'Erro ao carregar os posts'; }); } // Chama a fun\u00e7\u00e3o ao carregar a p\u00e1gina fetchPosts(); Explica\u00e7\u00e3o do C\u00f3digo URL da API : A constante apiUrl cont\u00e9m o endpoint da API para obter os posts. Fun\u00e7\u00e3o fetchPosts() : Esta fun\u00e7\u00e3o faz a requisi\u00e7\u00e3o usando fetch : Verifica se a resposta est\u00e1 ok (c\u00f3digo de status 200\u2013299). Em caso de erro, lan\u00e7a uma mensagem de erro. Converte a resposta JSON em um objeto JavaScript com response.json() . Itera pela lista de posts ( data ) e adiciona cada t\u00edtulo como um item ( <li> ) na lista HTML ( <ul id=\"postsList\"> ). Tratamento de Erros : Qualquer erro na requisi\u00e7\u00e3o ou na convers\u00e3o para JSON \u00e9 capturado e exibido no console e na p\u00e1gina. Resultado Ao abrir o index.html no navegador, a p\u00e1gina exibir\u00e1 uma lista com os t\u00edtulos dos posts. Este \u00e9 um exemplo de como consumir dados de uma API com fetch e exibi-los dinamicamente em HTML.","title":"09 - Consumindo com Fetch API -"},{"location":"_Js/09_FetchApi/#09-consumindo-com-fetch-api-","text":"Um exemplo simples de como consumir uma API usando fetch em JavaScript. Vou usar a API p\u00fablica JSONPlaceholder , que simula dados t\u00edpicos (como posts, coment\u00e1rios, etc.) para desenvolvimento e testes. O exemplo abaixo faz uma requisi\u00e7\u00e3o para a rota /posts dessa API, que retorna uma lista de posts fict\u00edcios. Vamos exibir os t\u00edtulos desses posts em uma lista no HTML.","title":"09 - Consumindo com Fetch API -"},{"location":"_Js/09_FetchApi/#estrutura-do-projeto","text":"Crie uma pasta com os seguintes arquivos: 1. index.html : o arquivo HTML principal. 2. script.js : o arquivo JavaScript com o c\u00f3digo de consumo da API.","title":"Estrutura do projeto"},{"location":"_Js/09_FetchApi/#passo-1-criando-o-html-indexhtml","text":"<!DOCTYPE html> <html lang=\"pt-br\"> <head> <meta charset=\"UTF-8\"> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"> <title>Consumo de API com Fetch</title> </head> <body> <h1>Posts da API JSONPlaceholder</h1> <ul id=\"postsList\"></ul> <script src=\"script.js\"></script> </body> </html>","title":"Passo 1: Criando o HTML (index.html)"},{"location":"_Js/09_FetchApi/#passo-2-criando-o-javascript-scriptjs","text":"Aqui est\u00e1 o c\u00f3digo JavaScript que faz a requisi\u00e7\u00e3o \u00e0 API e exibe os dados no HTML. // URL da API const apiUrl = 'https://jsonplaceholder.typicode.com/posts'; // Fun\u00e7\u00e3o para buscar e exibir os posts function fetchPosts() { fetch(apiUrl) .then(response => { if (!response.ok) { throw new Error('Erro ao obter dados da API'); } return response.json(); // Converte a resposta em JSON }) .then(data => { const postsList = document.getElementById('postsList'); // Itera pelos posts e cria itens de lista data.forEach(post => { const listItem = document.createElement('li'); listItem.textContent = post.title; postsList.appendChild(listItem); }); }) .catch(error => { console.error(error); document.getElementById('postsList').textContent = 'Erro ao carregar os posts'; }); } // Chama a fun\u00e7\u00e3o ao carregar a p\u00e1gina fetchPosts();","title":"Passo 2: Criando o JavaScript (script.js)"},{"location":"_Js/09_FetchApi/#explicacao-do-codigo","text":"URL da API : A constante apiUrl cont\u00e9m o endpoint da API para obter os posts. Fun\u00e7\u00e3o fetchPosts() : Esta fun\u00e7\u00e3o faz a requisi\u00e7\u00e3o usando fetch : Verifica se a resposta est\u00e1 ok (c\u00f3digo de status 200\u2013299). Em caso de erro, lan\u00e7a uma mensagem de erro. Converte a resposta JSON em um objeto JavaScript com response.json() . Itera pela lista de posts ( data ) e adiciona cada t\u00edtulo como um item ( <li> ) na lista HTML ( <ul id=\"postsList\"> ). Tratamento de Erros : Qualquer erro na requisi\u00e7\u00e3o ou na convers\u00e3o para JSON \u00e9 capturado e exibido no console e na p\u00e1gina.","title":"Explica\u00e7\u00e3o do C\u00f3digo"},{"location":"_Js/09_FetchApi/#resultado","text":"Ao abrir o index.html no navegador, a p\u00e1gina exibir\u00e1 uma lista com os t\u00edtulos dos posts. Este \u00e9 um exemplo de como consumir dados de uma API com fetch e exibi-los dinamicamente em HTML.","title":"Resultado"},{"location":"_Js/10_JsonServer/","text":"10 - JsonServer Introdu\u00e7\u00e3o ao json-server Vou te mostrar como criar uma API simples usando o json-server para simular uma API RESTful, baseado nos exemplos anteriores com dados de posts e usu\u00e1rios. Passo 1: Instalar o JSON Server Se voc\u00ea ainda n\u00e3o tem o json-server , pode instal\u00e1-lo globalmente com o npm: npm install -g json-server Passo 2: Criar o Arquivo db.json Esse arquivo conter\u00e1 os dados que ser\u00e3o expostos pela API. Crie um arquivo chamado db.json na pasta do projeto e insira os seguintes dados: { \"posts\": [ { \"id\": 1, \"title\": \"Primeiro Post\", \"body\": \"Conte\u00fado do primeiro post.\" }, { \"id\": 2, \"title\": \"Segundo Post\", \"body\": \"Conte\u00fado do segundo post.\" }, { \"id\": 3, \"title\": \"Terceiro Post\", \"body\": \"Conte\u00fado do terceiro post.\" } ], \"users\": [ { \"id\": 1, \"nome\": \"Maria\", \"idade\": 30, \"cidade\": \"S\u00e3o Paulo\" }, { \"id\": 2, \"nome\": \"Carlos\", \"idade\": 25, \"cidade\": \"Rio de Janeiro\" }, { \"id\": 3, \"nome\": \"Ana\", \"idade\": 28, \"cidade\": \"Salvador\" } ] } Posts : Simula uma lista de posts com id , title e body . Users : Simula uma lista de usu\u00e1rios com id , nome , idade e cidade . Passo 3: Executar o JSON Server Agora que temos o db.json configurado, inicie o json-server com o seguinte comando: json-server --watch db.json --port 3000 Aqui, o servidor ser\u00e1 iniciado na porta 3000. Voc\u00ea pode mudar a porta conforme necess\u00e1rio. Endpoints Criados pelo json-server Com o JSON Server, os dados em db.json s\u00e3o automaticamente transformados em endpoints RESTful. Aqui est\u00e3o alguns endpoints que ser\u00e3o criados automaticamente: GET /posts \u2013 Retorna todos os posts. GET /posts/{id} \u2013 Retorna um post espec\u00edfico pelo id . POST /posts \u2013 Adiciona um novo post. PUT /posts/{id} \u2013 Atualiza um post pelo id . DELETE /posts/{id} \u2013 Deleta um post pelo id . GET /users \u2013 Retorna todos os usu\u00e1rios. GET /users/{id} \u2013 Retorna um usu\u00e1rio espec\u00edfico pelo id . Passo 4: Consumir a API com fetch Com a API rodando no json-server , voc\u00ea pode consumir os dados a partir de uma p\u00e1gina HTML. Vou mostrar um exemplo de como listar os t\u00edtulos dos posts. Arquivo index.html <!DOCTYPE html> <html lang=\"pt-br\"> <head> <meta charset=\"UTF-8\"> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"> <title>Consumindo API com JSON Server</title> </head> <body> <h1>Posts da API Local</h1> <ul id=\"postsList\"></ul> <script src=\"script.js\"></script> </body> </html> Arquivo script.js // URL da API local do JSON Server const apiUrl = 'http://localhost:3000/posts'; // Fun\u00e7\u00e3o para buscar e exibir os posts function fetchPosts() { fetch(apiUrl) .then(response => { if (!response.ok) { throw new Error('Erro ao obter dados da API'); } return response.json(); // Converte a resposta em JSON }) .then(data => { const postsList = document.getElementById('postsList'); // Itera pelos posts e cria itens de lista data.forEach(post => { const listItem = document.createElement('li'); listItem.textContent = post.title; postsList.appendChild(listItem); }); }) .catch(error => { console.error(error); document.getElementById('postsList').textContent = 'Erro ao carregar os posts'; }); } // Chama a fun\u00e7\u00e3o ao carregar a p\u00e1gina fetchPosts(); Explica\u00e7\u00e3o do Funcionamento Servidor JSON : Com json-server , a API local exp\u00f5e endpoints para os dados em db.json . HTML e JavaScript : O arquivo script.js faz uma requisi\u00e7\u00e3o GET para http://localhost:3000/posts e exibe os t\u00edtulos dos posts. Teste : Abra o index.html em um navegador com o json-server rodando. Os t\u00edtulos dos posts ser\u00e3o exibidos na lista. Manipulando Outros Endpoints Para acessar os dados de usu\u00e1rios ( /users ), basta alterar a URL no fetch para http://localhost:3000/users .","title":"10 - JsonServer"},{"location":"_Js/10_JsonServer/#10-jsonserver","text":"","title":"10 - JsonServer"},{"location":"_Js/10_JsonServer/#introducao-ao-json-server","text":"Vou te mostrar como criar uma API simples usando o json-server para simular uma API RESTful, baseado nos exemplos anteriores com dados de posts e usu\u00e1rios.","title":"Introdu\u00e7\u00e3o ao json-server"},{"location":"_Js/10_JsonServer/#passo-1-instalar-o-json-server","text":"Se voc\u00ea ainda n\u00e3o tem o json-server , pode instal\u00e1-lo globalmente com o npm: npm install -g json-server","title":"Passo 1: Instalar o JSON Server"},{"location":"_Js/10_JsonServer/#passo-2-criar-o-arquivo-dbjson","text":"Esse arquivo conter\u00e1 os dados que ser\u00e3o expostos pela API. Crie um arquivo chamado db.json na pasta do projeto e insira os seguintes dados: { \"posts\": [ { \"id\": 1, \"title\": \"Primeiro Post\", \"body\": \"Conte\u00fado do primeiro post.\" }, { \"id\": 2, \"title\": \"Segundo Post\", \"body\": \"Conte\u00fado do segundo post.\" }, { \"id\": 3, \"title\": \"Terceiro Post\", \"body\": \"Conte\u00fado do terceiro post.\" } ], \"users\": [ { \"id\": 1, \"nome\": \"Maria\", \"idade\": 30, \"cidade\": \"S\u00e3o Paulo\" }, { \"id\": 2, \"nome\": \"Carlos\", \"idade\": 25, \"cidade\": \"Rio de Janeiro\" }, { \"id\": 3, \"nome\": \"Ana\", \"idade\": 28, \"cidade\": \"Salvador\" } ] } Posts : Simula uma lista de posts com id , title e body . Users : Simula uma lista de usu\u00e1rios com id , nome , idade e cidade .","title":"Passo 2: Criar o Arquivo db.json"},{"location":"_Js/10_JsonServer/#passo-3-executar-o-json-server","text":"Agora que temos o db.json configurado, inicie o json-server com o seguinte comando: json-server --watch db.json --port 3000 Aqui, o servidor ser\u00e1 iniciado na porta 3000. Voc\u00ea pode mudar a porta conforme necess\u00e1rio.","title":"Passo 3: Executar o JSON Server"},{"location":"_Js/10_JsonServer/#endpoints-criados-pelo-json-server","text":"Com o JSON Server, os dados em db.json s\u00e3o automaticamente transformados em endpoints RESTful. Aqui est\u00e3o alguns endpoints que ser\u00e3o criados automaticamente: GET /posts \u2013 Retorna todos os posts. GET /posts/{id} \u2013 Retorna um post espec\u00edfico pelo id . POST /posts \u2013 Adiciona um novo post. PUT /posts/{id} \u2013 Atualiza um post pelo id . DELETE /posts/{id} \u2013 Deleta um post pelo id . GET /users \u2013 Retorna todos os usu\u00e1rios. GET /users/{id} \u2013 Retorna um usu\u00e1rio espec\u00edfico pelo id .","title":"Endpoints Criados pelo json-server"},{"location":"_Js/10_JsonServer/#passo-4-consumir-a-api-com-fetch","text":"Com a API rodando no json-server , voc\u00ea pode consumir os dados a partir de uma p\u00e1gina HTML. Vou mostrar um exemplo de como listar os t\u00edtulos dos posts.","title":"Passo 4: Consumir a API com fetch"},{"location":"_Js/10_JsonServer/#arquivo-indexhtml","text":"<!DOCTYPE html> <html lang=\"pt-br\"> <head> <meta charset=\"UTF-8\"> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"> <title>Consumindo API com JSON Server</title> </head> <body> <h1>Posts da API Local</h1> <ul id=\"postsList\"></ul> <script src=\"script.js\"></script> </body> </html>","title":"Arquivo index.html"},{"location":"_Js/10_JsonServer/#arquivo-scriptjs","text":"// URL da API local do JSON Server const apiUrl = 'http://localhost:3000/posts'; // Fun\u00e7\u00e3o para buscar e exibir os posts function fetchPosts() { fetch(apiUrl) .then(response => { if (!response.ok) { throw new Error('Erro ao obter dados da API'); } return response.json(); // Converte a resposta em JSON }) .then(data => { const postsList = document.getElementById('postsList'); // Itera pelos posts e cria itens de lista data.forEach(post => { const listItem = document.createElement('li'); listItem.textContent = post.title; postsList.appendChild(listItem); }); }) .catch(error => { console.error(error); document.getElementById('postsList').textContent = 'Erro ao carregar os posts'; }); } // Chama a fun\u00e7\u00e3o ao carregar a p\u00e1gina fetchPosts();","title":"Arquivo script.js"},{"location":"_Js/10_JsonServer/#explicacao-do-funcionamento","text":"Servidor JSON : Com json-server , a API local exp\u00f5e endpoints para os dados em db.json . HTML e JavaScript : O arquivo script.js faz uma requisi\u00e7\u00e3o GET para http://localhost:3000/posts e exibe os t\u00edtulos dos posts. Teste : Abra o index.html em um navegador com o json-server rodando. Os t\u00edtulos dos posts ser\u00e3o exibidos na lista.","title":"Explica\u00e7\u00e3o do Funcionamento"},{"location":"_Js/10_JsonServer/#manipulando-outros-endpoints","text":"Para acessar os dados de usu\u00e1rios ( /users ), basta alterar a URL no fetch para http://localhost:3000/users .","title":"Manipulando Outros Endpoints"},{"location":"_Js/11_TabelaJS/","text":"11 Manipulando html com js Criando uma Tabela HTML a partir de Dados JSON Vamos transformar a lista de produtos em uma tabela mais organizada e visualmente atraente. HTML (index.html): <!DOCTYPE html> <html> <head> <title>Tabela de Produtos</title> <link rel=\"stylesheet\" href=\"styles.css\"> </head> <body> <table id=\"tabela-produtos\"> <thead> <tr> <th>Nome</th> <th>Pre\u00e7o</th> </tr> </thead> <tbody> </tbody> </table> <script src=\"script.js\"></script> </body> </html> CSS (styles.css): /* Adicione seus estilos CSS aqui para personalizar a tabela */ table { border-collapse: collapse; width: 100%; } th, td { border: 1px solid #ddd; padding: 8px; text-align: left; } th { background-color: #f2f2f2; } JavaScript (script.js): async function buscarProdutos() { try { const response = await fetch('produtos.json'); const produtos = await response.json(); const tabelaBody = document.querySelector('#tabela-produtos tbody'); produtos.forEach(produto => { const novaLinha = document.createElement('tr'); const nomeCelula = document.createElement('td'); const precoCelula = document.createElement('td'); nomeCelula.textContent = produto.nome; precoCelula.textContent = `R$ ${produto.preco.toFixed(2)}`; novaLinha.appendChild(nomeCelula); novaLinha.appendChild(precoCelula); tabelaBody.appendChild(novaLinha); }); } catch (error) { console.error('Erro ao buscar produtos:', error); } } buscarProdutos(); Explica\u00e7\u00e3o das Altera\u00e7\u00f5es: Estrutura da tabela: O HTML agora inclui uma tabela com cabe\u00e7alho ( <thead> ) e corpo ( <tbody> ). O cabe\u00e7alho define as colunas \"Nome\" e \"Pre\u00e7o\". Inser\u00e7\u00e3o de dados: O JavaScript cria novas linhas ( <tr> ) para cada produto. Dentro de cada linha, s\u00e3o criadas c\u00e9lulas ( <td> ) para o nome e pre\u00e7o. As c\u00e9lulas s\u00e3o preenchidas com os dados do produto e adicionadas \u00e0 tabela. CSS: O CSS adiciona estilos b\u00e1sicos \u00e0 tabela, como bordas e espa\u00e7amento entre as c\u00e9lulas. Voc\u00ea pode personalizar ainda mais a apar\u00eancia da tabela conforme suas necessidades. Como funciona: Busca os dados: O JavaScript busca os dados do arquivo JSON. Cria a tabela: A fun\u00e7\u00e3o cria uma tabela HTML com cabe\u00e7alho e corpo. Preenche a tabela: Para cada produto, uma nova linha \u00e9 criada e adicionada ao corpo da tabela. Exibe a tabela: A tabela completa \u00e9 exibida na p\u00e1gina. Exerc\u00edcios: Adicionar mais colunas: Se o seu JSON tiver mais informa\u00e7\u00f5es, voc\u00ea pode adicionar mais colunas \u00e0 tabela. Formatar n\u00fameros: Use o m\u00e9todo .toLocaleString() para formatar n\u00fameros de acordo com as configura\u00e7\u00f5es regionais. Ordenar dados: Implemente uma fun\u00e7\u00e3o para ordenar os dados da tabela de acordo com um crit\u00e9rio espec\u00edfico. Filtrar dados: Crie um campo de busca para filtrar os produtos. Estiliza\u00e7\u00e3o: Use CSS para personalizar a apar\u00eancia da tabela, como cores, fontes e layout. Exemplo com mais colunas e formata\u00e7\u00e3o: // ... (c\u00f3digo anterior) precoCelula.textContent = produto.preco.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' }); Isso formatar\u00e1 o pre\u00e7o como \"R$ 29,99\". Criando uma Interface HTML com JavaScript Antes de come\u00e7armos a codificar, vamos entender a fun\u00e7\u00e3o de cada elemento HTML que voc\u00ea mencionou header: Geralmente cont\u00e9m o logo, t\u00edtulo do site e informa\u00e7\u00f5es de contato. nav: Cont\u00e9m os links de navega\u00e7\u00e3o principais (home, servi\u00e7os, contato, etc.). section: Define uma se\u00e7\u00e3o independente de um documento. article: Representa um conte\u00fado aut\u00f4nomo e independente, como um post de blog ou artigo de not\u00edcia. footer: Cont\u00e9m informa\u00e7\u00f5es de rodap\u00e9, como copyright, links para pol\u00edticas de privacidade e informa\u00e7\u00f5es de contato adicionais. Estrutura B\u00e1sica HTML <!DOCTYPE html> <html> <head> <title>Meu Site</title> <link rel=\"stylesheet\" href=\"styles.css\"> </head> <body> <header> <h1>Meu Site</h1> <nav> <ul> <li><a href=\"#\">Home</a></li> <li><a href=\"#\">Servi\u00e7os</a></li> <li><a href=\"#\">Contato</a></li> </ul> </nav> </header> <section> <article> <h2>Bem-vindo!</h2> <p>Este \u00e9 o conte\u00fado principal da minha p\u00e1gina.</p> </article> </section> <footer> <p>\u00a9 2023 Meu Site</p> </footer> <script src=\"script.js\"></script> </body> </html> Estilizando com CSS (styles.css) /* Adicione aqui seus estilos CSS */ body { font-family: Arial, sans-serif; margin: 0; padding: 0; } header { background-color: #f0f0f0; padding: 20px; } nav ul { list-style: none; padding: 0; } nav li { display: inline-block; margin-right: 10px; } Adicionando Interatividade com JavaScript (script.js) // Adicione aqui seu c\u00f3digo JavaScript // Exemplo: const botao = document.getElementById('meuBotao'); botao.addEventListener('click', () => { alert('Voc\u00ea clicou no bot\u00e3o!'); }); Explicando o C\u00f3digo HTML: Define a estrutura b\u00e1sica da p\u00e1gina, incluindo os elementos header, nav, section, article e footer. CSS: Estiliza a p\u00e1gina, definindo cores, fontes, espa\u00e7amentos, etc. JavaScript: Adiciona interatividade \u00e0 p\u00e1gina, permitindo que voc\u00ea manipule elementos HTML e responda a eventos do usu\u00e1rio. Manipulando HTML com JavaScript: Criando uma SPA do Zero O que \u00e9 uma SPA? Uma Single Page Application (SPA) \u00e9 um tipo de aplica\u00e7\u00e3o web que carrega uma \u00fanica p\u00e1gina HTML e, em vez de recarregar toda a p\u00e1gina durante a navega\u00e7\u00e3o, ela atualiza dinamicamente o conte\u00fado com base nas intera\u00e7\u00f5es do usu\u00e1rio. Isso proporciona uma experi\u00eancia mais fluida e semelhante a um aplicativo desktop. Criando Elementos HTML com JavaScript Para criar elementos HTML dinamicamente com JavaScript, utilizamos o m\u00e9todo createElement() . Ap\u00f3s criar o elemento, podemos configur\u00e1-lo com atributos, adicionar conte\u00fado e, finalmente, inseri-lo no DOM (Document Object Model) da p\u00e1gina. Exemplo Pr\u00e1tico: Criando um Card de Produto // Criando um novo elemento div const card = document.createElement('div'); card.classList.add('card'); // Adicionando uma classe para estiliza\u00e7\u00e3o // Criando elementos internos do card const titulo = document.createElement('h2'); titulo.textContent = 'Produto X'; const descricao = document.createElement('p'); descricao.textContent = 'Descri\u00e7\u00e3o do produto.'; const imagem = document.createElement('img'); imagem.src = 'caminho/para/imagem.jpg'; imagem.alt = 'Imagem do produto'; // Adicionando os elementos internos ao card card.appendChild(titulo); card.appendChild(descricao); card.appendChild(imagem); // Selecionando o elemento onde o card ser\u00e1 inserido const container = document.getElementById('container'); // Adicionando o card ao container container.appendChild(card); HTML: <div id=\"container\"></div> CSS: .card { border: 1px solid #ccc; padding: 20px; margin: 10px; } Explica\u00e7\u00e3o: Criamos os elementos: div , h2 , p e img . Configuramos os elementos: Definimos o texto, a classe, a fonte da imagem e o texto alternativo. Adicionamos os elementos filhos: Inserimos os elementos h2 , p e img dentro do elemento div . Inserimos no DOM: Selecionamos o elemento com o ID container e adicionamos o card a ele. Criando uma SPA Simples Para criar uma SPA simples, podemos utilizar JavaScript para: Manipular o conte\u00fado: Alterar o conte\u00fado de elementos HTML com base em eventos do usu\u00e1rio. Gerenciar rotas: Carregar diferentes conte\u00fados dependendo da URL. Fazer requisi\u00e7\u00f5es AJAX: Carregar dados de um servidor sem recarregar a p\u00e1gina. Exemplo de SPA com Navega\u00e7\u00e3o Simples: const links = document.querySelectorAll('nav a'); links.forEach(link => { link.addEventListener('click', (event) => { event.preventDefault(); const conteudo = document.getElementById('conteudo'); conteudo.textContent = `Voc\u00ea clicou em ${link.textContent}`; }); }); Criando uma Galeria de Cards com Tr\u00eas Colunas e Tr\u00eas Linhas em HTML, CSS e JavaScript Entendendo o Desafio Queremos construir uma galeria de cards, onde cada card cont\u00e9m um t\u00edtulo, uma imagem e possivelmente outros elementos. O objetivo \u00e9 organizar esses cards em uma grade de tr\u00eas colunas e tr\u00eas linhas, utilizando HTML para a estrutura, CSS para o estilo e JavaScript para adicionar interatividade (opcional). Estrutura HTML B\u00e1sica <!DOCTYPE html> <html> <head> <title>Galeria de Cards</title> <link rel=\"stylesheet\" href=\"styles.css\"> </head> <body> <div class=\"gallery\"> </div> <script src=\"script.js\"></script> </body> </html> Estiliza\u00e7\u00e3o com CSS .gallery { display: grid; grid-template-columns: repeat(3, 1fr); gap: 20px; } .card { border: 1px solid #ccc; padding: 20px; text-align: center; } .card img { max-width: 100%; } Criando os Cards com JavaScript const gallery = document.querySelector('.gallery'); // Dados dos cards (pode ser obtido de uma API ou outro local) const cardsData = [ { title: 'Card 1', image: 'image1.jpg' }, { title: 'Card 2', image: 'image2.jpg' }, // ... e assim por diante ]; // Fun\u00e7\u00e3o para criar um card function createCard(data) { const card = document.createElement('div'); card.classList.add('card'); const title = document.createElement('h2'); title.textContent = data.title; const image = document.createElement('img'); image.src = data.image; image.alt = data.title; card.appendChild(title); card.appendChild(image); return card; } // Criando os cards e adicionando \u00e0 galeria cardsData.forEach(data => { const cardElement = createCard(data); gallery.appendChild(cardElement); }); Explicando o C\u00f3digo: HTML: Criamos um container com a classe gallery para agrupar os cards. CSS: display: grid; transforma o container em um grid. grid-template-columns: repeat(3, 1fr); cria tr\u00eas colunas de tamanho igual. gap: 20px; adiciona um espa\u00e7o de 20px entre os cards. JavaScript: Selecionamos o container da galeria. Criamos um array cardsData com os dados de cada card. A fun\u00e7\u00e3o createCard cria um elemento div com as classes e conte\u00fados necess\u00e1rios. Iteramos sobre os dados dos cards, criando um elemento card para cada um e adicionando-o \u00e0 galeria. Exerc\u00edcios Estiliza\u00e7\u00e3o: Modifique as classes CSS para personalizar a apar\u00eancia dos cards e da galeria. Conte\u00fado: Adicione mais dados aos cards, como descri\u00e7\u00f5es, bot\u00f5es, etc. Layout: Experimente diferentes valores para grid-template-columns e gap para ajustar o layout. Responsividade: Utilize media queries para adaptar a galeria a diferentes tamanhos de tela. Interatividade: Adicione eventos aos cards, como hover, clique, etc., para criar efeitos visuais ou a\u00e7\u00f5es.","title":"11 Manipulando html com js"},{"location":"_Js/11_TabelaJS/#11-manipulando-html-com-js","text":"","title":"11 Manipulando html com js"},{"location":"_Js/11_TabelaJS/#criando-uma-tabela-html-a-partir-de-dados-json","text":"Vamos transformar a lista de produtos em uma tabela mais organizada e visualmente atraente. HTML (index.html): <!DOCTYPE html> <html> <head> <title>Tabela de Produtos</title> <link rel=\"stylesheet\" href=\"styles.css\"> </head> <body> <table id=\"tabela-produtos\"> <thead> <tr> <th>Nome</th> <th>Pre\u00e7o</th> </tr> </thead> <tbody> </tbody> </table> <script src=\"script.js\"></script> </body> </html> CSS (styles.css): /* Adicione seus estilos CSS aqui para personalizar a tabela */ table { border-collapse: collapse; width: 100%; } th, td { border: 1px solid #ddd; padding: 8px; text-align: left; } th { background-color: #f2f2f2; } JavaScript (script.js): async function buscarProdutos() { try { const response = await fetch('produtos.json'); const produtos = await response.json(); const tabelaBody = document.querySelector('#tabela-produtos tbody'); produtos.forEach(produto => { const novaLinha = document.createElement('tr'); const nomeCelula = document.createElement('td'); const precoCelula = document.createElement('td'); nomeCelula.textContent = produto.nome; precoCelula.textContent = `R$ ${produto.preco.toFixed(2)}`; novaLinha.appendChild(nomeCelula); novaLinha.appendChild(precoCelula); tabelaBody.appendChild(novaLinha); }); } catch (error) { console.error('Erro ao buscar produtos:', error); } } buscarProdutos(); Explica\u00e7\u00e3o das Altera\u00e7\u00f5es: Estrutura da tabela: O HTML agora inclui uma tabela com cabe\u00e7alho ( <thead> ) e corpo ( <tbody> ). O cabe\u00e7alho define as colunas \"Nome\" e \"Pre\u00e7o\". Inser\u00e7\u00e3o de dados: O JavaScript cria novas linhas ( <tr> ) para cada produto. Dentro de cada linha, s\u00e3o criadas c\u00e9lulas ( <td> ) para o nome e pre\u00e7o. As c\u00e9lulas s\u00e3o preenchidas com os dados do produto e adicionadas \u00e0 tabela. CSS: O CSS adiciona estilos b\u00e1sicos \u00e0 tabela, como bordas e espa\u00e7amento entre as c\u00e9lulas. Voc\u00ea pode personalizar ainda mais a apar\u00eancia da tabela conforme suas necessidades. Como funciona: Busca os dados: O JavaScript busca os dados do arquivo JSON. Cria a tabela: A fun\u00e7\u00e3o cria uma tabela HTML com cabe\u00e7alho e corpo. Preenche a tabela: Para cada produto, uma nova linha \u00e9 criada e adicionada ao corpo da tabela. Exibe a tabela: A tabela completa \u00e9 exibida na p\u00e1gina. Exerc\u00edcios: Adicionar mais colunas: Se o seu JSON tiver mais informa\u00e7\u00f5es, voc\u00ea pode adicionar mais colunas \u00e0 tabela. Formatar n\u00fameros: Use o m\u00e9todo .toLocaleString() para formatar n\u00fameros de acordo com as configura\u00e7\u00f5es regionais. Ordenar dados: Implemente uma fun\u00e7\u00e3o para ordenar os dados da tabela de acordo com um crit\u00e9rio espec\u00edfico. Filtrar dados: Crie um campo de busca para filtrar os produtos. Estiliza\u00e7\u00e3o: Use CSS para personalizar a apar\u00eancia da tabela, como cores, fontes e layout. Exemplo com mais colunas e formata\u00e7\u00e3o: // ... (c\u00f3digo anterior) precoCelula.textContent = produto.preco.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' }); Isso formatar\u00e1 o pre\u00e7o como \"R$ 29,99\".","title":"Criando uma Tabela HTML a partir de Dados JSON"},{"location":"_Js/11_TabelaJS/#criando-uma-interface-html-com-javascript","text":"Antes de come\u00e7armos a codificar, vamos entender a fun\u00e7\u00e3o de cada elemento HTML que voc\u00ea mencionou header: Geralmente cont\u00e9m o logo, t\u00edtulo do site e informa\u00e7\u00f5es de contato. nav: Cont\u00e9m os links de navega\u00e7\u00e3o principais (home, servi\u00e7os, contato, etc.). section: Define uma se\u00e7\u00e3o independente de um documento. article: Representa um conte\u00fado aut\u00f4nomo e independente, como um post de blog ou artigo de not\u00edcia. footer: Cont\u00e9m informa\u00e7\u00f5es de rodap\u00e9, como copyright, links para pol\u00edticas de privacidade e informa\u00e7\u00f5es de contato adicionais.","title":"Criando uma Interface HTML com JavaScript"},{"location":"_Js/11_TabelaJS/#estrutura-basica-html","text":"<!DOCTYPE html> <html> <head> <title>Meu Site</title> <link rel=\"stylesheet\" href=\"styles.css\"> </head> <body> <header> <h1>Meu Site</h1> <nav> <ul> <li><a href=\"#\">Home</a></li> <li><a href=\"#\">Servi\u00e7os</a></li> <li><a href=\"#\">Contato</a></li> </ul> </nav> </header> <section> <article> <h2>Bem-vindo!</h2> <p>Este \u00e9 o conte\u00fado principal da minha p\u00e1gina.</p> </article> </section> <footer> <p>\u00a9 2023 Meu Site</p> </footer> <script src=\"script.js\"></script> </body> </html>","title":"Estrutura B\u00e1sica HTML"},{"location":"_Js/11_TabelaJS/#estilizando-com-css-stylescss","text":"/* Adicione aqui seus estilos CSS */ body { font-family: Arial, sans-serif; margin: 0; padding: 0; } header { background-color: #f0f0f0; padding: 20px; } nav ul { list-style: none; padding: 0; } nav li { display: inline-block; margin-right: 10px; }","title":"Estilizando com CSS (styles.css)"},{"location":"_Js/11_TabelaJS/#adicionando-interatividade-com-javascript-scriptjs","text":"// Adicione aqui seu c\u00f3digo JavaScript // Exemplo: const botao = document.getElementById('meuBotao'); botao.addEventListener('click', () => { alert('Voc\u00ea clicou no bot\u00e3o!'); });","title":"Adicionando Interatividade com JavaScript (script.js)"},{"location":"_Js/11_TabelaJS/#explicando-o-codigo","text":"HTML: Define a estrutura b\u00e1sica da p\u00e1gina, incluindo os elementos header, nav, section, article e footer. CSS: Estiliza a p\u00e1gina, definindo cores, fontes, espa\u00e7amentos, etc. JavaScript: Adiciona interatividade \u00e0 p\u00e1gina, permitindo que voc\u00ea manipule elementos HTML e responda a eventos do usu\u00e1rio.","title":"Explicando o C\u00f3digo"},{"location":"_Js/11_TabelaJS/#manipulando-html-com-javascript-criando-uma-spa-do-zero","text":"O que \u00e9 uma SPA? Uma Single Page Application (SPA) \u00e9 um tipo de aplica\u00e7\u00e3o web que carrega uma \u00fanica p\u00e1gina HTML e, em vez de recarregar toda a p\u00e1gina durante a navega\u00e7\u00e3o, ela atualiza dinamicamente o conte\u00fado com base nas intera\u00e7\u00f5es do usu\u00e1rio. Isso proporciona uma experi\u00eancia mais fluida e semelhante a um aplicativo desktop.","title":"Manipulando HTML com JavaScript: Criando uma SPA do Zero"},{"location":"_Js/11_TabelaJS/#criando-elementos-html-com-javascript","text":"Para criar elementos HTML dinamicamente com JavaScript, utilizamos o m\u00e9todo createElement() . Ap\u00f3s criar o elemento, podemos configur\u00e1-lo com atributos, adicionar conte\u00fado e, finalmente, inseri-lo no DOM (Document Object Model) da p\u00e1gina.","title":"Criando Elementos HTML com JavaScript"},{"location":"_Js/11_TabelaJS/#exemplo-pratico-criando-um-card-de-produto","text":"// Criando um novo elemento div const card = document.createElement('div'); card.classList.add('card'); // Adicionando uma classe para estiliza\u00e7\u00e3o // Criando elementos internos do card const titulo = document.createElement('h2'); titulo.textContent = 'Produto X'; const descricao = document.createElement('p'); descricao.textContent = 'Descri\u00e7\u00e3o do produto.'; const imagem = document.createElement('img'); imagem.src = 'caminho/para/imagem.jpg'; imagem.alt = 'Imagem do produto'; // Adicionando os elementos internos ao card card.appendChild(titulo); card.appendChild(descricao); card.appendChild(imagem); // Selecionando o elemento onde o card ser\u00e1 inserido const container = document.getElementById('container'); // Adicionando o card ao container container.appendChild(card); HTML: <div id=\"container\"></div> CSS: .card { border: 1px solid #ccc; padding: 20px; margin: 10px; }","title":"Exemplo Pr\u00e1tico: Criando um Card de Produto"},{"location":"_Js/11_TabelaJS/#explicacao","text":"Criamos os elementos: div , h2 , p e img . Configuramos os elementos: Definimos o texto, a classe, a fonte da imagem e o texto alternativo. Adicionamos os elementos filhos: Inserimos os elementos h2 , p e img dentro do elemento div . Inserimos no DOM: Selecionamos o elemento com o ID container e adicionamos o card a ele.","title":"Explica\u00e7\u00e3o:"},{"location":"_Js/11_TabelaJS/#criando-uma-spa-simples","text":"Para criar uma SPA simples, podemos utilizar JavaScript para: Manipular o conte\u00fado: Alterar o conte\u00fado de elementos HTML com base em eventos do usu\u00e1rio. Gerenciar rotas: Carregar diferentes conte\u00fados dependendo da URL. Fazer requisi\u00e7\u00f5es AJAX: Carregar dados de um servidor sem recarregar a p\u00e1gina. Exemplo de SPA com Navega\u00e7\u00e3o Simples: const links = document.querySelectorAll('nav a'); links.forEach(link => { link.addEventListener('click', (event) => { event.preventDefault(); const conteudo = document.getElementById('conteudo'); conteudo.textContent = `Voc\u00ea clicou em ${link.textContent}`; }); });","title":"Criando uma SPA Simples"},{"location":"_Js/11_TabelaJS/#criando-uma-galeria-de-cards-com-tres-colunas-e-tres-linhas-em-html-css-e-javascript","text":"","title":"Criando uma Galeria de Cards com Tr\u00eas Colunas e Tr\u00eas Linhas em HTML, CSS e JavaScript"},{"location":"_Js/11_TabelaJS/#entendendo-o-desafio","text":"Queremos construir uma galeria de cards, onde cada card cont\u00e9m um t\u00edtulo, uma imagem e possivelmente outros elementos. O objetivo \u00e9 organizar esses cards em uma grade de tr\u00eas colunas e tr\u00eas linhas, utilizando HTML para a estrutura, CSS para o estilo e JavaScript para adicionar interatividade (opcional).","title":"Entendendo o Desafio"},{"location":"_Js/11_TabelaJS/#estrutura-html-basica","text":"<!DOCTYPE html> <html> <head> <title>Galeria de Cards</title> <link rel=\"stylesheet\" href=\"styles.css\"> </head> <body> <div class=\"gallery\"> </div> <script src=\"script.js\"></script> </body> </html>","title":"Estrutura HTML B\u00e1sica"},{"location":"_Js/11_TabelaJS/#estilizacao-com-css","text":".gallery { display: grid; grid-template-columns: repeat(3, 1fr); gap: 20px; } .card { border: 1px solid #ccc; padding: 20px; text-align: center; } .card img { max-width: 100%; }","title":"Estiliza\u00e7\u00e3o com CSS"},{"location":"_Js/11_TabelaJS/#criando-os-cards-com-javascript","text":"const gallery = document.querySelector('.gallery'); // Dados dos cards (pode ser obtido de uma API ou outro local) const cardsData = [ { title: 'Card 1', image: 'image1.jpg' }, { title: 'Card 2', image: 'image2.jpg' }, // ... e assim por diante ]; // Fun\u00e7\u00e3o para criar um card function createCard(data) { const card = document.createElement('div'); card.classList.add('card'); const title = document.createElement('h2'); title.textContent = data.title; const image = document.createElement('img'); image.src = data.image; image.alt = data.title; card.appendChild(title); card.appendChild(image); return card; } // Criando os cards e adicionando \u00e0 galeria cardsData.forEach(data => { const cardElement = createCard(data); gallery.appendChild(cardElement); });","title":"Criando os Cards com JavaScript"},{"location":"_Js/11_TabelaJS/#explicando-o-codigo_1","text":"HTML: Criamos um container com a classe gallery para agrupar os cards. CSS: display: grid; transforma o container em um grid. grid-template-columns: repeat(3, 1fr); cria tr\u00eas colunas de tamanho igual. gap: 20px; adiciona um espa\u00e7o de 20px entre os cards. JavaScript: Selecionamos o container da galeria. Criamos um array cardsData com os dados de cada card. A fun\u00e7\u00e3o createCard cria um elemento div com as classes e conte\u00fados necess\u00e1rios. Iteramos sobre os dados dos cards, criando um elemento card para cada um e adicionando-o \u00e0 galeria.","title":"Explicando o C\u00f3digo:"},{"location":"_Js/11_TabelaJS/#exercicios","text":"Estiliza\u00e7\u00e3o: Modifique as classes CSS para personalizar a apar\u00eancia dos cards e da galeria. Conte\u00fado: Adicione mais dados aos cards, como descri\u00e7\u00f5es, bot\u00f5es, etc. Layout: Experimente diferentes valores para grid-template-columns e gap para ajustar o layout. Responsividade: Utilize media queries para adaptar a galeria a diferentes tamanhos de tela. Interatividade: Adicione eventos aos cards, como hover, clique, etc., para criar efeitos visuais ou a\u00e7\u00f5es.","title":"Exerc\u00edcios"},{"location":"_Js/12_ChartMap/","text":"12 - Chart Map Criando um Gr\u00e1fico de Linhas Simples com JavaScript e o M\u00e9todo map() Entendendo o Problema: Queremos transformar um conjunto de dados em um formato que possa ser utilizado para desenhar um gr\u00e1fico de linhas. Para isso, vamos utilizar o m\u00e9todo map() para gerar um array de coordenadas (x, y) a partir dos nossos dados. Bibliotecas para Visualiza\u00e7\u00e3o: Existem diversas bibliotecas JavaScript que facilitam a cria\u00e7\u00e3o de gr\u00e1ficos, como: Chart.js: Popular por sua facilidade de uso e customiza\u00e7\u00e3o. D3.js: Uma biblioteca mais poderosa e flex\u00edvel, ideal para gr\u00e1ficos complexos. Plotly.js: Uma biblioteca interativa com diversos tipos de gr\u00e1ficos. Exemplo com Chart.js: Vamos supor que temos um array de dados representando a temperatura ao longo de uma semana: const temperaturas = [18, 22, 25, 20, 19, 23, 24]; Para criar um gr\u00e1fico de linhas com Chart.js, precisamos de um elemento HTML <canvas> e um conjunto de dados no formato adequado. Utilizaremos o map() para transformar o array de temperaturas em um array de objetos, onde cada objeto representa um ponto no gr\u00e1fico: const ctx = document.getElementById('myChart').getContext('2d'); const labels = ['Domingo', 'Segunda', 'Ter\u00e7a', 'Quarta', 'Quinta', 'Sexta', 'S\u00e1bado']; const data = { labels: labels, datasets: [{ label: 'Temperatura (\u00b0C)', data: temperaturas, borderColor: 'rgb(75, 192, 192)', fill: false }] }; const myChart = new Chart(ctx, { type: 'line', data: data, options: {} }); <!DOCTYPE html> <html> <head> <title>Gr\u00e1fico de Linhas com Chart.js</title> <script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script> </head> <body> <canvas id=\"myChart\"></canvas> <script> // JavaScript (j\u00e1 mostrado anteriormente) </script> </body> </html> Explicando o C\u00f3digo: Criamos um canvas: O elemento <canvas> \u00e9 onde o gr\u00e1fico ser\u00e1 desenhado. Definimos os r\u00f3tulos: O array labels cont\u00e9m os r\u00f3tulos para cada ponto do eixo x (dias da semana). Transformamos os dados: O map() \u00e9 usado para criar um novo array de objetos, onde cada objeto possui as propriedades x (\u00edndice) e y (temperatura). No entanto, para o Chart.js, n\u00e3o precisamos criar explicitamente as coordenadas x, pois os r\u00f3tulos j\u00e1 servem como essa informa\u00e7\u00e3o. Configuramos o gr\u00e1fico: Criamos um novo objeto Chart, definindo o tipo do gr\u00e1fico (linha), os dados e as op\u00e7\u00f5es de configura\u00e7\u00e3o. Personalizando o Gr\u00e1fico: O Chart.js oferece diversas op\u00e7\u00f5es para personalizar o gr\u00e1fico, como cores, espessura das linhas, marcadores, etc. Consulte a documenta\u00e7\u00e3o oficial para mais detalhes: https://www.chartjs.org/docs/latest/ Outros Exemplos: Gr\u00e1fico de barras: Substitua type: 'line' por type: 'bar' . Gr\u00e1fico de pizza: Utilize type: 'pie' . M\u00faltiplas s\u00e9ries: Adicione mais datasets ao objeto data para comparar diferentes conjuntos de dados. Desafio: Adapte o exemplo acima para criar um gr\u00e1fico de linhas que mostre a evolu\u00e7\u00e3o do pre\u00e7o de uma a\u00e7\u00e3o ao longo de um m\u00eas. Voc\u00ea pode gerar dados aleat\u00f3rios para simular os pre\u00e7os. Recursos Adicionais: Documenta\u00e7\u00e3o Chart.js: https://www.chartjs.org/docs/latest/ Com o map() e bibliotecas como Chart.js, voc\u00ea pode criar gr\u00e1ficos personalizados e informativos para visualizar seus dados de forma eficaz.","title":"12 - Chart Map"},{"location":"_Js/12_ChartMap/#12-chart-map","text":"","title":"12 - Chart Map"},{"location":"_Js/12_ChartMap/#criando-um-grafico-de-linhas-simples-com-javascript-e-o-metodo-map","text":"Entendendo o Problema: Queremos transformar um conjunto de dados em um formato que possa ser utilizado para desenhar um gr\u00e1fico de linhas. Para isso, vamos utilizar o m\u00e9todo map() para gerar um array de coordenadas (x, y) a partir dos nossos dados. Bibliotecas para Visualiza\u00e7\u00e3o: Existem diversas bibliotecas JavaScript que facilitam a cria\u00e7\u00e3o de gr\u00e1ficos, como: Chart.js: Popular por sua facilidade de uso e customiza\u00e7\u00e3o. D3.js: Uma biblioteca mais poderosa e flex\u00edvel, ideal para gr\u00e1ficos complexos. Plotly.js: Uma biblioteca interativa com diversos tipos de gr\u00e1ficos. Exemplo com Chart.js: Vamos supor que temos um array de dados representando a temperatura ao longo de uma semana: const temperaturas = [18, 22, 25, 20, 19, 23, 24]; Para criar um gr\u00e1fico de linhas com Chart.js, precisamos de um elemento HTML <canvas> e um conjunto de dados no formato adequado. Utilizaremos o map() para transformar o array de temperaturas em um array de objetos, onde cada objeto representa um ponto no gr\u00e1fico: const ctx = document.getElementById('myChart').getContext('2d'); const labels = ['Domingo', 'Segunda', 'Ter\u00e7a', 'Quarta', 'Quinta', 'Sexta', 'S\u00e1bado']; const data = { labels: labels, datasets: [{ label: 'Temperatura (\u00b0C)', data: temperaturas, borderColor: 'rgb(75, 192, 192)', fill: false }] }; const myChart = new Chart(ctx, { type: 'line', data: data, options: {} }); <!DOCTYPE html> <html> <head> <title>Gr\u00e1fico de Linhas com Chart.js</title> <script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script> </head> <body> <canvas id=\"myChart\"></canvas> <script> // JavaScript (j\u00e1 mostrado anteriormente) </script> </body> </html> Explicando o C\u00f3digo: Criamos um canvas: O elemento <canvas> \u00e9 onde o gr\u00e1fico ser\u00e1 desenhado. Definimos os r\u00f3tulos: O array labels cont\u00e9m os r\u00f3tulos para cada ponto do eixo x (dias da semana). Transformamos os dados: O map() \u00e9 usado para criar um novo array de objetos, onde cada objeto possui as propriedades x (\u00edndice) e y (temperatura). No entanto, para o Chart.js, n\u00e3o precisamos criar explicitamente as coordenadas x, pois os r\u00f3tulos j\u00e1 servem como essa informa\u00e7\u00e3o. Configuramos o gr\u00e1fico: Criamos um novo objeto Chart, definindo o tipo do gr\u00e1fico (linha), os dados e as op\u00e7\u00f5es de configura\u00e7\u00e3o. Personalizando o Gr\u00e1fico: O Chart.js oferece diversas op\u00e7\u00f5es para personalizar o gr\u00e1fico, como cores, espessura das linhas, marcadores, etc. Consulte a documenta\u00e7\u00e3o oficial para mais detalhes: https://www.chartjs.org/docs/latest/ Outros Exemplos: Gr\u00e1fico de barras: Substitua type: 'line' por type: 'bar' . Gr\u00e1fico de pizza: Utilize type: 'pie' . M\u00faltiplas s\u00e9ries: Adicione mais datasets ao objeto data para comparar diferentes conjuntos de dados. Desafio: Adapte o exemplo acima para criar um gr\u00e1fico de linhas que mostre a evolu\u00e7\u00e3o do pre\u00e7o de uma a\u00e7\u00e3o ao longo de um m\u00eas. Voc\u00ea pode gerar dados aleat\u00f3rios para simular os pre\u00e7os. Recursos Adicionais: Documenta\u00e7\u00e3o Chart.js: https://www.chartjs.org/docs/latest/ Com o map() e bibliotecas como Chart.js, voc\u00ea pode criar gr\u00e1ficos personalizados e informativos para visualizar seus dados de forma eficaz.","title":"Criando um Gr\u00e1fico de Linhas Simples com JavaScript e o M\u00e9todo map()"},{"location":"_Js/13_Maps_Sets/","text":"13 - O Comando Map em JavaScript Introdu\u00e7\u00e3o O m\u00e9todo map() \u00e9 uma ferramenta poderosa em JavaScript que permite transformar cada elemento de um array em um novo elemento, criando um novo array com os resultados. \u00c9 uma forma eficiente de aplicar uma fun\u00e7\u00e3o a cada item de um array, sem modificar o array original. Objetivos da Aula Compreender o conceito de map() ; Aprender a sintaxe e a utiliza\u00e7\u00e3o do map() ; Realizar opera\u00e7\u00f5es comuns com map() ; Diferenciar map() de outros m\u00e9todos como forEach() ; Aplicar map() em exemplos pr\u00e1ticos. Conte\u00fado da Aula 1. O que \u00e9 o map() ? Defini\u00e7\u00e3o e prop\u00f3sito do m\u00e9todo. Como o map() funciona internamente. Compara\u00e7\u00e3o com outros m\u00e9todos como forEach() . 2. Sintaxe do map() Estrutura b\u00e1sica do m\u00e9todo. Par\u00e2metros da fun\u00e7\u00e3o de callback: elemento atual, \u00edndice, array original. Retorno da fun\u00e7\u00e3o de callback. 3. Exemplos B\u00e1sicos Dobrar todos os n\u00fameros de um array. Transformar um array de nomes em letras mai\u00fasculas. Criar um novo array com os quadrados dos n\u00fameros. 4. Usos Comuns Criar novos arrays a partir de dados existentes. Aplicar formata\u00e7\u00f5es a elementos de um array. Extrair informa\u00e7\u00f5es espec\u00edficas de um array de objetos. 5. map() com Arrow Functions Como utilizar arrow functions para simplificar o c\u00f3digo. Exemplos pr\u00e1ticos. Atividades Pr\u00e1ticas Exerc\u00edcios: Crie um array de n\u00fameros e utilize map() para obter um novo array com os n\u00fameros multiplicados por 2. Transforme um array de objetos (pessoas) em um novo array contendo apenas os nomes. Crie um array de strings e utilize map() para converter cada string em um elemento HTML (e.g., <li> ). Projeto: Crie uma aplica\u00e7\u00e3o simples que permita ao usu\u00e1rio adicionar itens a uma lista de compras. Utilize map() para exibir a lista formatada em HTML. Recursos Adicionais Documenta\u00e7\u00e3o MDN: A documenta\u00e7\u00e3o oficial do JavaScript oferece exemplos e explica\u00e7\u00f5es detalhadas sobre o m\u00e9todo map() . Exerc\u00edcios interativos: Sites como Exercism e Codewars oferecem desafios para praticar os conceitos aprendidos. Exemplos Pr\u00e1ticos // Dobrar todos os n\u00fameros de um array const numeros = [1, 2, 3, 4, 5]; const numerosDobrados = numeros.map(numero => numero * 2); // Transformar um array de nomes em letras mai\u00fasculas const nomes = ['ana', 'jo\u00e3o', 'maria']; const nomesMaiusculos = nomes.map(nome => nome.toUpperCase()); // Criar um novo array com os quadrados dos n\u00fameros const quadrados = numeros.map(numero => numero * numero); Exemplos Pr\u00e1ticos e Relevantes para o M\u00e9todo map() em JavaScript 1. Manipula\u00e7\u00e3o de Dados de Usu\u00e1rios Exemplo: Transformar um array de objetos representando usu\u00e1rios em um novo array contendo apenas os nomes. const usuarios = [ { nome: 'Ana', idade: 30 }, { nome: 'Jo\u00e3o', idade: 25 }, { nome: 'Maria', idade: 35 } ]; const nomes = usuarios.map(usuario => usuario.nome); console.log(nomes); // Output: ['Ana', 'Jo\u00e3o', 'Maria'] 2. Formata\u00e7\u00e3o de Dados para Exibi\u00e7\u00e3o Exemplo: Formatar um array de pre\u00e7os para exibir com o s\u00edmbolo de real e duas casas decimais. const precos = [10.99, 25.49, 15.99]; const precosFormatados = precos.map(preco => `R$ ${preco.toFixed(2)}`); console.log(precosFormatados); // Output: ['R$ 10.99', 'R$ 25.49', 'R$ 15.99'] 3. Cria\u00e7\u00e3o de Elementos HTML Exemplo: Criar uma lista n\u00e3o ordenada (ul) com os itens de um array. const itens = ['ma\u00e7\u00e3', 'banana', 'laranja']; const listaHtml = itens.map(item => `<li>${item}</li>`).join(''); console.log(listaHtml); 4. Processamento de Dados de Formul\u00e1rios Exemplo: Extrair os valores de um formul\u00e1rio e criar um objeto com os dados. const formulario = document.querySelector('form'); const dadosFormulario = new FormData(formulario); const dadosObjeto = [...dadosFormulario.entries()].map(([chave, valor]) => ({ [chave]: valor })); console.log(dadosObjeto); 5. Transforma\u00e7\u00e3o de Unidades de Medida Exemplo: Converter uma lista de temperaturas em Celsius para Fahrenheit. const temperaturasCelsius = [0, 10, 20, 30]; const temperaturasFahrenheit = temperaturasCelsius.map(celsius => (celsius * 9/5) + 32); 6. Cria\u00e7\u00e3o de Novos Objetos a Partir de Arrays Exemplo: Criar um array de objetos com propriedades chave-valor a partir de dois arrays. const nomes = ['Ana', 'Jo\u00e3o', 'Maria']; const idades = [30, 25, 35]; const pessoas = nomes.map((nome, index) => ({ nome, idade: idades[index] })); Atividades Pr\u00e1ticas Criar um cat\u00e1logo de produtos: Dado um array de objetos representando produtos (nome, pre\u00e7o, categoria), criar um novo array com os produtos de uma categoria espec\u00edfica. Transformar uma lista de datas em um novo formato: Converter um array de strings representando datas no formato \"YYYY-MM-DD\" para o formato \"DD/MM/YYYY\". Validar um formul\u00e1rio: Utilizar map() para verificar se todos os campos obrigat\u00f3rios de um formul\u00e1rio foram preenchidos. Criar um gr\u00e1fico simples: Gerar um array de coordenadas a partir de um conjunto de dados e utiliz\u00e1-lo para criar um gr\u00e1fico de linhas b\u00e1sico. Dicas Adicionais: Enfatize a imutabilidade: O map() cria um novo array, n\u00e3o modificando o original. Explore diferentes cen\u00e1rios: Apresente exemplos que envolvam diferentes tipos de dados e estruturas. Incentive a experimenta\u00e7\u00e3o: Deixe os alunos explorarem diferentes formas de utilizar o map() . Relacione com outros m\u00e9todos: Mostre como o map() pode ser combinado com outros m\u00e9todos como filter e reduce para realizar opera\u00e7\u00f5es mais complexas. Com esses exemplos e atividades, seus alunos ter\u00e3o uma base s\u00f3lida para utilizar o map() em seus projetos JavaScript.","title":"13 - O Comando Map em JavaScript"},{"location":"_Js/13_Maps_Sets/#13-o-comando-map-em-javascript","text":"","title":"13 - O Comando Map em JavaScript"},{"location":"_Js/13_Maps_Sets/#introducao","text":"O m\u00e9todo map() \u00e9 uma ferramenta poderosa em JavaScript que permite transformar cada elemento de um array em um novo elemento, criando um novo array com os resultados. \u00c9 uma forma eficiente de aplicar uma fun\u00e7\u00e3o a cada item de um array, sem modificar o array original.","title":"Introdu\u00e7\u00e3o"},{"location":"_Js/13_Maps_Sets/#objetivos-da-aula","text":"Compreender o conceito de map() ; Aprender a sintaxe e a utiliza\u00e7\u00e3o do map() ; Realizar opera\u00e7\u00f5es comuns com map() ; Diferenciar map() de outros m\u00e9todos como forEach() ; Aplicar map() em exemplos pr\u00e1ticos.","title":"Objetivos da Aula"},{"location":"_Js/13_Maps_Sets/#conteudo-da-aula","text":"","title":"Conte\u00fado da Aula"},{"location":"_Js/13_Maps_Sets/#1-o-que-e-o-map","text":"Defini\u00e7\u00e3o e prop\u00f3sito do m\u00e9todo. Como o map() funciona internamente. Compara\u00e7\u00e3o com outros m\u00e9todos como forEach() .","title":"1. O que \u00e9 o map()?"},{"location":"_Js/13_Maps_Sets/#2-sintaxe-do-map","text":"Estrutura b\u00e1sica do m\u00e9todo. Par\u00e2metros da fun\u00e7\u00e3o de callback: elemento atual, \u00edndice, array original. Retorno da fun\u00e7\u00e3o de callback.","title":"2. Sintaxe do map()"},{"location":"_Js/13_Maps_Sets/#3-exemplos-basicos","text":"Dobrar todos os n\u00fameros de um array. Transformar um array de nomes em letras mai\u00fasculas. Criar um novo array com os quadrados dos n\u00fameros.","title":"3. Exemplos B\u00e1sicos"},{"location":"_Js/13_Maps_Sets/#4-usos-comuns","text":"Criar novos arrays a partir de dados existentes. Aplicar formata\u00e7\u00f5es a elementos de um array. Extrair informa\u00e7\u00f5es espec\u00edficas de um array de objetos.","title":"4. Usos Comuns"},{"location":"_Js/13_Maps_Sets/#5-map-com-arrow-functions","text":"Como utilizar arrow functions para simplificar o c\u00f3digo. Exemplos pr\u00e1ticos.","title":"5. map() com Arrow Functions"},{"location":"_Js/13_Maps_Sets/#atividades-praticas","text":"Exerc\u00edcios: Crie um array de n\u00fameros e utilize map() para obter um novo array com os n\u00fameros multiplicados por 2. Transforme um array de objetos (pessoas) em um novo array contendo apenas os nomes. Crie um array de strings e utilize map() para converter cada string em um elemento HTML (e.g., <li> ). Projeto: Crie uma aplica\u00e7\u00e3o simples que permita ao usu\u00e1rio adicionar itens a uma lista de compras. Utilize map() para exibir a lista formatada em HTML.","title":"Atividades Pr\u00e1ticas"},{"location":"_Js/13_Maps_Sets/#recursos-adicionais","text":"Documenta\u00e7\u00e3o MDN: A documenta\u00e7\u00e3o oficial do JavaScript oferece exemplos e explica\u00e7\u00f5es detalhadas sobre o m\u00e9todo map() . Exerc\u00edcios interativos: Sites como Exercism e Codewars oferecem desafios para praticar os conceitos aprendidos.","title":"Recursos Adicionais"},{"location":"_Js/13_Maps_Sets/#exemplos-praticos","text":"// Dobrar todos os n\u00fameros de um array const numeros = [1, 2, 3, 4, 5]; const numerosDobrados = numeros.map(numero => numero * 2); // Transformar um array de nomes em letras mai\u00fasculas const nomes = ['ana', 'jo\u00e3o', 'maria']; const nomesMaiusculos = nomes.map(nome => nome.toUpperCase()); // Criar um novo array com os quadrados dos n\u00fameros const quadrados = numeros.map(numero => numero * numero);","title":"Exemplos Pr\u00e1ticos"},{"location":"_Js/13_Maps_Sets/#exemplos-praticos-e-relevantes-para-o-metodo-map-em-javascript","text":"","title":"Exemplos Pr\u00e1ticos e Relevantes para o M\u00e9todo map() em JavaScript"},{"location":"_Js/13_Maps_Sets/#1-manipulacao-de-dados-de-usuarios","text":"Exemplo: Transformar um array de objetos representando usu\u00e1rios em um novo array contendo apenas os nomes. const usuarios = [ { nome: 'Ana', idade: 30 }, { nome: 'Jo\u00e3o', idade: 25 }, { nome: 'Maria', idade: 35 } ]; const nomes = usuarios.map(usuario => usuario.nome); console.log(nomes); // Output: ['Ana', 'Jo\u00e3o', 'Maria']","title":"1. Manipula\u00e7\u00e3o de Dados de Usu\u00e1rios"},{"location":"_Js/13_Maps_Sets/#2-formatacao-de-dados-para-exibicao","text":"Exemplo: Formatar um array de pre\u00e7os para exibir com o s\u00edmbolo de real e duas casas decimais. const precos = [10.99, 25.49, 15.99]; const precosFormatados = precos.map(preco => `R$ ${preco.toFixed(2)}`); console.log(precosFormatados); // Output: ['R$ 10.99', 'R$ 25.49', 'R$ 15.99']","title":"2. Formata\u00e7\u00e3o de Dados para Exibi\u00e7\u00e3o"},{"location":"_Js/13_Maps_Sets/#3-criacao-de-elementos-html","text":"Exemplo: Criar uma lista n\u00e3o ordenada (ul) com os itens de um array. const itens = ['ma\u00e7\u00e3', 'banana', 'laranja']; const listaHtml = itens.map(item => `<li>${item}</li>`).join(''); console.log(listaHtml);","title":"3. Cria\u00e7\u00e3o de Elementos HTML"},{"location":"_Js/13_Maps_Sets/#4-processamento-de-dados-de-formularios","text":"Exemplo: Extrair os valores de um formul\u00e1rio e criar um objeto com os dados. const formulario = document.querySelector('form'); const dadosFormulario = new FormData(formulario); const dadosObjeto = [...dadosFormulario.entries()].map(([chave, valor]) => ({ [chave]: valor })); console.log(dadosObjeto);","title":"4. Processamento de Dados de Formul\u00e1rios"},{"location":"_Js/13_Maps_Sets/#5-transformacao-de-unidades-de-medida","text":"Exemplo: Converter uma lista de temperaturas em Celsius para Fahrenheit. const temperaturasCelsius = [0, 10, 20, 30]; const temperaturasFahrenheit = temperaturasCelsius.map(celsius => (celsius * 9/5) + 32);","title":"5. Transforma\u00e7\u00e3o de Unidades de Medida"},{"location":"_Js/13_Maps_Sets/#6-criacao-de-novos-objetos-a-partir-de-arrays","text":"Exemplo: Criar um array de objetos com propriedades chave-valor a partir de dois arrays. const nomes = ['Ana', 'Jo\u00e3o', 'Maria']; const idades = [30, 25, 35]; const pessoas = nomes.map((nome, index) => ({ nome, idade: idades[index] }));","title":"6. Cria\u00e7\u00e3o de Novos Objetos a Partir de Arrays"},{"location":"_Js/13_Maps_Sets/#atividades-praticas_1","text":"Criar um cat\u00e1logo de produtos: Dado um array de objetos representando produtos (nome, pre\u00e7o, categoria), criar um novo array com os produtos de uma categoria espec\u00edfica. Transformar uma lista de datas em um novo formato: Converter um array de strings representando datas no formato \"YYYY-MM-DD\" para o formato \"DD/MM/YYYY\". Validar um formul\u00e1rio: Utilizar map() para verificar se todos os campos obrigat\u00f3rios de um formul\u00e1rio foram preenchidos. Criar um gr\u00e1fico simples: Gerar um array de coordenadas a partir de um conjunto de dados e utiliz\u00e1-lo para criar um gr\u00e1fico de linhas b\u00e1sico. Dicas Adicionais: Enfatize a imutabilidade: O map() cria um novo array, n\u00e3o modificando o original. Explore diferentes cen\u00e1rios: Apresente exemplos que envolvam diferentes tipos de dados e estruturas. Incentive a experimenta\u00e7\u00e3o: Deixe os alunos explorarem diferentes formas de utilizar o map() . Relacione com outros m\u00e9todos: Mostre como o map() pode ser combinado com outros m\u00e9todos como filter e reduce para realizar opera\u00e7\u00f5es mais complexas. Com esses exemplos e atividades, seus alunos ter\u00e3o uma base s\u00f3lida para utilizar o map() em seus projetos JavaScript.","title":"Atividades Pr\u00e1ticas"},{"location":"_Js/14_Fetch_API/","text":"14 - Roteiro B\u00e1sico: Consumindo API com Fetch em JavaScript Uma p\u00e1gina est\u00e1tica que busca e exibe imagens aleat\u00f3rias de cachorros da Dog CEO API . ** Passo 1: Criar a Estrutura HTML B\u00e1sica** Crie um arquivo index.html com o seguinte conte\u00fado: <!DOCTYPE html> <html lang=\"pt-BR\"> <head> <meta charset=\"UTF-8\"> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"> <title>Dog API com Fetch</title> <style> body { font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px; text-align: center; } h1 { color: #333; } button { padding: 10px 20px; background-color: #4CAF50; color: white; border: none; border-radius: 5px; cursor: pointer; font-size: 16px; margin: 20px 0; } button:disabled { background-color: #cccccc; cursor: not-allowed; } #dogImageContainer { margin-top: 20px; } #dogImage { max-width: 100%; border-radius: 8px; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1); } #error { color: red; font-weight: bold; } </style> </head> <body> <h1> Dog API com Fetch </h1> <button id=\"fetchButton\">Buscar novo cachorro</button> <p id=\"error\"></p> <div id=\"dogImageContainer\"> <!-- A imagem ser\u00e1 inserida aqui via JavaScript --> </div> <script src=\"script.js\"></script> </body> </html> Passo 2: Criar o JavaScript ( script.js ) Crie um arquivo script.js com o seguinte c\u00f3digo: document.addEventListener('DOMContentLoaded', () => { const fetchButton = document.getElementById('fetchButton'); const dogImageContainer = document.getElementById('dogImageContainer'); const errorElement = document.getElementById('error'); // Fun\u00e7\u00e3o para buscar uma imagem aleat\u00f3ria de cachorro const fetchDogImage = async () => { try { fetchButton.disabled = true; fetchButton.textContent = 'Carregando...'; errorElement.textContent = ''; const response = await fetch('https://dog.ceo/api/breeds/image/random'); if (!response.ok) { throw new Error('N\u00e3o foi poss\u00edvel carregar a imagem do cachorro.'); } const data = await response.json(); displayDogImage(data.message); } catch (err) { errorElement.textContent = err.message; } finally { fetchButton.disabled = false; fetchButton.textContent = 'Buscar novo cachorro'; } }; // Fun\u00e7\u00e3o para exibir a imagem na p\u00e1gina const displayDogImage = (imageUrl) => { dogImageContainer.innerHTML = ` <img src=\"${imageUrl}\" alt=\"Cachorro aleat\u00f3rio\" id=\"dogImage\"> `; }; // Busca uma imagem quando a p\u00e1gina \u00e9 carregada fetchDogImage(); // Adiciona o evento de clique ao bot\u00e3o fetchButton.addEventListener('click', fetchDogImage); }); Passo 3: Executar o Projeto Abra o arquivo index.html em um navegador (voc\u00ea pode usar o Live Server do VS Code ou simplesmente clicar duas vezes no arquivo). A p\u00e1gina carregar\u00e1 automaticamente uma imagem de cachorro. Clique no bot\u00e3o \"Buscar novo cachorro\" para carregar outra imagem aleat\u00f3ria. Funcionalidades do App \u2705 Busca imagens aleat\u00f3rias de cachorros usando a Dog CEO API . \u2705 Bot\u00e3o para recarregar uma nova imagem. \u2705 Tratamento de erros (se a API falhar). \u2705 Feedback de carregamento no bot\u00e3o enquanto a imagem \u00e9 buscada. \u2705 Estiliza\u00e7\u00e3o b\u00e1sica com CSS puro (sem bibliotecas como Tailwind). Poss\u00edveis Melhorias \ud83d\udd38 Adicionar um dropdown para selecionar ra\u00e7as espec\u00edficas. \ud83d\udd38 Salvar imagens favoritas no localStorage . \ud83d\udd38 Adicionar um modo escuro/claro. PARTE II: Dropdown de Ra\u00e7as na Dog API com Fetch Vou adaptar o c\u00f3digo anterior para incluir um dropdown que permite selecionar ra\u00e7as espec\u00edficas de cachorros. \ud83d\udccc C\u00f3digo Completo Atualizado index.html <!DOCTYPE html> <html lang=\"pt-BR\"> <head> <meta charset=\"UTF-8\"> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"> <title>Dog API com Seletor de Ra\u00e7as</title> <style> body { font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px; text-align: center; } h1 { color: #333; } select, button { padding: 10px; margin: 10px; font-size: 16px; } button { background-color: #4CAF50; color: white; border: none; border-radius: 5px; cursor: pointer; padding: 10px 20px; } button:disabled { background-color: #cccccc; cursor: not-allowed; } #dogImageContainer { margin-top: 20px; } #dogImage { max-width: 100%; border-radius: 8px; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1); } #error { color: red; font-weight: bold; } .controls { margin: 20px 0; } </style> </head> <body> <h1>Dog API com Seletor de Ra\u00e7as</h1> <div class=\"controls\"> <select id=\"breedSelect\"> <option value=\"\">Carregando ra\u00e7as...</option> </select> <button id=\"fetchButton\">Buscar Cachorro</button> </div> <p id=\"error\"></p> <div id=\"dogImageContainer\"> <!-- A imagem ser\u00e1 inserida aqui via JavaScript --> </div> <script src=\"script.js\"></script> </body> </html> script.js document.addEventListener('DOMContentLoaded', async () => { const fetchButton = document.getElementById('fetchButton'); const breedSelect = document.getElementById('breedSelect'); const dogImageContainer = document.getElementById('dogImageContainer'); const errorElement = document.getElementById('error'); // Vari\u00e1vel para armazenar a lista de ra\u00e7as let breedsList = []; // 1. Carrega a lista de ra\u00e7as quando a p\u00e1gina \u00e9 aberta const loadBreeds = async () => { try { const response = await fetch('https://dog.ceo/api/breeds/list/all'); if (!response.ok) { throw new Error('N\u00e3o foi poss\u00edvel carregar a lista de ra\u00e7as.'); } const data = await response.json(); breedsList = Object.keys(data.message); populateBreedSelect(); } catch (err) { errorElement.textContent = err.message; } }; // 2. Preenche o dropdown com as ra\u00e7as dispon\u00edveis const populateBreedSelect = () => { breedSelect.innerHTML = ''; // Op\u00e7\u00e3o padr\u00e3o const defaultOption = document.createElement('option'); defaultOption.value = ''; defaultOption.textContent = '-- Selecione uma ra\u00e7a --'; breedSelect.appendChild(defaultOption); // Op\u00e7\u00f5es de ra\u00e7as breedsList.forEach(breed => { const option = document.createElement('option'); option.value = breed; option.textContent = breed.charAt(0).toUpperCase() + breed.slice(1); breedSelect.appendChild(option); }); }; // 3. Busca imagem baseada na ra\u00e7a selecionada const fetchDogImage = async () => { const selectedBreed = breedSelect.value; if (!selectedBreed) { errorElement.textContent = 'Por favor, selecione uma ra\u00e7a.'; return; } try { fetchButton.disabled = true; fetchButton.textContent = 'Carregando...'; errorElement.textContent = ''; const url = `https://dog.ceo/api/breed/${selectedBreed}/images/random`; const response = await fetch(url); if (!response.ok) { throw new Error('N\u00e3o foi poss\u00edvel carregar a imagem do cachorro.'); } const data = await response.json(); displayDogImage(data.message); } catch (err) { errorElement.textContent = err.message; } finally { fetchButton.disabled = false; fetchButton.textContent = 'Buscar Cachorro'; } }; // 4. Exibe a imagem na p\u00e1gina const displayDogImage = (imageUrl) => { dogImageContainer.innerHTML = ` <img src=\"${imageUrl}\" alt=\"Cachorro da ra\u00e7a selecionada\" id=\"dogImage\"> <p>Ra\u00e7a: ${breedSelect.options[breedSelect.selectedIndex].text}</p> `; }; // Inicializa\u00e7\u00e3o await loadBreeds(); // Event Listeners fetchButton.addEventListener('click', fetchDogImage); }); Como Funciona Carregamento Inicial : Quando a p\u00e1gina \u00e9 carregada, fazemos uma requisi\u00e7\u00e3o para obter todas as ra\u00e7as dispon\u00edveis ( /breeds/list/all ) Preenchemos o dropdown <select> com essas op\u00e7\u00f5es Sele\u00e7\u00e3o de Ra\u00e7a : O usu\u00e1rio seleciona uma ra\u00e7a no dropdown Ao clicar no bot\u00e3o, fazemos uma nova requisi\u00e7\u00e3o para a API espec\u00edfica da ra\u00e7a selecionada ( /breed/{ra\u00e7a}/images/random ) Exibi\u00e7\u00e3o da Imagem : A imagem retornada \u00e9 exibida na p\u00e1gina junto com o nome da ra\u00e7a Melhorias Implementadas Dropdown din\u00e2mico com todas as ra\u00e7as dispon\u00edveis Feedback visual durante o carregamento Tratamento de erros aprimorado Exibi\u00e7\u00e3o do nome da ra\u00e7a junto com a imagem Estiliza\u00e7\u00e3o melhorada dos controles Tutorial: Favoritos com localStorage na Dog API Vamos adicionar a funcionalidade de salvar imagens favoritas no localStorage . Aqui est\u00e1 a implementa\u00e7\u00e3o completa: C\u00f3digo Atualizado index.html (adicione este bot\u00e3o na div controls ) <button id=\"saveFavorite\">Salvar Favorito</button> <div id=\"favoritesContainer\"></div> script.js (c\u00f3digo completo atualizado) document.addEventListener('DOMContentLoaded', async () => { const fetchButton = document.getElementById('fetchButton'); const breedSelect = document.getElementById('breedSelect'); const saveFavoriteBtn = document.getElementById('saveFavorite'); const dogImageContainer = document.getElementById('dogImageContainer'); const favoritesContainer = document.getElementById('favoritesContainer'); const errorElement = document.getElementById('error'); let breedsList = []; let currentDogImage = null; let currentBreed = null; // 1. Carrega ra\u00e7as const loadBreeds = async () => { try { const response = await fetch('https://dog.ceo/api/breeds/list/all'); if (!response.ok) throw new Error('N\u00e3o foi poss\u00edvel carregar a lista de ra\u00e7as.'); const data = await response.json(); breedsList = Object.keys(data.message); populateBreedSelect(); loadFavorites(); // Carrega favoritos ao iniciar } catch (err) { errorElement.textContent = err.message; } }; // 2. Preenche dropdown const populateBreedSelect = () => { breedSelect.innerHTML = ''; const defaultOption = document.createElement('option'); defaultOption.value = ''; defaultOption.textContent = '-- Selecione uma ra\u00e7a --'; breedSelect.appendChild(defaultOption); breedsList.forEach(breed => { const option = document.createElement('option'); option.value = breed; option.textContent = breed.charAt(0).toUpperCase() + breed.slice(1); breedSelect.appendChild(option); }); }; // 3. Busca imagem const fetchDogImage = async () => { const selectedBreed = breedSelect.value; if (!selectedBreed) { errorElement.textContent = 'Por favor, selecione uma ra\u00e7a.'; return; } try { fetchButton.disabled = true; errorElement.textContent = ''; const url = `https://dog.ceo/api/breed/${selectedBreed}/images/random`; const response = await fetch(url); if (!response.ok) throw new Error('N\u00e3o foi poss\u00edvel carregar a imagem.'); const data = await response.json(); currentDogImage = data.message; currentBreed = selectedBreed; displayDogImage(); } catch (err) { errorElement.textContent = err.message; } finally { fetchButton.disabled = false; } }; // 4. Exibe imagem const displayDogImage = () => { dogImageContainer.innerHTML = ` <img src=\"${currentDogImage}\" alt=\"Cachorro ${currentBreed}\" id=\"dogImage\"> <p>Ra\u00e7a: ${breedSelect.options[breedSelect.selectedIndex].text}</p> `; }; // 5. Salva favorito const saveFavorite = () => { if (!currentDogImage) { errorElement.textContent = 'Nenhuma imagem para salvar.'; return; } const favorites = JSON.parse(localStorage.getItem('dogFavorites')) || []; // Verifica se j\u00e1 existe if (!favorites.some(fav => fav.image === currentDogImage)) { favorites.push({ image: currentDogImage, breed: currentBreed, date: new Date().toLocaleString() }); localStorage.setItem('dogFavorites', JSON.stringify(favorites)); loadFavorites(); errorElement.textContent = 'Salvo nos favoritos!'; setTimeout(() => errorElement.textContent = '', 2000); } else { errorElement.textContent = 'Esta imagem j\u00e1 est\u00e1 nos favoritos!'; } }; // 6. Carrega favoritos const loadFavorites = () => { const favorites = JSON.parse(localStorage.getItem('dogFavorites')) || []; favoritesContainer.innerHTML = '<h3>Seus Favoritos</h3>'; if (favorites.length === 0) { favoritesContainer.innerHTML += '<p>Nenhum favorito salvo ainda.</p>'; return; } favorites.forEach((fav, index) => { const favElement = document.createElement('div'); favElement.className = 'favorite-item'; favElement.innerHTML = ` <img src=\"${fav.image}\" alt=\"Cachorro ${fav.breed}\" class=\"favorite-img\"> <p>Ra\u00e7a: ${fav.breed}</p> <small>Salvo em: ${fav.date}</small> <button class=\"remove-btn\" data-index=\"${index}\">\u274c Remover</button> `; favoritesContainer.appendChild(favElement); }); // Adiciona eventos aos bot\u00f5es de remover document.querySelectorAll('.remove-btn').forEach(btn => { btn.addEventListener('click', removeFavorite); }); }; // 7. Remove favorito const removeFavorite = (e) => { const index = e.target.getAttribute('data-index'); const favorites = JSON.parse(localStorage.getItem('dogFavorites')); favorites.splice(index, 1); localStorage.setItem('dogFavorites', JSON.stringify(favorites)); loadFavorites(); }; // Inicializa\u00e7\u00e3o await loadBreeds(); // Event Listeners fetchButton.addEventListener('click', fetchDogImage); saveFavoriteBtn.addEventListener('click', saveFavorite); }); style.css (adicione ao seu CSS existente) .favorite-item { border: 1px solid #ddd; border-radius: 8px; padding: 10px; margin: 10px 0; text-align: center; } .favorite-img { max-width: 150px; border-radius: 5px; } .remove-btn { background: #ff4444; color: white; border: none; padding: 5px 10px; border-radius: 5px; cursor: pointer; margin-top: 5px; } #favoritesContainer { margin-top: 30px; padding-top: 20px; border-top: 1px solid #eee; } Como Funciona Agora Novos Bot\u00f5es : Salvar Favorito : Salva a imagem atual no localStorage Remover : Remove itens dos favoritos Armazenamento : Cada favorito salva: URL da imagem Ra\u00e7a do cachorro Data/hora do salvamento Recupera\u00e7\u00e3o : Os favoritos s\u00e3o carregados automaticamente quando a p\u00e1gina abre Persistem mesmo ap\u00f3s fechar o navegador Visualiza\u00e7\u00e3o : Os favoritos aparecem em uma se\u00e7\u00e3o separada Cada item mostra a imagem, ra\u00e7a e data Dicas de Uso Para limpar todos os favoritos, voc\u00ea pode usar no console do navegador: javascript localStorage.removeItem('dogFavorites'); Os dados ficam armazenados apenas no navegador atual (n\u00e3o sincroniza entre dispositivos) Para exportar seus favoritos, use: javascript console.log(JSON.stringify(localStorage.getItem('dogFavorites')));","title":"14 - Roteiro B\u00e1sico: Consumindo API com Fetch em JavaScript"},{"location":"_Js/14_Fetch_API/#14-roteiro-basico-consumindo-api-com-fetch-em-javascript","text":"Uma p\u00e1gina est\u00e1tica que busca e exibe imagens aleat\u00f3rias de cachorros da Dog CEO API .","title":"14 - Roteiro B\u00e1sico: Consumindo API com Fetch em JavaScript"},{"location":"_Js/14_Fetch_API/#passo-1-criar-a-estrutura-html-basica","text":"Crie um arquivo index.html com o seguinte conte\u00fado: <!DOCTYPE html> <html lang=\"pt-BR\"> <head> <meta charset=\"UTF-8\"> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"> <title>Dog API com Fetch</title> <style> body { font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px; text-align: center; } h1 { color: #333; } button { padding: 10px 20px; background-color: #4CAF50; color: white; border: none; border-radius: 5px; cursor: pointer; font-size: 16px; margin: 20px 0; } button:disabled { background-color: #cccccc; cursor: not-allowed; } #dogImageContainer { margin-top: 20px; } #dogImage { max-width: 100%; border-radius: 8px; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1); } #error { color: red; font-weight: bold; } </style> </head> <body> <h1> Dog API com Fetch </h1> <button id=\"fetchButton\">Buscar novo cachorro</button> <p id=\"error\"></p> <div id=\"dogImageContainer\"> <!-- A imagem ser\u00e1 inserida aqui via JavaScript --> </div> <script src=\"script.js\"></script> </body> </html>","title":"** Passo 1: Criar a Estrutura HTML B\u00e1sica**"},{"location":"_Js/14_Fetch_API/#passo-2-criar-o-javascript-scriptjs","text":"Crie um arquivo script.js com o seguinte c\u00f3digo: document.addEventListener('DOMContentLoaded', () => { const fetchButton = document.getElementById('fetchButton'); const dogImageContainer = document.getElementById('dogImageContainer'); const errorElement = document.getElementById('error'); // Fun\u00e7\u00e3o para buscar uma imagem aleat\u00f3ria de cachorro const fetchDogImage = async () => { try { fetchButton.disabled = true; fetchButton.textContent = 'Carregando...'; errorElement.textContent = ''; const response = await fetch('https://dog.ceo/api/breeds/image/random'); if (!response.ok) { throw new Error('N\u00e3o foi poss\u00edvel carregar a imagem do cachorro.'); } const data = await response.json(); displayDogImage(data.message); } catch (err) { errorElement.textContent = err.message; } finally { fetchButton.disabled = false; fetchButton.textContent = 'Buscar novo cachorro'; } }; // Fun\u00e7\u00e3o para exibir a imagem na p\u00e1gina const displayDogImage = (imageUrl) => { dogImageContainer.innerHTML = ` <img src=\"${imageUrl}\" alt=\"Cachorro aleat\u00f3rio\" id=\"dogImage\"> `; }; // Busca uma imagem quando a p\u00e1gina \u00e9 carregada fetchDogImage(); // Adiciona o evento de clique ao bot\u00e3o fetchButton.addEventListener('click', fetchDogImage); });","title":"Passo 2: Criar o JavaScript (script.js)"},{"location":"_Js/14_Fetch_API/#passo-3-executar-o-projeto","text":"Abra o arquivo index.html em um navegador (voc\u00ea pode usar o Live Server do VS Code ou simplesmente clicar duas vezes no arquivo). A p\u00e1gina carregar\u00e1 automaticamente uma imagem de cachorro. Clique no bot\u00e3o \"Buscar novo cachorro\" para carregar outra imagem aleat\u00f3ria.","title":"Passo 3: Executar o Projeto"},{"location":"_Js/14_Fetch_API/#funcionalidades-do-app","text":"\u2705 Busca imagens aleat\u00f3rias de cachorros usando a Dog CEO API . \u2705 Bot\u00e3o para recarregar uma nova imagem. \u2705 Tratamento de erros (se a API falhar). \u2705 Feedback de carregamento no bot\u00e3o enquanto a imagem \u00e9 buscada. \u2705 Estiliza\u00e7\u00e3o b\u00e1sica com CSS puro (sem bibliotecas como Tailwind).","title":"Funcionalidades do App"},{"location":"_Js/14_Fetch_API/#possiveis-melhorias","text":"\ud83d\udd38 Adicionar um dropdown para selecionar ra\u00e7as espec\u00edficas. \ud83d\udd38 Salvar imagens favoritas no localStorage . \ud83d\udd38 Adicionar um modo escuro/claro.","title":"Poss\u00edveis Melhorias"},{"location":"_Js/14_Fetch_API/#parte-ii-dropdown-de-racas-na-dog-api-com-fetch","text":"Vou adaptar o c\u00f3digo anterior para incluir um dropdown que permite selecionar ra\u00e7as espec\u00edficas de cachorros.","title":"PARTE II: Dropdown de Ra\u00e7as na Dog API com Fetch"},{"location":"_Js/14_Fetch_API/#codigo-completo-atualizado","text":"","title":"\ud83d\udccc C\u00f3digo Completo Atualizado"},{"location":"_Js/14_Fetch_API/#indexhtml","text":"<!DOCTYPE html> <html lang=\"pt-BR\"> <head> <meta charset=\"UTF-8\"> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"> <title>Dog API com Seletor de Ra\u00e7as</title> <style> body { font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px; text-align: center; } h1 { color: #333; } select, button { padding: 10px; margin: 10px; font-size: 16px; } button { background-color: #4CAF50; color: white; border: none; border-radius: 5px; cursor: pointer; padding: 10px 20px; } button:disabled { background-color: #cccccc; cursor: not-allowed; } #dogImageContainer { margin-top: 20px; } #dogImage { max-width: 100%; border-radius: 8px; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1); } #error { color: red; font-weight: bold; } .controls { margin: 20px 0; } </style> </head> <body> <h1>Dog API com Seletor de Ra\u00e7as</h1> <div class=\"controls\"> <select id=\"breedSelect\"> <option value=\"\">Carregando ra\u00e7as...</option> </select> <button id=\"fetchButton\">Buscar Cachorro</button> </div> <p id=\"error\"></p> <div id=\"dogImageContainer\"> <!-- A imagem ser\u00e1 inserida aqui via JavaScript --> </div> <script src=\"script.js\"></script> </body> </html>","title":"index.html"},{"location":"_Js/14_Fetch_API/#scriptjs","text":"document.addEventListener('DOMContentLoaded', async () => { const fetchButton = document.getElementById('fetchButton'); const breedSelect = document.getElementById('breedSelect'); const dogImageContainer = document.getElementById('dogImageContainer'); const errorElement = document.getElementById('error'); // Vari\u00e1vel para armazenar a lista de ra\u00e7as let breedsList = []; // 1. Carrega a lista de ra\u00e7as quando a p\u00e1gina \u00e9 aberta const loadBreeds = async () => { try { const response = await fetch('https://dog.ceo/api/breeds/list/all'); if (!response.ok) { throw new Error('N\u00e3o foi poss\u00edvel carregar a lista de ra\u00e7as.'); } const data = await response.json(); breedsList = Object.keys(data.message); populateBreedSelect(); } catch (err) { errorElement.textContent = err.message; } }; // 2. Preenche o dropdown com as ra\u00e7as dispon\u00edveis const populateBreedSelect = () => { breedSelect.innerHTML = ''; // Op\u00e7\u00e3o padr\u00e3o const defaultOption = document.createElement('option'); defaultOption.value = ''; defaultOption.textContent = '-- Selecione uma ra\u00e7a --'; breedSelect.appendChild(defaultOption); // Op\u00e7\u00f5es de ra\u00e7as breedsList.forEach(breed => { const option = document.createElement('option'); option.value = breed; option.textContent = breed.charAt(0).toUpperCase() + breed.slice(1); breedSelect.appendChild(option); }); }; // 3. Busca imagem baseada na ra\u00e7a selecionada const fetchDogImage = async () => { const selectedBreed = breedSelect.value; if (!selectedBreed) { errorElement.textContent = 'Por favor, selecione uma ra\u00e7a.'; return; } try { fetchButton.disabled = true; fetchButton.textContent = 'Carregando...'; errorElement.textContent = ''; const url = `https://dog.ceo/api/breed/${selectedBreed}/images/random`; const response = await fetch(url); if (!response.ok) { throw new Error('N\u00e3o foi poss\u00edvel carregar a imagem do cachorro.'); } const data = await response.json(); displayDogImage(data.message); } catch (err) { errorElement.textContent = err.message; } finally { fetchButton.disabled = false; fetchButton.textContent = 'Buscar Cachorro'; } }; // 4. Exibe a imagem na p\u00e1gina const displayDogImage = (imageUrl) => { dogImageContainer.innerHTML = ` <img src=\"${imageUrl}\" alt=\"Cachorro da ra\u00e7a selecionada\" id=\"dogImage\"> <p>Ra\u00e7a: ${breedSelect.options[breedSelect.selectedIndex].text}</p> `; }; // Inicializa\u00e7\u00e3o await loadBreeds(); // Event Listeners fetchButton.addEventListener('click', fetchDogImage); });","title":"script.js"},{"location":"_Js/14_Fetch_API/#como-funciona","text":"Carregamento Inicial : Quando a p\u00e1gina \u00e9 carregada, fazemos uma requisi\u00e7\u00e3o para obter todas as ra\u00e7as dispon\u00edveis ( /breeds/list/all ) Preenchemos o dropdown <select> com essas op\u00e7\u00f5es Sele\u00e7\u00e3o de Ra\u00e7a : O usu\u00e1rio seleciona uma ra\u00e7a no dropdown Ao clicar no bot\u00e3o, fazemos uma nova requisi\u00e7\u00e3o para a API espec\u00edfica da ra\u00e7a selecionada ( /breed/{ra\u00e7a}/images/random ) Exibi\u00e7\u00e3o da Imagem : A imagem retornada \u00e9 exibida na p\u00e1gina junto com o nome da ra\u00e7a","title":"Como Funciona"},{"location":"_Js/14_Fetch_API/#melhorias-implementadas","text":"Dropdown din\u00e2mico com todas as ra\u00e7as dispon\u00edveis Feedback visual durante o carregamento Tratamento de erros aprimorado Exibi\u00e7\u00e3o do nome da ra\u00e7a junto com a imagem Estiliza\u00e7\u00e3o melhorada dos controles","title":"Melhorias Implementadas"},{"location":"_Js/14_Fetch_API/#tutorial-favoritos-com-localstorage-na-dog-api","text":"Vamos adicionar a funcionalidade de salvar imagens favoritas no localStorage . Aqui est\u00e1 a implementa\u00e7\u00e3o completa:","title":"Tutorial: Favoritos com localStorage na Dog API"},{"location":"_Js/14_Fetch_API/#codigo-atualizado","text":"","title":"C\u00f3digo Atualizado"},{"location":"_Js/14_Fetch_API/#indexhtml-adicione-este-botao-na-div-controls","text":"<button id=\"saveFavorite\">Salvar Favorito</button> <div id=\"favoritesContainer\"></div>","title":"index.html (adicione este bot\u00e3o na div controls)"},{"location":"_Js/14_Fetch_API/#scriptjs-codigo-completo-atualizado","text":"document.addEventListener('DOMContentLoaded', async () => { const fetchButton = document.getElementById('fetchButton'); const breedSelect = document.getElementById('breedSelect'); const saveFavoriteBtn = document.getElementById('saveFavorite'); const dogImageContainer = document.getElementById('dogImageContainer'); const favoritesContainer = document.getElementById('favoritesContainer'); const errorElement = document.getElementById('error'); let breedsList = []; let currentDogImage = null; let currentBreed = null; // 1. Carrega ra\u00e7as const loadBreeds = async () => { try { const response = await fetch('https://dog.ceo/api/breeds/list/all'); if (!response.ok) throw new Error('N\u00e3o foi poss\u00edvel carregar a lista de ra\u00e7as.'); const data = await response.json(); breedsList = Object.keys(data.message); populateBreedSelect(); loadFavorites(); // Carrega favoritos ao iniciar } catch (err) { errorElement.textContent = err.message; } }; // 2. Preenche dropdown const populateBreedSelect = () => { breedSelect.innerHTML = ''; const defaultOption = document.createElement('option'); defaultOption.value = ''; defaultOption.textContent = '-- Selecione uma ra\u00e7a --'; breedSelect.appendChild(defaultOption); breedsList.forEach(breed => { const option = document.createElement('option'); option.value = breed; option.textContent = breed.charAt(0).toUpperCase() + breed.slice(1); breedSelect.appendChild(option); }); }; // 3. Busca imagem const fetchDogImage = async () => { const selectedBreed = breedSelect.value; if (!selectedBreed) { errorElement.textContent = 'Por favor, selecione uma ra\u00e7a.'; return; } try { fetchButton.disabled = true; errorElement.textContent = ''; const url = `https://dog.ceo/api/breed/${selectedBreed}/images/random`; const response = await fetch(url); if (!response.ok) throw new Error('N\u00e3o foi poss\u00edvel carregar a imagem.'); const data = await response.json(); currentDogImage = data.message; currentBreed = selectedBreed; displayDogImage(); } catch (err) { errorElement.textContent = err.message; } finally { fetchButton.disabled = false; } }; // 4. Exibe imagem const displayDogImage = () => { dogImageContainer.innerHTML = ` <img src=\"${currentDogImage}\" alt=\"Cachorro ${currentBreed}\" id=\"dogImage\"> <p>Ra\u00e7a: ${breedSelect.options[breedSelect.selectedIndex].text}</p> `; }; // 5. Salva favorito const saveFavorite = () => { if (!currentDogImage) { errorElement.textContent = 'Nenhuma imagem para salvar.'; return; } const favorites = JSON.parse(localStorage.getItem('dogFavorites')) || []; // Verifica se j\u00e1 existe if (!favorites.some(fav => fav.image === currentDogImage)) { favorites.push({ image: currentDogImage, breed: currentBreed, date: new Date().toLocaleString() }); localStorage.setItem('dogFavorites', JSON.stringify(favorites)); loadFavorites(); errorElement.textContent = 'Salvo nos favoritos!'; setTimeout(() => errorElement.textContent = '', 2000); } else { errorElement.textContent = 'Esta imagem j\u00e1 est\u00e1 nos favoritos!'; } }; // 6. Carrega favoritos const loadFavorites = () => { const favorites = JSON.parse(localStorage.getItem('dogFavorites')) || []; favoritesContainer.innerHTML = '<h3>Seus Favoritos</h3>'; if (favorites.length === 0) { favoritesContainer.innerHTML += '<p>Nenhum favorito salvo ainda.</p>'; return; } favorites.forEach((fav, index) => { const favElement = document.createElement('div'); favElement.className = 'favorite-item'; favElement.innerHTML = ` <img src=\"${fav.image}\" alt=\"Cachorro ${fav.breed}\" class=\"favorite-img\"> <p>Ra\u00e7a: ${fav.breed}</p> <small>Salvo em: ${fav.date}</small> <button class=\"remove-btn\" data-index=\"${index}\">\u274c Remover</button> `; favoritesContainer.appendChild(favElement); }); // Adiciona eventos aos bot\u00f5es de remover document.querySelectorAll('.remove-btn').forEach(btn => { btn.addEventListener('click', removeFavorite); }); }; // 7. Remove favorito const removeFavorite = (e) => { const index = e.target.getAttribute('data-index'); const favorites = JSON.parse(localStorage.getItem('dogFavorites')); favorites.splice(index, 1); localStorage.setItem('dogFavorites', JSON.stringify(favorites)); loadFavorites(); }; // Inicializa\u00e7\u00e3o await loadBreeds(); // Event Listeners fetchButton.addEventListener('click', fetchDogImage); saveFavoriteBtn.addEventListener('click', saveFavorite); });","title":"script.js (c\u00f3digo completo atualizado)"},{"location":"_Js/14_Fetch_API/#stylecss-adicione-ao-seu-css-existente","text":".favorite-item { border: 1px solid #ddd; border-radius: 8px; padding: 10px; margin: 10px 0; text-align: center; } .favorite-img { max-width: 150px; border-radius: 5px; } .remove-btn { background: #ff4444; color: white; border: none; padding: 5px 10px; border-radius: 5px; cursor: pointer; margin-top: 5px; } #favoritesContainer { margin-top: 30px; padding-top: 20px; border-top: 1px solid #eee; }","title":"style.css (adicione ao seu CSS existente)"},{"location":"_Js/14_Fetch_API/#como-funciona-agora","text":"Novos Bot\u00f5es : Salvar Favorito : Salva a imagem atual no localStorage Remover : Remove itens dos favoritos Armazenamento : Cada favorito salva: URL da imagem Ra\u00e7a do cachorro Data/hora do salvamento Recupera\u00e7\u00e3o : Os favoritos s\u00e3o carregados automaticamente quando a p\u00e1gina abre Persistem mesmo ap\u00f3s fechar o navegador Visualiza\u00e7\u00e3o : Os favoritos aparecem em uma se\u00e7\u00e3o separada Cada item mostra a imagem, ra\u00e7a e data","title":"Como Funciona Agora"},{"location":"_Js/14_Fetch_API/#dicas-de-uso","text":"Para limpar todos os favoritos, voc\u00ea pode usar no console do navegador: javascript localStorage.removeItem('dogFavorites'); Os dados ficam armazenados apenas no navegador atual (n\u00e3o sincroniza entre dispositivos) Para exportar seus favoritos, use: javascript console.log(JSON.stringify(localStorage.getItem('dogFavorites')));","title":"Dicas de Uso"},{"location":"__Disciplina/aulas/","text":"Aulas Aula Conte\u00fado 01 - 13/02/25 Welcome Ibmec - Introdu\u00e7\u00e3o a Web 02 - 20/02/25 - Introdu\u00e7\u00e3o ao HTML 03 - 27/02/25 HTML 04 - 13/03/25 - Formul\u00e1rios - Introdu\u00e7\u00e3o ao CSS 05 - 20/03/25 - span - div - class - id - Selectors 06 - 27/03/25 - Posicionamento - Responsividade 07 - 03/04/25 - AP1 - Envio do Site - Prova Escrita no Laborat\u00f3rio 08 - 10/04/25 Layout - FlexBox e Grid CSS 09 - 17/04/25 Introdu\u00e7\u00e3o ao Javascript 10 - 25/04/25 JS - Vari\u00e1veis - String - Array 11 - 01/05/25 Feriado 12 - 08/05/25 RoteirosJS Array, Objetos 13 - 15/05/25 Roteiros JS DOM, Forms 14 - 22/05/25 Roteiro Dados, Fetch, Api 15 - 29/05/25 Roteiro Site, Tabelas com JS 16 - 05/06/25 :material-check: Revis\u00e3o JS 17 - 12/06/25 AP2 18 - 19/06/25 AS Nota: Este \u00e9 um par\u00e1grafo colorido usando HTML inline no Cinder/MkDocs. Ajuste a cor conforme necess\u00e1rio. Observa\u00e7\u00e3o: O tema Cinder do MkDocs j\u00e1 inclui o Bootstrap por padr\u00e3o. Portanto, voc\u00ea pode usar classes e componentes do Bootstrap diretamente no seu Markdown utilizando HTML inline, como mostrado abaixo: <div class=\"alert alert-warning\" role=\"alert\"> Este \u00e9 um alerta Bootstrap no Cinder/MkDocs! </div> Nota: Componentes que dependem de JavaScript (como modais ou dropdowns) podem n\u00e3o funcionar sem a inclus\u00e3o dos scripts JS do Bootstrap. Para componentes apenas de estilo, o suporte j\u00e1 est\u00e1 dispon\u00edvel nativamente no tema.","title":"Aulas"},{"location":"__Disciplina/aulas/#aulas","text":"Aula Conte\u00fado 01 - 13/02/25 Welcome Ibmec - Introdu\u00e7\u00e3o a Web 02 - 20/02/25 - Introdu\u00e7\u00e3o ao HTML 03 - 27/02/25 HTML 04 - 13/03/25 - Formul\u00e1rios - Introdu\u00e7\u00e3o ao CSS 05 - 20/03/25 - span - div - class - id - Selectors 06 - 27/03/25 - Posicionamento - Responsividade 07 - 03/04/25 - AP1 - Envio do Site - Prova Escrita no Laborat\u00f3rio 08 - 10/04/25 Layout - FlexBox e Grid CSS 09 - 17/04/25 Introdu\u00e7\u00e3o ao Javascript 10 - 25/04/25 JS - Vari\u00e1veis - String - Array 11 - 01/05/25 Feriado 12 - 08/05/25 RoteirosJS Array, Objetos 13 - 15/05/25 Roteiros JS DOM, Forms 14 - 22/05/25 Roteiro Dados, Fetch, Api 15 - 29/05/25 Roteiro Site, Tabelas com JS 16 - 05/06/25 :material-check: Revis\u00e3o JS 17 - 12/06/25 AP2 18 - 19/06/25 AS Nota: Este \u00e9 um par\u00e1grafo colorido usando HTML inline no Cinder/MkDocs. Ajuste a cor conforme necess\u00e1rio. Observa\u00e7\u00e3o: O tema Cinder do MkDocs j\u00e1 inclui o Bootstrap por padr\u00e3o. Portanto, voc\u00ea pode usar classes e componentes do Bootstrap diretamente no seu Markdown utilizando HTML inline, como mostrado abaixo: <div class=\"alert alert-warning\" role=\"alert\"> Este \u00e9 um alerta Bootstrap no Cinder/MkDocs! </div> Nota: Componentes que dependem de JavaScript (como modais ou dropdowns) podem n\u00e3o funcionar sem a inclus\u00e3o dos scripts JS do Bootstrap. Para componentes apenas de estilo, o suporte j\u00e1 est\u00e1 dispon\u00edvel nativamente no tema.","title":"Aulas"},{"location":"__Disciplina/github/","text":"Versionamento Git e GitHub \u2013 controle de vers\u00e3o para iniciantes Git e GitHub s\u00e3o duas tecnologias que todo desenvolvedor deve aprender, independentemente de sua \u00e1rea. Se voc\u00ea \u00e9 um desenvolvedor iniciante, pode pensar que esses dois termos significam a mesma coisa, mas s\u00e3o diferentes. Este roteiro ajudar\u00e1 voc\u00ea a entender o que \u00e9 Git e controle de vers\u00e3o, os comandos b\u00e1sicos do Git que voc\u00ea precisa conhecer, como voc\u00ea pode usar seus recursos para aumentar a efici\u00eancia do seu trabalho e como estender esses recursos usando o GitHub. Este roteiro \u00e9 voltado a iniciantes, pois os exemplos ser\u00e3o muito f\u00e1ceis de entender. Tamb\u00e9m ser\u00e1 um tutorial generalizado para que qualquer pessoa possa acompanhar, n\u00e3o importa qual seja sua linguagem de programa\u00e7\u00e3o favorita. Para nosso projeto, faremos uma lista de tarefas escrita em um arquivo de texto (txt). Voc\u00ea ver\u00e1 como podemos usar os recursos do Git para trabalhar e criar uma vers\u00e3o final da lista. Pr\u00e9-requisitos Para concluir este roteiro, voc\u00ea precisar\u00e1 do seguinte: Uma interface de linha de comando, um terminal. Um editor de texto de sua escolha (usarei o VS Code ). Uma conta no GitHub . O que \u00e9 Git? O Git \u00e9 um sistema de controle de vers\u00e3o que permite rastrear as altera\u00e7\u00f5es feitas em seus arquivos ao longo do tempo. Com o Git, voc\u00ea pode reverter para v\u00e1rios estados de seus arquivos (como se usasse uma m\u00e1quina do tempo). Voc\u00ea tamb\u00e9m pode fazer uma c\u00f3pia do arquivo, fazer altera\u00e7\u00f5es nessa c\u00f3pia e mesclar essas altera\u00e7\u00f5es na vers\u00e3o original. Por exemplo, voc\u00ea pode estar trabalhando na p\u00e1gina de destino de um site e descobrir que n\u00e3o gosta da barra de navega\u00e7\u00e3o. Ao mesmo tempo, voc\u00ea pode ficar apreensivo em come\u00e7ar a alterar seus componentes, porque o resultado pode ser pior. Com o Git, voc\u00ea pode criar uma c\u00f3pia id\u00eantica desse arquivo e mexer na barra de navega\u00e7\u00e3o. Ent\u00e3o, quando estiver satisfeito com suas altera\u00e7\u00f5es, poder\u00e1 mesclar a c\u00f3pia ao arquivo original. Voc\u00ea n\u00e3o est\u00e1 limitado a usar o Git apenas para arquivos de c\u00f3digo-fonte \u2013 voc\u00ea tamb\u00e9m pode us\u00e1-lo para acompanhar arquivos de texto ou at\u00e9 imagens. Isso significa que o Git n\u00e3o \u00e9 apenas para desenvolvedores \u2013 qualquer um pode ach\u00e1-lo \u00fatil. Como instalar o Git Para usar o Git, voc\u00ea precisa instal\u00e1-lo em seu computador. Para fazer isso, voc\u00ea pode baixar a vers\u00e3o mais recente no site da web oficial . Voc\u00ea pode fazer o download para o seu sistema operacional a partir das op\u00e7\u00f5es fornecidas. Voc\u00ea tamb\u00e9m pode instalar o Git usando a linha de comando, mas, como os comandos variam de acordo com cada sistema operacional, vamos nos concentrar na abordagem mais geral. Como configurar o Git Vou assumir que, neste ponto, voc\u00ea j\u00e1 instalou o Git. Para verificar isso, voc\u00ea pode executar este comando no terminal: git --version. Ele mostra a vers\u00e3o atual instalada no seu PC. A pr\u00f3xima coisa que voc\u00ea precisa fazer \u00e9 definir seu nome de usu\u00e1rio e endere\u00e7o de e-mail. O Git usar\u00e1 essas informa\u00e7\u00f5es para identificar quem fez altera\u00e7\u00f5es espec\u00edficas nos arquivos. Para definir seu nome de usu\u00e1rio, digite e execute estes comandos: git config --global user.name \"SEU_NOME_DE_USUARIO\" git config --global user.email \"SEU_E-MAIL\" Apenas certifique-se de substituir \"SEU_NOME_DE_USUARIO\" e \"SEU_E-MAIL\" pelos valores que voc\u00ea escolher \u2014 ou seja, seu nome de usu\u00e1rio e seu e-mail reais. Como criar e inicializar um projeto no Git Ap\u00f3s terminarmos de instalar e configurar o Git, agora \u00e9 hora de criar nosso projeto. Criamos uma pasta, no desktop, chamada Git and GitHub tutorial. Usando a linha de comando, navegue at\u00e9 o local do seu novo projeto. Para execute os seguintes comandos: cd desktop cd git and github tutorial Se voc\u00ea conhece a linha de comando h\u00e1 pouco e ainda est\u00e1 aprendendo a us\u00e1-la para navegar pelo seu PC, sugiro usar o Visual Studio Code da Microsoft. \u00c9 um editor de c\u00f3digo que possui um terminal embutido para executar comandos. Voc\u00ea pode baix\u00e1-lo aqui . Depois de instalar o VS Code, abra seu projeto no editor e abra um novo terminal para seu projeto. Isso apontar\u00e1 automaticamente o terminal/linha de comando para o caminho do seu projeto. Agora, para inicializar um reposit\u00f3rio do seu projeto, basta executar git init. Isso dir\u00e1 ao Git para come\u00e7ar a observar seus arquivos a cada altera\u00e7\u00e3o que ocorrer. Esta \u00e9 a apar\u00eancia na linha de comando/terminal:** ** A primeira linha tem informa\u00e7\u00f5es sobre meu PC e o caminho para a pasta. A segunda linha \u00e9 o comando gitinit e a terceira linha \u00e9 a resposta enviada de volta me dizendo que meu reposit\u00f3rio (ou repo) foi inicializado. Ele \u00e9 considerado vazio porque n\u00e3o informamos ao Git quais arquivos rastrear.** ** Um reposit\u00f3rio \u00e9 apenas outra maneira de definir um projeto que est\u00e1 sendo monitorado/rastreado pelo Git. Arquivos de projeto no Git Criamos apenas um arquivo chamado todo.txt. Essa \u00e9 a apar\u00eancia do arquivo:** ** ** MINHA LISTA DE TAREFAS** Escrever um artigo. Programar. Estudar pelos livros. Chegar nas aulas a tempo. Visitar minha tia. Me candidatar a trabalhos remotos. Antes de continuarmos aprendendo outros comandos do Git, vamos falar sobre o Github. O que \u00e9 o GitHub? O GitHub \u00e9 um servi\u00e7o de hospedagem on-line para reposit\u00f3rios do Git. Imagine trabalhar em um projeto em casa e, enquanto estiver fora \u2013 talvez na casa de um amigo, de repente \u2013 se dar conta da solu\u00e7\u00e3o para um erro de c\u00f3digo que o deixou inquieto por dias. Voc\u00ea n\u00e3o pode fazer essas altera\u00e7\u00f5es porque seu PC n\u00e3o est\u00e1 com voc\u00ea. Se, contudo, voc\u00ea tiver seu projeto hospedado no GitHub, poder\u00e1 acessar e baixar esse projeto com um comando em qualquer computador ao qual tenha acesso. Em seguida, voc\u00ea pode fazer suas altera\u00e7\u00f5es e enviar a vers\u00e3o mais recente de volta ao GitHub. Em resumo, o GitHub permite que voc\u00ea armazene seu reposit\u00f3rio em sua plataforma. Outro recurso incr\u00edvel que vem com o GitHub \u00e9 a capacidade de colaborar com outros desenvolvedores de qualquer local. Agora que criamos e inicializamos nosso projeto localmente, vamos envi\u00e1-lo para o GitHub. Se voc\u00ea \u00e9 iniciante, encontrar\u00e1 alguns termos novos como push, commit, adde assim por diante \u2013 mas n\u00e3o se deixe assustar com eles. Com alguma pr\u00e1tica, voc\u00ea ser\u00e1 capaz de lembrar desses termos e do que eles fazem. Como enviar um reposit\u00f3rio para o Github ** Dividimos esta se\u00e7\u00e3o em etapas para ajud\u00e1-lo a entender o processo com mais clareza. Passo 1 \u2013 Crie uma conta no GitHub Para poder usar o GitHub, ter\u00e1 de criar uma conta primeiramente. Voc\u00ea pode fazer isso no[site da web](https://github.com/) do GitHub. Passo 2 \u2013 Crie um reposit\u00f3rio Voc\u00ea pode clicar no s\u00edmbolo + no canto superior direito da p\u00e1gina e escolher \"New repository\" (Novo reposit\u00f3rio). D\u00ea um nome ao seu reposit\u00f3rio, role para baixo e clique no bot\u00e3o \"Createrepository\" (Criar reposit\u00f3rio). Passo 3 \u2013 Adicionar e confirmar arquivos Antes de \"adicionar\" e \"confirmar\" nossos arquivos, voc\u00ea precisa entender os est\u00e1gios de um arquivo que est\u00e1 sendo rastreado peloGit. Estado confirmado (committed) Um arquivo est\u00e1 no estado confirmado quando todas as altera\u00e7\u00f5es feitas no arquivo foram salvas no reposit\u00f3rio local. Os arquivos no est\u00e1gio confirmado s\u00e3o arquivos prontos para serem enviados para o reposit\u00f3rio remoto (no GitHub). Estado modificado (modified) Um arquivo no estado modificado tem algumas altera\u00e7\u00f5es feitas nele, mas ainda n\u00e3o foi salvo. Isso significa que o estado do arquivo foi alterado de seu estado anterior no estado confirmado . Estado preparado (staged) Um arquivo no estado preparado significa que est\u00e1 pronto para ser confirmado. Nesse estado, todas as altera\u00e7\u00f5es necess\u00e1rias foram feitas. Portanto, o pr\u00f3ximo passo \u00e9 mover o arquivo para o estado de confirma\u00e7\u00e3o. Voc\u00ea pode entender isso melhor imaginando o Git como uma c\u00e2mera. A c\u00e2mera s\u00f3 tirar\u00e1 um instant\u00e2neo quando o arquivo atingir o estado de confirma\u00e7\u00e3o. Ap\u00f3s este estado, a c\u00e2mera come\u00e7a a comparar as altera\u00e7\u00f5es feitas no mesmo arquivo com o \u00faltimo instant\u00e2neo (este \u00e9 o estado modificado). Quando as altera\u00e7\u00f5es necess\u00e1rias forem feitas, o arquivo \u00e9 preparado e movido para o estado de confirma\u00e7\u00e3o para um novo instant\u00e2neo. Isso pode ser muita informa\u00e7\u00e3o para absorver no momento, mas n\u00e3o desanime \u2013 fica mais f\u00e1cil com a pr\u00e1tica. Como adicionar arquivos ao Git Quando inicializamos nosso projeto, o arquivo n\u00e3o estava sendo rastreado pelo Git. Para isso, usamos o comando gitadd . O ponto que vem depois de add representa todos os arquivos que existem no reposit\u00f3rio. Se voc\u00ea quiser adicionar um arquivo espec\u00edfico (por exemplo, um arquivo chamado about.txt), use gitadd about.txt . Agora, nosso arquivo est\u00e1 no estado preparado. Voc\u00ea n\u00e3o receber\u00e1 uma resposta ap\u00f3s este comando, mas, para saber em que estado seu arquivo est\u00e1, voc\u00ea pode executar o comando git status. ** ** Como confirmar (commit) arquivos no Git O pr\u00f3ximo estado de um arquivo ap\u00f3s o estado preparado \u00e9 o estado confirmado. Para confirmar nosso arquivo, usamos o comando gitcommit -m \"first commit\" A primeira parte do comando git commit diz ao Git que todos os arquivos preparados est\u00e3o prontos para serem confirmados. Ent\u00e3o, \u00e9 hora de tirar um instant\u00e2neo. A segunda parte, -m \"firstcommit\" , \u00e9 a mensagem de confirma\u00e7\u00e3o. -m \u00e9 uma abrevia\u00e7\u00e3o de mensagem enquanto o texto entre aspas \u00e9 a mensagem de confirma\u00e7\u00e3o (que pode ser a mensagem que voc\u00ea quiser e no idioma que quiser). Depois de executar este comando, voc\u00ea deve obter uma resposta semelhante a esta: Agora, nosso arquivo est\u00e1 no estado confirmado. Passo 4 \u2013 Envie o reposit\u00f3rio para o GitHub** ** Depois de criar o reposit\u00f3rio, voc\u00ea deve ser redirecionado para uma p\u00e1gina que informa como criar um reposit\u00f3rio localmente ou enviar um j\u00e1 existente. No nosso caso, o projeto j\u00e1 existe localmente, ent\u00e3o usaremos comandos na se\u00e7\u00e3o \"\u2026 ou enviar um reposit\u00f3rio existente a partir da linha de comando\". Estes s\u00e3o os comandos: gitremoteaddorigin** https://github.com/ihechikara/git-and-github-tutorial.git** gitbranch** -M main** git push -u origin main** ** O primeiro comando, git remote addorigin https://github.com/ihechikara/git-and-github-tutorial.git , cria uma conex\u00e3o entre seu reposit\u00f3rio local e o reposit\u00f3rio remoto no GitHub. O URL do seu projeto remoto deve ser totalmente diferente do anterior. Portanto, para acompanhar, certifique-se de seguir as etapas e trabalhar com seu pr\u00f3prio reposit\u00f3rio remoto. Normalmente, voc\u00ea n\u00e3o receber\u00e1 uma resposta ap\u00f3s executar este comando, mas certifique-se de ter uma conex\u00e3o com a internet. O segundo comando, gitbranch -M main, altera o nome do seu branch principal para \"main\". O branch padr\u00e3o pode ser criada como \"master\", mas \"main\" \u00e9 o nome padr\u00e3o para este reposit\u00f3rio agora. Geralmente, n\u00e3o h\u00e1 resposta aqui. O \u00faltimo comando, gitpush -u originmain , envia seu reposit\u00f3rio do seu dispositivo local para o GitHub. Voc\u00ea deve obter uma resposta semelhante a esta: Para ajud\u00e1-lo a aprofundar sua compreens\u00e3o dos est\u00e1gios do arquivo, farei altera\u00e7\u00f5es no arquivo e, em seguida, enviarei a nova vers\u00e3o para o GitHub. Lembre-se de que nosso arquivo agora est\u00e1 no estado confirmado. Vamos fazer altera\u00e7\u00f5es no arquivo e anotar os estados. Vou adicionar uma nova tarefa \u00e0 lista de tarefas: MINHA LISTA DE TAREFAS Escrever um artigo. Programar. Estudar pelos livros. Chegar nas aulas a tempo. Visitar minha tia. Me candidatar a trabalhos remotos. Praticar programa\u00e7\u00e3o Depois de adicionar a nova tarefa, execute o comando git status. Isto \u00e9 o que voc\u00ea dever\u00e1 ver: Depois de fazer altera\u00e7\u00f5es no arquivo, ele foi movido para o estado modificado, mas ainda n\u00e3o est\u00e1 preparado para confirma\u00e7\u00e3o. Ent\u00e3o, voc\u00ea ainda n\u00e3o pode envi\u00e1-lo para o GitHub. O Git n\u00e3o tirou um instant\u00e2neo final desse estado atual, pois est\u00e1 apenas comparando as altera\u00e7\u00f5es que fizemos agora com o \u00faltimo instant\u00e2neo. Agora vamos adicionar (preparar) este arquivo e, em seguida, confirm\u00e1-lo e envi\u00e1-lo. Isto \u00e9 igual ao que fizemos na \u00faltima se\u00e7\u00e3o. Primeiro, adicionamos o arquivo usando gitadd ., que adiciona todos os arquivos na pasta (um \u00fanico arquivo, no nosso caso). Em seguida, confirmamos o arquivo executando gitcommit -m \"added new task\" (a mensagem significa \"nova tarefa adicionada\") seguido de gitpush -u originmain . Essas s\u00e3o as tr\u00eas etapas para enviar seus arquivos modificados para o GitHub. Voc\u00ea adiciona, confirma e, em seguida, envia. Espero que agora voc\u00ea entenda os est\u00e1gios do arquivo e os comandos associados a eles. Como usar branches no Git Com branches, voc\u00ea pode criar uma c\u00f3pia de um arquivo no qual gostaria de trabalhar sem estragar a c\u00f3pia original. Voc\u00ea pode mesclar essas altera\u00e7\u00f5es com a c\u00f3pia original ou apenas deixar o branch permanecer independente. Antes de come\u00e7armos a usar branches, quero mostrar uma representa\u00e7\u00e3o visual do nosso reposit\u00f3rio, que se parece com isso: A imagem acima mostra nosso branch principal com os dois \u00faltimos commits (o primeiro commit e o commit da nova tarefa adicionada). Neste ponto, quero adicionar mais tarefas \u00e0 lista, mas ainda n\u00e3o tenho certeza se as quero na minha lista principal. Ent\u00e3o, vou criar um outro branch chamado \u202ftest para ver como ficaria minha lista com mais tarefas inclu\u00eddas. Para criar um outro branch, execute este comando: git checkout -b test. Vamos dividir isso em partes e explicar. checkout diz ao Git que deve mudar para um outro branch. -bdiz ao Git para criar esse outro branch. test\u00e9 o nome do branch a ser criado e alterado. Aqui est\u00e1 a resposta que voc\u00ea deve obter: Agora que criamos um outro branch, \u00e9 assim que nosso reposit\u00f3rio ficar\u00e1: Criamos o outro branch a partir do estado do nosso \u00faltimo commit. Vamos agora adicionar mais tarefas a esse novo branch. MINHA LISTA DE TAREFAS 1.Escrever um artigo. 2.Programar. 3.Estudar pelos livros. 4.Chegar nas aulas a tempo. 5.Visitar minha tia. 6.Me candidatar a trabalhos remotos. 7.Praticar programa\u00e7\u00e3o 8.Completar a tarefa de est\u00e1gio. 9.Praticar aberturas do xadrez. 10.Resolver quebra-cabe\u00e7asdo xadrez . 11.Verificar o cronograma dos testes . Adicionamos quatro novas tarefas. Para mesclar o novo estado com o branchmain , voc\u00ea deve primeiro preparar e confirmar esse branch. N\u00e3o entrarei em detalhes sobre o assunto, pois fizemos isso duas vezes na \u00faltima se\u00e7\u00e3o. Voc\u00ea deve tentar fazer isso sozinho para entender como funciona. Como dica, adicione o arquivo e, em seguida, confirme com uma mensagem (consulte a se\u00e7\u00e3o anterior para obter detalhes de como fazer isso). Depois de confirmar seu branchtest, volte para o branchmainexecutando este comando: git checkout main. Voc\u00ea notou que n\u00e3o adicionamos o -b ? Isso ocorre porque n\u00e3o estamos criando um outro branch, mas mudando para um branch existente. Voc\u00ea pode verificar todos os branches que existem em seu reposit\u00f3rio executando o comando gitbranch. Agora, podemos mesclar as altera\u00e7\u00f5es que fizemos no branchtestno branchmainexecutando git merge test. Neste ponto, voc\u00ea ver\u00e1 todas as altera\u00e7\u00f5es feitas no branchtestrefletidas no branchmain. Voc\u00ea tamb\u00e9m deve receber uma resposta semelhante a esta: Aqui est\u00e1 uma representa\u00e7\u00e3o visual do nosso reposit\u00f3rio: Se voc\u00ea continuar a enviar seu reposit\u00f3rio para o GitHub, ver\u00e1 que o branchtest n\u00e3o ser\u00e1 enviado. Ele permanecer\u00e1 apenas em seu reposit\u00f3rio local. Se voc\u00ea quiser enviar seu branchtest , mude para ele usando git checkout test e execute o comando gitpush -u origin test . Como extrair um reposit\u00f3rio no Git Fazer pullno Git significa clonar o estado atual de um reposit\u00f3rio remoto em seu computador/reposit\u00f3rio. Isso \u00e9 \u00fatil quando voc\u00ea deseja trabalhar em seu reposit\u00f3rio de um computador diferente ou quando est\u00e1 contribuindo para um projeto de c\u00f3digo aberto on-line. Para testar isso, n\u00e3o se preocupe em mudar para um novo computador. Basta executar cd .. para sair do diret\u00f3rio atual e voltar uma etapa. No meu caso, naveguei de volta para a minha \u00e1rea de trabalho. V\u00e1 para o GitHub e, na p\u00e1gina principal do seu reposit\u00f3rio, voc\u00ea ver\u00e1 um bot\u00e3o verde que diz \"Code\". Ao clicar no bot\u00e3o, voc\u00ea dever\u00e1 ver algumas op\u00e7\u00f5es em um menu suspenso. V\u00e1 em frente e copie o URL no formato HTTPS. Depois disso, execute git clone SEU_URL_DE_HTTPS. Este comando puxa o reposit\u00f3rio remoto para seu computador local em uma pasta chamada git-and-git-tutorial. Isto \u00e9 o que voc\u00ea dever\u00e1 ver em seu terminal: Conclus\u00e3o Este artigo abordou os comandos b\u00e1sicos que ajudar\u00e3o voc\u00ea a come\u00e7ar a usar o Git. Tamb\u00e9m come\u00e7amos a aprender a usar o GitHub. Se voc\u00ea seguiu at\u00e9 este ponto, parab\u00e9ns. Voc\u00ea est\u00e1 pronto para seguir em frente. Agora, voc\u00ea pode usar o Git em seus projetos, independentemente da linguagem de programa\u00e7\u00e3o que estiver usando. Voc\u00ea deve saber que esses n\u00e3o s\u00e3o todos os comandos que existem no Git \u2013 portanto, sinta-se \u00e0 vontade para fazer mais pesquisas para aprender mais comandos e seus usos. Links git - guia pr\u00e1tico https://rogerdudler.github.io/git-guide/index.pt_BR.html --fast-version-control https://git-scm.com/book/pt-br/v2 Interactive, Visual Git https://the-turing-way.netlify.app/reproducible-research/vcs/vcs-git-interactive LearnGitBranching! https://learngitbranching.js.org/?locale=pt_BR UnderstandingGitthroughimages https://dev.to/nopenoshishi/understanding-git-through-images-4an1 A Visual GitReference https://marklodato.github.io/visual-git-guide/index-en.html A Grip OnGit https://agripongit.vincenttunru.com/ Visualizing Git Concept swith D3 https://onlywei.github.io/explain-git-with-d3/#rebase Como criar um reposit\u00f3rio https://www.atlassian.com/br/git/tutorials/setting-up-a-repository","title":"Versionamento"},{"location":"__Disciplina/github/#versionamento","text":"Git e GitHub \u2013 controle de vers\u00e3o para iniciantes Git e GitHub s\u00e3o duas tecnologias que todo desenvolvedor deve aprender, independentemente de sua \u00e1rea. Se voc\u00ea \u00e9 um desenvolvedor iniciante, pode pensar que esses dois termos significam a mesma coisa, mas s\u00e3o diferentes. Este roteiro ajudar\u00e1 voc\u00ea a entender o que \u00e9 Git e controle de vers\u00e3o, os comandos b\u00e1sicos do Git que voc\u00ea precisa conhecer, como voc\u00ea pode usar seus recursos para aumentar a efici\u00eancia do seu trabalho e como estender esses recursos usando o GitHub. Este roteiro \u00e9 voltado a iniciantes, pois os exemplos ser\u00e3o muito f\u00e1ceis de entender. Tamb\u00e9m ser\u00e1 um tutorial generalizado para que qualquer pessoa possa acompanhar, n\u00e3o importa qual seja sua linguagem de programa\u00e7\u00e3o favorita. Para nosso projeto, faremos uma lista de tarefas escrita em um arquivo de texto (txt). Voc\u00ea ver\u00e1 como podemos usar os recursos do Git para trabalhar e criar uma vers\u00e3o final da lista. Pr\u00e9-requisitos Para concluir este roteiro, voc\u00ea precisar\u00e1 do seguinte: Uma interface de linha de comando, um terminal. Um editor de texto de sua escolha (usarei o VS Code ). Uma conta no GitHub .","title":"Versionamento"},{"location":"__Disciplina/github/#o-que-e-git","text":"O Git \u00e9 um sistema de controle de vers\u00e3o que permite rastrear as altera\u00e7\u00f5es feitas em seus arquivos ao longo do tempo. Com o Git, voc\u00ea pode reverter para v\u00e1rios estados de seus arquivos (como se usasse uma m\u00e1quina do tempo). Voc\u00ea tamb\u00e9m pode fazer uma c\u00f3pia do arquivo, fazer altera\u00e7\u00f5es nessa c\u00f3pia e mesclar essas altera\u00e7\u00f5es na vers\u00e3o original. Por exemplo, voc\u00ea pode estar trabalhando na p\u00e1gina de destino de um site e descobrir que n\u00e3o gosta da barra de navega\u00e7\u00e3o. Ao mesmo tempo, voc\u00ea pode ficar apreensivo em come\u00e7ar a alterar seus componentes, porque o resultado pode ser pior. Com o Git, voc\u00ea pode criar uma c\u00f3pia id\u00eantica desse arquivo e mexer na barra de navega\u00e7\u00e3o. Ent\u00e3o, quando estiver satisfeito com suas altera\u00e7\u00f5es, poder\u00e1 mesclar a c\u00f3pia ao arquivo original. Voc\u00ea n\u00e3o est\u00e1 limitado a usar o Git apenas para arquivos de c\u00f3digo-fonte \u2013 voc\u00ea tamb\u00e9m pode us\u00e1-lo para acompanhar arquivos de texto ou at\u00e9 imagens. Isso significa que o Git n\u00e3o \u00e9 apenas para desenvolvedores \u2013 qualquer um pode ach\u00e1-lo \u00fatil.","title":"O que \u00e9 Git?"},{"location":"__Disciplina/github/#como-instalar-o-git","text":"Para usar o Git, voc\u00ea precisa instal\u00e1-lo em seu computador. Para fazer isso, voc\u00ea pode baixar a vers\u00e3o mais recente no site da web oficial . Voc\u00ea pode fazer o download para o seu sistema operacional a partir das op\u00e7\u00f5es fornecidas. Voc\u00ea tamb\u00e9m pode instalar o Git usando a linha de comando, mas, como os comandos variam de acordo com cada sistema operacional, vamos nos concentrar na abordagem mais geral.","title":"Como instalar o Git"},{"location":"__Disciplina/github/#como-configurar-o-git","text":"Vou assumir que, neste ponto, voc\u00ea j\u00e1 instalou o Git. Para verificar isso, voc\u00ea pode executar este comando no terminal: git --version. Ele mostra a vers\u00e3o atual instalada no seu PC. A pr\u00f3xima coisa que voc\u00ea precisa fazer \u00e9 definir seu nome de usu\u00e1rio e endere\u00e7o de e-mail. O Git usar\u00e1 essas informa\u00e7\u00f5es para identificar quem fez altera\u00e7\u00f5es espec\u00edficas nos arquivos. Para definir seu nome de usu\u00e1rio, digite e execute estes comandos: git config --global user.name \"SEU_NOME_DE_USUARIO\" git config --global user.email \"SEU_E-MAIL\" Apenas certifique-se de substituir \"SEU_NOME_DE_USUARIO\" e \"SEU_E-MAIL\" pelos valores que voc\u00ea escolher \u2014 ou seja, seu nome de usu\u00e1rio e seu e-mail reais.","title":"Como configurar o Git"},{"location":"__Disciplina/github/#como-criar-e-inicializar-um-projeto-no-git","text":"Ap\u00f3s terminarmos de instalar e configurar o Git, agora \u00e9 hora de criar nosso projeto. Criamos uma pasta, no desktop, chamada Git and GitHub tutorial. Usando a linha de comando, navegue at\u00e9 o local do seu novo projeto. Para execute os seguintes comandos: cd desktop cd git and github tutorial Se voc\u00ea conhece a linha de comando h\u00e1 pouco e ainda est\u00e1 aprendendo a us\u00e1-la para navegar pelo seu PC, sugiro usar o Visual Studio Code da Microsoft. \u00c9 um editor de c\u00f3digo que possui um terminal embutido para executar comandos. Voc\u00ea pode baix\u00e1-lo aqui . Depois de instalar o VS Code, abra seu projeto no editor e abra um novo terminal para seu projeto. Isso apontar\u00e1 automaticamente o terminal/linha de comando para o caminho do seu projeto. Agora, para inicializar um reposit\u00f3rio do seu projeto, basta executar git init. Isso dir\u00e1 ao Git para come\u00e7ar a observar seus arquivos a cada altera\u00e7\u00e3o que ocorrer. Esta \u00e9 a apar\u00eancia na linha de comando/terminal:** ** A primeira linha tem informa\u00e7\u00f5es sobre meu PC e o caminho para a pasta. A segunda linha \u00e9 o comando gitinit e a terceira linha \u00e9 a resposta enviada de volta me dizendo que meu reposit\u00f3rio (ou repo) foi inicializado. Ele \u00e9 considerado vazio porque n\u00e3o informamos ao Git quais arquivos rastrear.** ** Um reposit\u00f3rio \u00e9 apenas outra maneira de definir um projeto que est\u00e1 sendo monitorado/rastreado pelo Git.","title":"Como criar e inicializar um projeto no Git"},{"location":"__Disciplina/github/#arquivos-de-projeto-no-git","text":"Criamos apenas um arquivo chamado todo.txt. Essa \u00e9 a apar\u00eancia do arquivo:** ** ** MINHA LISTA DE TAREFAS** Escrever um artigo. Programar. Estudar pelos livros. Chegar nas aulas a tempo. Visitar minha tia. Me candidatar a trabalhos remotos. Antes de continuarmos aprendendo outros comandos do Git, vamos falar sobre o Github.","title":"Arquivos de projeto no Git"},{"location":"__Disciplina/github/#o-que-e-o-github","text":"O GitHub \u00e9 um servi\u00e7o de hospedagem on-line para reposit\u00f3rios do Git. Imagine trabalhar em um projeto em casa e, enquanto estiver fora \u2013 talvez na casa de um amigo, de repente \u2013 se dar conta da solu\u00e7\u00e3o para um erro de c\u00f3digo que o deixou inquieto por dias. Voc\u00ea n\u00e3o pode fazer essas altera\u00e7\u00f5es porque seu PC n\u00e3o est\u00e1 com voc\u00ea. Se, contudo, voc\u00ea tiver seu projeto hospedado no GitHub, poder\u00e1 acessar e baixar esse projeto com um comando em qualquer computador ao qual tenha acesso. Em seguida, voc\u00ea pode fazer suas altera\u00e7\u00f5es e enviar a vers\u00e3o mais recente de volta ao GitHub. Em resumo, o GitHub permite que voc\u00ea armazene seu reposit\u00f3rio em sua plataforma. Outro recurso incr\u00edvel que vem com o GitHub \u00e9 a capacidade de colaborar com outros desenvolvedores de qualquer local. Agora que criamos e inicializamos nosso projeto localmente, vamos envi\u00e1-lo para o GitHub. Se voc\u00ea \u00e9 iniciante, encontrar\u00e1 alguns termos novos como push, commit, adde assim por diante \u2013 mas n\u00e3o se deixe assustar com eles. Com alguma pr\u00e1tica, voc\u00ea ser\u00e1 capaz de lembrar desses termos e do que eles fazem.","title":"O que \u00e9 o GitHub?"},{"location":"__Disciplina/github/#como-enviar-um-repositorio-para-o-github","text":"Dividimos esta se\u00e7\u00e3o em etapas para ajud\u00e1-lo a entender o processo com mais clareza. Passo 1 \u2013 Crie uma conta no GitHub Para poder usar o GitHub, ter\u00e1 de criar uma conta primeiramente. Voc\u00ea pode fazer isso no[site da web](https://github.com/) do GitHub. Passo 2 \u2013 Crie um reposit\u00f3rio Voc\u00ea pode clicar no s\u00edmbolo + no canto superior direito da p\u00e1gina e escolher \"New repository\" (Novo reposit\u00f3rio). D\u00ea um nome ao seu reposit\u00f3rio, role para baixo e clique no bot\u00e3o \"Createrepository\" (Criar reposit\u00f3rio). Passo 3 \u2013 Adicionar e confirmar arquivos Antes de \"adicionar\" e \"confirmar\" nossos arquivos, voc\u00ea precisa entender os est\u00e1gios de um arquivo que est\u00e1 sendo rastreado peloGit. Estado confirmado (committed) Um arquivo est\u00e1 no estado confirmado quando todas as altera\u00e7\u00f5es feitas no arquivo foram salvas no reposit\u00f3rio local. Os arquivos no est\u00e1gio confirmado s\u00e3o arquivos prontos para serem enviados para o reposit\u00f3rio remoto (no GitHub). Estado modificado (modified) Um arquivo no estado modificado tem algumas altera\u00e7\u00f5es feitas nele, mas ainda n\u00e3o foi salvo. Isso significa que o estado do arquivo foi alterado de seu estado anterior no estado confirmado . Estado preparado (staged) Um arquivo no estado preparado significa que est\u00e1 pronto para ser confirmado. Nesse estado, todas as altera\u00e7\u00f5es necess\u00e1rias foram feitas. Portanto, o pr\u00f3ximo passo \u00e9 mover o arquivo para o estado de confirma\u00e7\u00e3o. Voc\u00ea pode entender isso melhor imaginando o Git como uma c\u00e2mera. A c\u00e2mera s\u00f3 tirar\u00e1 um instant\u00e2neo quando o arquivo atingir o estado de confirma\u00e7\u00e3o. Ap\u00f3s este estado, a c\u00e2mera come\u00e7a a comparar as altera\u00e7\u00f5es feitas no mesmo arquivo com o \u00faltimo instant\u00e2neo (este \u00e9 o estado modificado). Quando as altera\u00e7\u00f5es necess\u00e1rias forem feitas, o arquivo \u00e9 preparado e movido para o estado de confirma\u00e7\u00e3o para um novo instant\u00e2neo. Isso pode ser muita informa\u00e7\u00e3o para absorver no momento, mas n\u00e3o desanime \u2013 fica mais f\u00e1cil com a pr\u00e1tica.","title":"Como enviar um reposit\u00f3rio para o Github**"},{"location":"__Disciplina/github/#como-adicionar-arquivos-ao-git","text":"Quando inicializamos nosso projeto, o arquivo n\u00e3o estava sendo rastreado pelo Git. Para isso, usamos o comando gitadd . O ponto que vem depois de add representa todos os arquivos que existem no reposit\u00f3rio. Se voc\u00ea quiser adicionar um arquivo espec\u00edfico (por exemplo, um arquivo chamado about.txt), use gitadd about.txt . Agora, nosso arquivo est\u00e1 no estado preparado. Voc\u00ea n\u00e3o receber\u00e1 uma resposta ap\u00f3s este comando, mas, para saber em que estado seu arquivo est\u00e1, voc\u00ea pode executar o comando git status. ** **","title":"Como adicionar arquivos ao Git"},{"location":"__Disciplina/github/#como-confirmar-commit-arquivos-no-git","text":"O pr\u00f3ximo estado de um arquivo ap\u00f3s o estado preparado \u00e9 o estado confirmado. Para confirmar nosso arquivo, usamos o comando gitcommit -m \"first commit\" A primeira parte do comando git commit diz ao Git que todos os arquivos preparados est\u00e3o prontos para serem confirmados. Ent\u00e3o, \u00e9 hora de tirar um instant\u00e2neo. A segunda parte, -m \"firstcommit\" , \u00e9 a mensagem de confirma\u00e7\u00e3o. -m \u00e9 uma abrevia\u00e7\u00e3o de mensagem enquanto o texto entre aspas \u00e9 a mensagem de confirma\u00e7\u00e3o (que pode ser a mensagem que voc\u00ea quiser e no idioma que quiser). Depois de executar este comando, voc\u00ea deve obter uma resposta semelhante a esta: Agora, nosso arquivo est\u00e1 no estado confirmado. Passo 4 \u2013 Envie o reposit\u00f3rio para o GitHub** ** Depois de criar o reposit\u00f3rio, voc\u00ea deve ser redirecionado para uma p\u00e1gina que informa como criar um reposit\u00f3rio localmente ou enviar um j\u00e1 existente. No nosso caso, o projeto j\u00e1 existe localmente, ent\u00e3o usaremos comandos na se\u00e7\u00e3o \"\u2026 ou enviar um reposit\u00f3rio existente a partir da linha de comando\". Estes s\u00e3o os comandos: gitremoteaddorigin** https://github.com/ihechikara/git-and-github-tutorial.git** gitbranch** -M main** git push -u origin main** ** O primeiro comando, git remote addorigin https://github.com/ihechikara/git-and-github-tutorial.git , cria uma conex\u00e3o entre seu reposit\u00f3rio local e o reposit\u00f3rio remoto no GitHub. O URL do seu projeto remoto deve ser totalmente diferente do anterior. Portanto, para acompanhar, certifique-se de seguir as etapas e trabalhar com seu pr\u00f3prio reposit\u00f3rio remoto. Normalmente, voc\u00ea n\u00e3o receber\u00e1 uma resposta ap\u00f3s executar este comando, mas certifique-se de ter uma conex\u00e3o com a internet. O segundo comando, gitbranch -M main, altera o nome do seu branch principal para \"main\". O branch padr\u00e3o pode ser criada como \"master\", mas \"main\" \u00e9 o nome padr\u00e3o para este reposit\u00f3rio agora. Geralmente, n\u00e3o h\u00e1 resposta aqui. O \u00faltimo comando, gitpush -u originmain , envia seu reposit\u00f3rio do seu dispositivo local para o GitHub. Voc\u00ea deve obter uma resposta semelhante a esta: Para ajud\u00e1-lo a aprofundar sua compreens\u00e3o dos est\u00e1gios do arquivo, farei altera\u00e7\u00f5es no arquivo e, em seguida, enviarei a nova vers\u00e3o para o GitHub. Lembre-se de que nosso arquivo agora est\u00e1 no estado confirmado. Vamos fazer altera\u00e7\u00f5es no arquivo e anotar os estados. Vou adicionar uma nova tarefa \u00e0 lista de tarefas: MINHA LISTA DE TAREFAS Escrever um artigo. Programar. Estudar pelos livros. Chegar nas aulas a tempo. Visitar minha tia. Me candidatar a trabalhos remotos. Praticar programa\u00e7\u00e3o Depois de adicionar a nova tarefa, execute o comando git status. Isto \u00e9 o que voc\u00ea dever\u00e1 ver: Depois de fazer altera\u00e7\u00f5es no arquivo, ele foi movido para o estado modificado, mas ainda n\u00e3o est\u00e1 preparado para confirma\u00e7\u00e3o. Ent\u00e3o, voc\u00ea ainda n\u00e3o pode envi\u00e1-lo para o GitHub. O Git n\u00e3o tirou um instant\u00e2neo final desse estado atual, pois est\u00e1 apenas comparando as altera\u00e7\u00f5es que fizemos agora com o \u00faltimo instant\u00e2neo. Agora vamos adicionar (preparar) este arquivo e, em seguida, confirm\u00e1-lo e envi\u00e1-lo. Isto \u00e9 igual ao que fizemos na \u00faltima se\u00e7\u00e3o. Primeiro, adicionamos o arquivo usando gitadd ., que adiciona todos os arquivos na pasta (um \u00fanico arquivo, no nosso caso). Em seguida, confirmamos o arquivo executando gitcommit -m \"added new task\" (a mensagem significa \"nova tarefa adicionada\") seguido de gitpush -u originmain . Essas s\u00e3o as tr\u00eas etapas para enviar seus arquivos modificados para o GitHub. Voc\u00ea adiciona, confirma e, em seguida, envia. Espero que agora voc\u00ea entenda os est\u00e1gios do arquivo e os comandos associados a eles.","title":"Como confirmar (commit) arquivos no Git"},{"location":"__Disciplina/github/#como-usar-branches-no-git","text":"Com branches, voc\u00ea pode criar uma c\u00f3pia de um arquivo no qual gostaria de trabalhar sem estragar a c\u00f3pia original. Voc\u00ea pode mesclar essas altera\u00e7\u00f5es com a c\u00f3pia original ou apenas deixar o branch permanecer independente. Antes de come\u00e7armos a usar branches, quero mostrar uma representa\u00e7\u00e3o visual do nosso reposit\u00f3rio, que se parece com isso: A imagem acima mostra nosso branch principal com os dois \u00faltimos commits (o primeiro commit e o commit da nova tarefa adicionada). Neste ponto, quero adicionar mais tarefas \u00e0 lista, mas ainda n\u00e3o tenho certeza se as quero na minha lista principal. Ent\u00e3o, vou criar um outro branch chamado \u202ftest para ver como ficaria minha lista com mais tarefas inclu\u00eddas. Para criar um outro branch, execute este comando: git checkout -b test. Vamos dividir isso em partes e explicar. checkout diz ao Git que deve mudar para um outro branch. -bdiz ao Git para criar esse outro branch. test\u00e9 o nome do branch a ser criado e alterado. Aqui est\u00e1 a resposta que voc\u00ea deve obter: Agora que criamos um outro branch, \u00e9 assim que nosso reposit\u00f3rio ficar\u00e1: Criamos o outro branch a partir do estado do nosso \u00faltimo commit. Vamos agora adicionar mais tarefas a esse novo branch. MINHA LISTA DE TAREFAS 1.Escrever um artigo. 2.Programar. 3.Estudar pelos livros. 4.Chegar nas aulas a tempo. 5.Visitar minha tia. 6.Me candidatar a trabalhos remotos. 7.Praticar programa\u00e7\u00e3o 8.Completar a tarefa de est\u00e1gio. 9.Praticar aberturas do xadrez. 10.Resolver quebra-cabe\u00e7asdo xadrez . 11.Verificar o cronograma dos testes . Adicionamos quatro novas tarefas. Para mesclar o novo estado com o branchmain , voc\u00ea deve primeiro preparar e confirmar esse branch. N\u00e3o entrarei em detalhes sobre o assunto, pois fizemos isso duas vezes na \u00faltima se\u00e7\u00e3o. Voc\u00ea deve tentar fazer isso sozinho para entender como funciona. Como dica, adicione o arquivo e, em seguida, confirme com uma mensagem (consulte a se\u00e7\u00e3o anterior para obter detalhes de como fazer isso). Depois de confirmar seu branchtest, volte para o branchmainexecutando este comando: git checkout main. Voc\u00ea notou que n\u00e3o adicionamos o -b ? Isso ocorre porque n\u00e3o estamos criando um outro branch, mas mudando para um branch existente. Voc\u00ea pode verificar todos os branches que existem em seu reposit\u00f3rio executando o comando gitbranch. Agora, podemos mesclar as altera\u00e7\u00f5es que fizemos no branchtestno branchmainexecutando git merge test. Neste ponto, voc\u00ea ver\u00e1 todas as altera\u00e7\u00f5es feitas no branchtestrefletidas no branchmain. Voc\u00ea tamb\u00e9m deve receber uma resposta semelhante a esta: Aqui est\u00e1 uma representa\u00e7\u00e3o visual do nosso reposit\u00f3rio: Se voc\u00ea continuar a enviar seu reposit\u00f3rio para o GitHub, ver\u00e1 que o branchtest n\u00e3o ser\u00e1 enviado. Ele permanecer\u00e1 apenas em seu reposit\u00f3rio local. Se voc\u00ea quiser enviar seu branchtest , mude para ele usando git checkout test e execute o comando gitpush -u origin test .","title":"Como usar branches no Git"},{"location":"__Disciplina/github/#como-extrair-um-repositorio-no-git","text":"Fazer pullno Git significa clonar o estado atual de um reposit\u00f3rio remoto em seu computador/reposit\u00f3rio. Isso \u00e9 \u00fatil quando voc\u00ea deseja trabalhar em seu reposit\u00f3rio de um computador diferente ou quando est\u00e1 contribuindo para um projeto de c\u00f3digo aberto on-line. Para testar isso, n\u00e3o se preocupe em mudar para um novo computador. Basta executar cd .. para sair do diret\u00f3rio atual e voltar uma etapa. No meu caso, naveguei de volta para a minha \u00e1rea de trabalho. V\u00e1 para o GitHub e, na p\u00e1gina principal do seu reposit\u00f3rio, voc\u00ea ver\u00e1 um bot\u00e3o verde que diz \"Code\". Ao clicar no bot\u00e3o, voc\u00ea dever\u00e1 ver algumas op\u00e7\u00f5es em um menu suspenso. V\u00e1 em frente e copie o URL no formato HTTPS. Depois disso, execute git clone SEU_URL_DE_HTTPS. Este comando puxa o reposit\u00f3rio remoto para seu computador local em uma pasta chamada git-and-git-tutorial. Isto \u00e9 o que voc\u00ea dever\u00e1 ver em seu terminal:","title":"Como extrair um reposit\u00f3rio no Git"},{"location":"__Disciplina/github/#conclusao","text":"Este artigo abordou os comandos b\u00e1sicos que ajudar\u00e3o voc\u00ea a come\u00e7ar a usar o Git. Tamb\u00e9m come\u00e7amos a aprender a usar o GitHub. Se voc\u00ea seguiu at\u00e9 este ponto, parab\u00e9ns. Voc\u00ea est\u00e1 pronto para seguir em frente. Agora, voc\u00ea pode usar o Git em seus projetos, independentemente da linguagem de programa\u00e7\u00e3o que estiver usando. Voc\u00ea deve saber que esses n\u00e3o s\u00e3o todos os comandos que existem no Git \u2013 portanto, sinta-se \u00e0 vontade para fazer mais pesquisas para aprender mais comandos e seus usos.","title":"Conclus\u00e3o"},{"location":"__Disciplina/github/#links","text":"git - guia pr\u00e1tico https://rogerdudler.github.io/git-guide/index.pt_BR.html --fast-version-control https://git-scm.com/book/pt-br/v2 Interactive, Visual Git https://the-turing-way.netlify.app/reproducible-research/vcs/vcs-git-interactive LearnGitBranching! https://learngitbranching.js.org/?locale=pt_BR UnderstandingGitthroughimages https://dev.to/nopenoshishi/understanding-git-through-images-4an1 A Visual GitReference https://marklodato.github.io/visual-git-guide/index-en.html A Grip OnGit https://agripongit.vincenttunru.com/ Visualizing Git Concept swith D3 https://onlywei.github.io/explain-git-with-d3/#rebase Como criar um reposit\u00f3rio https://www.atlassian.com/br/git/tutorials/setting-up-a-repository","title":"Links"},{"location":"__Disciplina/mkdocs/","text":"MkDocs Commands * mkdocs new [dir-name] - Create a new project. * mkdocs serve - Start the live-reloading docs server. * mkdocs build - Build the documentation site. * mkdocs -h - Print help message and exit. * mkdocs deploy - Deploy site builded on Github. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"MkDocs"},{"location":"__Disciplina/mkdocs/#mkdocs","text":"","title":"MkDocs"},{"location":"__Disciplina/mkdocs/#commands","text":"* mkdocs new [dir-name] - Create a new project. * mkdocs serve - Start the live-reloading docs server. * mkdocs build - Build the documentation site. * mkdocs -h - Print help message and exit. * mkdocs deploy - Deploy site builded on Github.","title":"Commands"},{"location":"__Disciplina/mkdocs/#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"__Disciplina/Avalia%C3%A7%C3%B5es/","text":"Avalia\u00e7\u00f5es ACs AP1 - Entrega 03/04/2025 - Envio no Github(Prof. adicionado como colaborador) do aluno At\u00e9 as 9:20h AP2 - Entrega 12/06/2025 - Envio no Github (Prof. adicionado como colaborador) do aluno At\u00e9 as 9:20h AS - Prova com a mat\u00e9ria toda e quest\u00f5es objetivas, discursivas e de desenvolvimento de c\u00f3digo. Crie um reposit\u00f3rio \"DW, todas as atividades de avalia\u00e7\u00e3o devem ser publicadas numa pasta /docs. Nessa pasta dever\u00e3o ser criadas as pastas ACs, AP1 e AP2. Ap\u00f3s a cria\u00e7\u00e3o das pastas deve ser feita a configura\u00e7\u00e3o do github pages. Settings Pages Na Branch fazer a sele\u00e7\u00e3o da pasta /docs para a publica\u00e7\u00e3o Salvar","title":"Avalia\u00e7\u00f5es"},{"location":"__Disciplina/Avalia%C3%A7%C3%B5es/#avaliacoes","text":"ACs AP1 - Entrega 03/04/2025 - Envio no Github(Prof. adicionado como colaborador) do aluno At\u00e9 as 9:20h AP2 - Entrega 12/06/2025 - Envio no Github (Prof. adicionado como colaborador) do aluno At\u00e9 as 9:20h AS - Prova com a mat\u00e9ria toda e quest\u00f5es objetivas, discursivas e de desenvolvimento de c\u00f3digo. Crie um reposit\u00f3rio \"DW, todas as atividades de avalia\u00e7\u00e3o devem ser publicadas numa pasta /docs. Nessa pasta dever\u00e3o ser criadas as pastas ACs, AP1 e AP2. Ap\u00f3s a cria\u00e7\u00e3o das pastas deve ser feita a configura\u00e7\u00e3o do github pages. Settings Pages Na Branch fazer a sele\u00e7\u00e3o da pasta /docs para a publica\u00e7\u00e3o Salvar","title":"Avalia\u00e7\u00f5es"},{"location":"__Disciplina/Avalia%C3%A7%C3%B5es/ac/","text":"Entregas dos ACs AC1 - Entrega 12/03/2025 - Introdu\u00e7\u00e3o HTML AC2 - Entrega 03/04/2025 - Formul\u00e1rios AC3 - Entrega 03/04/2025 - Quest\u00f5es Enade AC4 - Entrega 17/04/2025 - CSS AC5 - Entrega 22/05/2025 - Intro JS - Lista de Tarefas AC6 - Entrega 12/06/2025 - DOM Formul\u00e1rio Valida\u00e7\u00e3o Reposit\u00f3rio de Avalia\u00e7\u00f5es ACs e APs Kaio Ana Clara Riessz Rechuanz Arthur Maurity Bernardo Miller Jo\u00e3o Victor Yago Carvalho Jo\u00e3o Victor Victor Coutinho Felipe Maia Bernardo Cicchelli","title":"Index"},{"location":"__Disciplina/Avalia%C3%A7%C3%B5es/ac/#entregas-dos-acs","text":"AC1 - Entrega 12/03/2025 - Introdu\u00e7\u00e3o HTML AC2 - Entrega 03/04/2025 - Formul\u00e1rios AC3 - Entrega 03/04/2025 - Quest\u00f5es Enade AC4 - Entrega 17/04/2025 - CSS AC5 - Entrega 22/05/2025 - Intro JS - Lista de Tarefas AC6 - Entrega 12/06/2025 - DOM Formul\u00e1rio Valida\u00e7\u00e3o Reposit\u00f3rio de Avalia\u00e7\u00f5es ACs e APs Kaio Ana Clara Riessz Rechuanz Arthur Maurity Bernardo Miller Jo\u00e3o Victor Yago Carvalho Jo\u00e3o Victor Victor Coutinho Felipe Maia Bernardo Cicchelli","title":"Entregas dos ACs"},{"location":"__Disciplina/Avalia%C3%A7%C3%B5es/ac/ac1/","text":"AC1: Criando uma p\u00e1gina da Web b\u00e1sica Objetivo : Ao final desta atividade, os alunos devem ser capazes de demonstrar sua compreens\u00e3o dos elementos b\u00e1sicos e da estrutura do HTML, criando uma p\u00e1gina da web de perfil pessoal. Instru\u00e7\u00f5es para a p\u00e1gina : Cabe\u00e7alho : Inclua um t\u00edtulo no topo com seu nome e um subt\u00edtulo com uma breve descri\u00e7\u00e3o de voc\u00ea. Imagem : Incorpore uma foto de perfil ou qualquer imagem representativa. Par\u00e1grafo : Escreva um pequeno par\u00e1grafo apresentando a si mesmo, sua forma\u00e7\u00e3o, interesses ou quaisquer curiosidades. Listas: Crie uma lista ordenada de seus 3 livros/filmes/m\u00fasicas favoritos. Crie uma lista n\u00e3o ordenada de 3 hobbies ou interesses. Hiperlinks : Adicione pelo menos dois links externos - um para o seu site favorito e outro para um artigo ou recurso interessante que voc\u00ea leu recentemente. Imagens : Adicione uma nova se\u00e7\u00e3o com duas atividades que voc\u00ea gosta. Escreva um pequeno texto e adicione uma imagem da atividade com link para um site sobre ela. Notas de rodap\u00e9 : Na parte inferior, inclua uma pequena se\u00e7\u00e3o de notas de rodap\u00e9 com cr\u00e9ditos para quaisquer imagens ou conte\u00fado que voc\u00ea usou. Considera\u00e7\u00f5es adicionais : Certifique-se de que seu documento tenha uma declara\u00e7\u00e3o DOCTYPE adequada e inclua tags essenciais como , e . <html>``<head>``<body> Certifique-se de que seu documento fa\u00e7o uso das tags sem\u00e2nticas como, <header>``<footer>``<nav> <section> <article> Use coment\u00e1rios para rotular cada se\u00e7\u00e3o. Verifique se o c\u00f3digo est\u00e1 recuado corretamente para facilitar a leitura.","title":"Ac1"},{"location":"__Disciplina/Avalia%C3%A7%C3%B5es/ac/ac1/#ac1-criando-uma-pagina-da-web-basica","text":"Objetivo : Ao final desta atividade, os alunos devem ser capazes de demonstrar sua compreens\u00e3o dos elementos b\u00e1sicos e da estrutura do HTML, criando uma p\u00e1gina da web de perfil pessoal. Instru\u00e7\u00f5es para a p\u00e1gina : Cabe\u00e7alho : Inclua um t\u00edtulo no topo com seu nome e um subt\u00edtulo com uma breve descri\u00e7\u00e3o de voc\u00ea. Imagem : Incorpore uma foto de perfil ou qualquer imagem representativa. Par\u00e1grafo : Escreva um pequeno par\u00e1grafo apresentando a si mesmo, sua forma\u00e7\u00e3o, interesses ou quaisquer curiosidades. Listas: Crie uma lista ordenada de seus 3 livros/filmes/m\u00fasicas favoritos. Crie uma lista n\u00e3o ordenada de 3 hobbies ou interesses. Hiperlinks : Adicione pelo menos dois links externos - um para o seu site favorito e outro para um artigo ou recurso interessante que voc\u00ea leu recentemente. Imagens : Adicione uma nova se\u00e7\u00e3o com duas atividades que voc\u00ea gosta. Escreva um pequeno texto e adicione uma imagem da atividade com link para um site sobre ela. Notas de rodap\u00e9 : Na parte inferior, inclua uma pequena se\u00e7\u00e3o de notas de rodap\u00e9 com cr\u00e9ditos para quaisquer imagens ou conte\u00fado que voc\u00ea usou. Considera\u00e7\u00f5es adicionais : Certifique-se de que seu documento tenha uma declara\u00e7\u00e3o DOCTYPE adequada e inclua tags essenciais como , e . <html>``<head>``<body> Certifique-se de que seu documento fa\u00e7o uso das tags sem\u00e2nticas como, <header>``<footer>``<nav> <section> <article> Use coment\u00e1rios para rotular cada se\u00e7\u00e3o. Verifique se o c\u00f3digo est\u00e1 recuado corretamente para facilitar a leitura.","title":"AC1: Criando uma p\u00e1gina da Web b\u00e1sica"},{"location":"__Disciplina/Avalia%C3%A7%C3%B5es/ac/ac2/","text":"AC2: P\u00e1gina da Web com Formul\u00e1rios e Multim\u00eddia Objetivo : Os alunos devem ser capazes de implementar e compreender a funcionalidade dos formul\u00e1rios HTML e integrar elementos multim\u00eddia em uma p\u00e1gina da web. Instru\u00e7\u00f5es para a p\u00e1gina : T\u00edtulo : Comece com um t\u00edtulo, \"Feedback para a p\u00e1gina de perfil de [Seu nome]\". Formul\u00e1rio: Dados pessoais: Campos de entrada para (tipo de texto) e (tipo de email). Name``Email Uma sele\u00e7\u00e3o suspensa para com op\u00e7\u00f5es como \"Google\", \"M\u00eddia social\", \"Amigo\", etc. How did you find my profile? Se\u00e7\u00e3o de feedback: Inclua uma \u00e1rea de texto para os visitantes escreverem coment\u00e1rios ou feedback. Use os bot\u00f5es de op\u00e7\u00e3o para \"Voc\u00ea gostou do meu perfil?\" com as op\u00e7\u00f5es \"Sim\", \"N\u00e3o\" e \"Talvez\". Use caixas de sele\u00e7\u00e3o para \"O que voc\u00ea gostou no perfil?\" com op\u00e7\u00f5es como \"Design\", \"Conte\u00fado\", \"Facilidade de uso\" e \"Outros\". Submiss\u00e3o: Um bot\u00e3o \"Enviar\" para enviar o formul\u00e1rio. Um bot\u00e3o \"Redefinir\" para limpar o formul\u00e1rio. Multim\u00eddia: Incorpore um videoclipe (pode ser uma introdu\u00e7\u00e3o pessoal, uma cena de filme favorita, um videoclipe, etc.). Use uma plataforma como YouTube ou Vimeo ou crie um link direto para um arquivo de v\u00eddeo. Adicione um clipe de \u00e1udio ou uma m\u00fasica favorita. Voc\u00ea pode usar plataformas como o SoundCloud ou vincular diretamente a um arquivo de \u00e1udio. Notas de rodap\u00e9 : inclua uma se\u00e7\u00e3o na parte inferior agradecendo aos usu\u00e1rios por seus coment\u00e1rios. Considera\u00e7\u00f5es adicionais : Seu formul\u00e1rio n\u00e3o precisa enviar dados para um servidor. O foco est\u00e1 na estrutura e nos elementos da forma. Use o elemento corretamente para entradas de formul\u00e1rio. <label> Certifique-se de que seus componentes multim\u00eddia tenham controles adequados (como reproduzir, pausar, volume). Organize adequadamente o layout para facilidade de uso. Comente suas se\u00e7\u00f5es de c\u00f3digo para melhorar a legibilidade. Ao concluir essas atividades, os alunos ter\u00e3o experi\u00eancia pr\u00e1tica na cria\u00e7\u00e3o de p\u00e1ginas da web com elementos variados, desde estruturas b\u00e1sicas at\u00e9 formul\u00e1rios e conte\u00fado multim\u00eddia.","title":"Ac2"},{"location":"__Disciplina/Avalia%C3%A7%C3%B5es/ac/ac2/#ac2-pagina-da-web-com-formularios-e-multimidia","text":"Objetivo : Os alunos devem ser capazes de implementar e compreender a funcionalidade dos formul\u00e1rios HTML e integrar elementos multim\u00eddia em uma p\u00e1gina da web. Instru\u00e7\u00f5es para a p\u00e1gina : T\u00edtulo : Comece com um t\u00edtulo, \"Feedback para a p\u00e1gina de perfil de [Seu nome]\". Formul\u00e1rio: Dados pessoais: Campos de entrada para (tipo de texto) e (tipo de email). Name``Email Uma sele\u00e7\u00e3o suspensa para com op\u00e7\u00f5es como \"Google\", \"M\u00eddia social\", \"Amigo\", etc. How did you find my profile? Se\u00e7\u00e3o de feedback: Inclua uma \u00e1rea de texto para os visitantes escreverem coment\u00e1rios ou feedback. Use os bot\u00f5es de op\u00e7\u00e3o para \"Voc\u00ea gostou do meu perfil?\" com as op\u00e7\u00f5es \"Sim\", \"N\u00e3o\" e \"Talvez\". Use caixas de sele\u00e7\u00e3o para \"O que voc\u00ea gostou no perfil?\" com op\u00e7\u00f5es como \"Design\", \"Conte\u00fado\", \"Facilidade de uso\" e \"Outros\". Submiss\u00e3o: Um bot\u00e3o \"Enviar\" para enviar o formul\u00e1rio. Um bot\u00e3o \"Redefinir\" para limpar o formul\u00e1rio. Multim\u00eddia: Incorpore um videoclipe (pode ser uma introdu\u00e7\u00e3o pessoal, uma cena de filme favorita, um videoclipe, etc.). Use uma plataforma como YouTube ou Vimeo ou crie um link direto para um arquivo de v\u00eddeo. Adicione um clipe de \u00e1udio ou uma m\u00fasica favorita. Voc\u00ea pode usar plataformas como o SoundCloud ou vincular diretamente a um arquivo de \u00e1udio. Notas de rodap\u00e9 : inclua uma se\u00e7\u00e3o na parte inferior agradecendo aos usu\u00e1rios por seus coment\u00e1rios. Considera\u00e7\u00f5es adicionais : Seu formul\u00e1rio n\u00e3o precisa enviar dados para um servidor. O foco est\u00e1 na estrutura e nos elementos da forma. Use o elemento corretamente para entradas de formul\u00e1rio. <label> Certifique-se de que seus componentes multim\u00eddia tenham controles adequados (como reproduzir, pausar, volume). Organize adequadamente o layout para facilidade de uso. Comente suas se\u00e7\u00f5es de c\u00f3digo para melhorar a legibilidade. Ao concluir essas atividades, os alunos ter\u00e3o experi\u00eancia pr\u00e1tica na cria\u00e7\u00e3o de p\u00e1ginas da web com elementos variados, desde estruturas b\u00e1sicas at\u00e9 formul\u00e1rios e conte\u00fado multim\u00eddia.","title":"AC2: P\u00e1gina da Web com Formul\u00e1rios e Multim\u00eddia"},{"location":"__Disciplina/Avalia%C3%A7%C3%B5es/ac/ac3/","text":"AC3: Quest\u00f5es Molde Enade Um desenvolvedor front-end est\u00e1 criando um site responsivo para uma biblioteca comunit\u00e1ria. O layout deve se adaptar a dispositivos m\u00f3veis, tablets e desktops, seguindo as melhores pr\u00e1ticas de acessibilidade e sem\u00e2ntica HTML. O design inclui: Um cabe\u00e7alho com logo e menu de navega\u00e7\u00e3o Uma se\u00e7\u00e3o hero com imagem de fundo e texto sobreposto Um grid de livros em destaque Um rodap\u00e9 com informa\u00e7\u00f5es de contato O c\u00f3digo HTML parcial \u00e9: <header class=\"cabecalho\"> <img src=\"logo.svg\" alt=\"Logo Biblioteca Comunit\u00e1ria\"> <nav aria-label=\"Navega\u00e7\u00e3o principal\"> <ul> <li><a href=\"#inicio\">In\u00edcio</a></li> <li><a href=\"#acervo\">Acervo</a></li> <li><a href=\"#eventos\">Eventos</a></li> </ul> </nav> </header> <section class=\"hero\"> <h1>Leitura para todos</h1> <p>Explore nosso acervo com mais de 10.000 t\u00edtulos</p> </section> Quest\u00e3o Ao implementar o CSS para atender aos requisitos de responsividade e acessibilidade, qual das seguintes abordagens \u00e9 MAIS adequada ? A) Usar unidades fixas como pixels para todos os elementos, garantindo fidelidade ao layout original em todos os dispositivos. B) Utilizar media queries com breakpoints baseados em dispositivos espec\u00edficos (ex: @media (max-width: 768px) para iPads). C) Combinar unidades relativas (rem, %), container queries e media queries com breakpoints baseados no conte\u00fado. D) Priorizar o uso de !important para sobrescrever estilos em diferentes viewports, garantindo consist\u00eancia visual. E) Implementar todos os estilos diretamente nos elementos HTML usando atributos style, sem folhas de CSS externas. -- 2./ Um desenvolvedor est\u00e1 criando um formul\u00e1rio de cadastro para um site de cursos online. Os requisitos incluem: Campos para nome , e-mail , senha e telefone . Valida\u00e7\u00e3o em tempo real (client-side). Estiliza\u00e7\u00e3o consistente e acess\u00edvel. Mensagens de erro claras. Compatibilidade com leitores de tela. O c\u00f3digo HTML atual \u00e9: <form id=\"cadastro\"> <div> <label>Nome:</label> <input type=\"text\" name=\"nome\"> </div> <div> <label>E-mail:</label> <input type=\"email\" name=\"email\"> </div> <div> <label>Senha:</label> <input type=\"password\" name=\"senha\"> </div> <div> <label>Telefone:</label> <input type=\"tel\" name=\"telefone\"> </div> <button type=\"submit\">Cadastrar</button> </form> Quest\u00e3o Qual das seguintes modifica\u00e7\u00f5es melhora significativamente a acessibilidade e usabilidade do formul\u00e1rio? A) Substituir os <label> por <span> e estiliz\u00e1-los com CSS para ficarem mais atraentes visualmente. B) Adicionar autocomplete=\"off\" em todos os campos para evitar sugest\u00f5es do navegador. C) Incluir aria-label em cada input e remover as tags <label> para simplificar o c\u00f3digo. D) Associar cada <label> ao respectivo input usando for e id , e adicionar aria-describedby para mensagens de erro. E) Substituir os inputs de senha por texto ( type=\"text\" ) para melhorar a experi\u00eancia do usu\u00e1rio. -- 3./ Um desenvolvedor est\u00e1 atualizando um site antigo que utiliza float para criar um layout de duas colunas. O c\u00f3digo HTML/CSS original \u00e9: <div class=\"container\"> <div class=\"box left\">Conte\u00fado \u00e0 esquerda</div> <div class=\"box right\">Conte\u00fado \u00e0 direita</div> <div class=\"footer\">Rodap\u00e9</div> </div> .box { width: 45%; padding: 10px; } .left { float: left; } .right { float: right; } .footer { background-color: #eee; } Por\u00e9m, o rodap\u00e9 ( footer ) est\u00e1 aparecendo ao lado dos elementos flutuantes , em vez de abaixo deles, como deveria. Quest\u00e3o: Qual das seguintes solu\u00e7\u00f5es resolve corretamente o problema do rodap\u00e9 e mant\u00e9m o layout de duas colunas ? A) Adicionar overflow: hidden; ao seletor .footer para conter os elementos flutuantes. B) Usar clear: both; no .footer para for\u00e7\u00e1-lo a aparecer abaixo dos elementos flutuantes. C) Substituir os float por display: inline-block; nos elementos .box e remover as propriedades float . D) Adicionar position: absolute; ao .footer para posicion\u00e1-lo manualmente abaixo das colunas. E) Aplicar flexbox no .container ( display: flex; ) e remover todas as propriedades float . 4./ Um desenvolvedor est\u00e1 criando uma tabela para exibir dados de produtos em um e-commerce. Os requisitos incluem: Design responsivo (adapt\u00e1vel a mobile/desktop). Estiliza\u00e7\u00e3o avan\u00e7ada (linhas zebradas, hover effects). Acessibilidade (leitura sem\u00e2ntica por leitores de tela). O c\u00f3digo HTML inicial \u00e9: <table class=\"produtos\"> <tr> <th>ID</th> <th>Nome</th> <th>Pre\u00e7o</th> </tr> <tr> <td>001</td> <td>Smartphone XYZ</td> <td>R$ 1.999</td> </tr> <!-- Mais linhas... --> </table> Quest\u00e3o: Qual das seguintes abordagens de CSS atende melhor aos requisitos do projeto? A) Usar apenas display: block; em todos os elementos da tabela ( table , tr , td ) para facilitar a responsividade. B) Manter a estrutura sem\u00e2ntica da tabela e aplicar: css .produtos { width: 100%; border-collapse: collapse; } .produtos th, .produtos td { padding: 12px; text-align: left; border-bottom: 1px solid #ddd; } .produtos tr:nth-child(even) { background-color: #f2f2f2; } .produtos tr:hover { background-color: #e6f7ff; } @media (max-width: 600px) { .produtos thead { display: none; } .produtos td { display: block; } .produtos td::before { content: attr(data-label); font-weight: bold; display: inline-block; width: 120px; } } E adicionar data-label=\"Nome\" (por exemplo) em cada <td> . C) Substituir a tabela por <div> s estilizadas com flexbox para evitar os problemas de layout de tabelas tradicionais. D) Utilizar float: left; em cada c\u00e9lula ( td ) e definir larguras fixas em pixels para garantir alinhamento. E) Adicionar position: absolute; aos cabe\u00e7alhos ( th ) para fix\u00e1-los no topo durante o scroll.","title":"Ac3"},{"location":"__Disciplina/Avalia%C3%A7%C3%B5es/ac/ac3/#ac3-questoes-molde-enade","text":"Um desenvolvedor front-end est\u00e1 criando um site responsivo para uma biblioteca comunit\u00e1ria. O layout deve se adaptar a dispositivos m\u00f3veis, tablets e desktops, seguindo as melhores pr\u00e1ticas de acessibilidade e sem\u00e2ntica HTML. O design inclui: Um cabe\u00e7alho com logo e menu de navega\u00e7\u00e3o Uma se\u00e7\u00e3o hero com imagem de fundo e texto sobreposto Um grid de livros em destaque Um rodap\u00e9 com informa\u00e7\u00f5es de contato O c\u00f3digo HTML parcial \u00e9: <header class=\"cabecalho\"> <img src=\"logo.svg\" alt=\"Logo Biblioteca Comunit\u00e1ria\"> <nav aria-label=\"Navega\u00e7\u00e3o principal\"> <ul> <li><a href=\"#inicio\">In\u00edcio</a></li> <li><a href=\"#acervo\">Acervo</a></li> <li><a href=\"#eventos\">Eventos</a></li> </ul> </nav> </header> <section class=\"hero\"> <h1>Leitura para todos</h1> <p>Explore nosso acervo com mais de 10.000 t\u00edtulos</p> </section>","title":"AC3: Quest\u00f5es Molde Enade"},{"location":"__Disciplina/Avalia%C3%A7%C3%B5es/ac/ac3/#questao","text":"Ao implementar o CSS para atender aos requisitos de responsividade e acessibilidade, qual das seguintes abordagens \u00e9 MAIS adequada ? A) Usar unidades fixas como pixels para todos os elementos, garantindo fidelidade ao layout original em todos os dispositivos. B) Utilizar media queries com breakpoints baseados em dispositivos espec\u00edficos (ex: @media (max-width: 768px) para iPads). C) Combinar unidades relativas (rem, %), container queries e media queries com breakpoints baseados no conte\u00fado. D) Priorizar o uso de !important para sobrescrever estilos em diferentes viewports, garantindo consist\u00eancia visual. E) Implementar todos os estilos diretamente nos elementos HTML usando atributos style, sem folhas de CSS externas. -- 2./ Um desenvolvedor est\u00e1 criando um formul\u00e1rio de cadastro para um site de cursos online. Os requisitos incluem: Campos para nome , e-mail , senha e telefone . Valida\u00e7\u00e3o em tempo real (client-side). Estiliza\u00e7\u00e3o consistente e acess\u00edvel. Mensagens de erro claras. Compatibilidade com leitores de tela. O c\u00f3digo HTML atual \u00e9: <form id=\"cadastro\"> <div> <label>Nome:</label> <input type=\"text\" name=\"nome\"> </div> <div> <label>E-mail:</label> <input type=\"email\" name=\"email\"> </div> <div> <label>Senha:</label> <input type=\"password\" name=\"senha\"> </div> <div> <label>Telefone:</label> <input type=\"tel\" name=\"telefone\"> </div> <button type=\"submit\">Cadastrar</button> </form> Quest\u00e3o Qual das seguintes modifica\u00e7\u00f5es melhora significativamente a acessibilidade e usabilidade do formul\u00e1rio? A) Substituir os <label> por <span> e estiliz\u00e1-los com CSS para ficarem mais atraentes visualmente. B) Adicionar autocomplete=\"off\" em todos os campos para evitar sugest\u00f5es do navegador. C) Incluir aria-label em cada input e remover as tags <label> para simplificar o c\u00f3digo. D) Associar cada <label> ao respectivo input usando for e id , e adicionar aria-describedby para mensagens de erro. E) Substituir os inputs de senha por texto ( type=\"text\" ) para melhorar a experi\u00eancia do usu\u00e1rio. -- 3./ Um desenvolvedor est\u00e1 atualizando um site antigo que utiliza float para criar um layout de duas colunas. O c\u00f3digo HTML/CSS original \u00e9: <div class=\"container\"> <div class=\"box left\">Conte\u00fado \u00e0 esquerda</div> <div class=\"box right\">Conte\u00fado \u00e0 direita</div> <div class=\"footer\">Rodap\u00e9</div> </div> .box { width: 45%; padding: 10px; } .left { float: left; } .right { float: right; } .footer { background-color: #eee; } Por\u00e9m, o rodap\u00e9 ( footer ) est\u00e1 aparecendo ao lado dos elementos flutuantes , em vez de abaixo deles, como deveria. Quest\u00e3o: Qual das seguintes solu\u00e7\u00f5es resolve corretamente o problema do rodap\u00e9 e mant\u00e9m o layout de duas colunas ? A) Adicionar overflow: hidden; ao seletor .footer para conter os elementos flutuantes. B) Usar clear: both; no .footer para for\u00e7\u00e1-lo a aparecer abaixo dos elementos flutuantes. C) Substituir os float por display: inline-block; nos elementos .box e remover as propriedades float . D) Adicionar position: absolute; ao .footer para posicion\u00e1-lo manualmente abaixo das colunas. E) Aplicar flexbox no .container ( display: flex; ) e remover todas as propriedades float . 4./ Um desenvolvedor est\u00e1 criando uma tabela para exibir dados de produtos em um e-commerce. Os requisitos incluem: Design responsivo (adapt\u00e1vel a mobile/desktop). Estiliza\u00e7\u00e3o avan\u00e7ada (linhas zebradas, hover effects). Acessibilidade (leitura sem\u00e2ntica por leitores de tela). O c\u00f3digo HTML inicial \u00e9: <table class=\"produtos\"> <tr> <th>ID</th> <th>Nome</th> <th>Pre\u00e7o</th> </tr> <tr> <td>001</td> <td>Smartphone XYZ</td> <td>R$ 1.999</td> </tr> <!-- Mais linhas... --> </table> Quest\u00e3o: Qual das seguintes abordagens de CSS atende melhor aos requisitos do projeto? A) Usar apenas display: block; em todos os elementos da tabela ( table , tr , td ) para facilitar a responsividade. B) Manter a estrutura sem\u00e2ntica da tabela e aplicar: css .produtos { width: 100%; border-collapse: collapse; } .produtos th, .produtos td { padding: 12px; text-align: left; border-bottom: 1px solid #ddd; } .produtos tr:nth-child(even) { background-color: #f2f2f2; } .produtos tr:hover { background-color: #e6f7ff; } @media (max-width: 600px) { .produtos thead { display: none; } .produtos td { display: block; } .produtos td::before { content: attr(data-label); font-weight: bold; display: inline-block; width: 120px; } } E adicionar data-label=\"Nome\" (por exemplo) em cada <td> . C) Substituir a tabela por <div> s estilizadas com flexbox para evitar os problemas de layout de tabelas tradicionais. D) Utilizar float: left; em cada c\u00e9lula ( td ) e definir larguras fixas em pixels para garantir alinhamento. E) Adicionar position: absolute; aos cabe\u00e7alhos ( th ) para fix\u00e1-los no topo durante o scroll.","title":"Quest\u00e3o"},{"location":"__Disciplina/Avalia%C3%A7%C3%B5es/ac/ac4/","text":"AC4: Estilizando uma p\u00e1gina da Web b\u00e1sica com CSS Dura\u00e7\u00e3o : 70 minutos Objetivo : Os alunos aplicar\u00e3o seletores, propriedades e valores CSS para aprimorar o design de uma determinada p\u00e1gina HTML b\u00e1sica. Instru\u00e7\u00f5es : Estrutura da p\u00e1gina : Baixe a p\u00e1gina HTML b\u00e1sica fornecida, que inclui um cabe\u00e7alho, alguns par\u00e1grafos, uma imagem e uma lista. Voc\u00ea tamb\u00e9m pode usar o arquivo HTML que desenvolveu para se apresentar. Comece adicionando um estilo geral: Defina uma cor de fundo para a p\u00e1gina inteira. Defina uma largura m\u00e1xima para o conte\u00fado e centralize-o. Tipografia e cor : Modifique o texto: Defina um tamanho de fonte base e uma altura de linha para a p\u00e1gina inteira. Escolha uma fam\u00edlia de fontes para cabe\u00e7alhos e outra para o corpo do texto. Ajuste a cor e o peso dos cabe\u00e7alhos. Adicione altera\u00e7\u00f5es de cor instant\u00e2neas para links. Estilizando imagens e listas : Para a imagem: Adicione uma borda. Adicione um pouco de sombra para um efeito lifting. Certifique-se de que seja responsivo, diminuindo com a largura da p\u00e1gina. Para a lista: Adicione marcadores ou n\u00fameros personalizados. Ajuste as margens e o preenchimento para obter o espa\u00e7amento adequado. Feedback e revis\u00e3o : Junte-se a outro aluno e revise o trabalho um do outro. Ofere\u00e7a feedback sobre suas escolhas de design e quaisquer melhorias que possam ser feitas. Essas atividades s\u00e3o estruturadas para garantir que os alunos n\u00e3o apenas pratiquem os aspectos t\u00e9cnicos do CSS, mas tamb\u00e9m pensem nas decis\u00f5es de design e obtenham feedback. No final, devem ter uma boa compreens\u00e3o de como projetar e fazer o layout de uma p\u00e1gina da Web usando CSS. ARQUIVO HTML: <!DOCTYPE html> <html lang=\"en\"> <head> <meta charset=\"UTF-8\"> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"> <title>Styling with CSS Activity</title> <!-- <style> Put your CSS here. For now, it's commented out. </style> </head> <body> <header> <h1>Welcome to My Page</h1> <p>This is a brief introduction about the page.</p> </header> <main> <section> <h2>About Me</h2> <p>My name is Jane Doe and I'm a web developer from New York. I love creating responsive and interactive websites. In my free time, I enjoy hiking, reading, and exploring new cafes in the city.</p> <img src=\"https://via.placeholder.com/350x150\" alt=\"A placeholder image of Jane Doe\"> </section> <section> <h2>My Favorite Books</h2> <ul> <li><a href=\"https://en.wikipedia.org/wiki/The_Great_Gatsby\">The Great Gatsby</a> by F. Scott Fitzgerald</li> <li><a href=\"https://en.wikipedia.org/wiki/To_Kill_a_Mockingbird\">To Kill a Mockingbird</a> by Harper Lee</li> <li><a href=\"https://en.wikipedia.org/wiki/Nineteen_Eighty-Four\">1984</a> by George Orwell</li> <li><a href=\"https://en.wikipedia.org/wiki/Pride_and_Prejudice\">Pride and Prejudice</a> by Jane Austen</li> </ul> </section> </main> <footer> <p>\u00a9 2023 by Jane Doe. All Rights Reserved.</p> </footer> </body> </html> Esta p\u00e1gina cont\u00e9m: Um cabe\u00e7alho com um t\u00edtulo principal e introdu\u00e7\u00e3o. Uma \u00e1rea de conte\u00fado principal com duas se\u00e7\u00f5es: Uma se\u00e7\u00e3o \"Sobre mim\" com uma pequena biografia e uma imagem. Uma se\u00e7\u00e3o listando livros favoritos. Um rodap\u00e9 com um aviso de direitos autorais. Espera-se que os alunos estilizem isso usando CSS, conforme descrito na atividade. O link da imagem \u00e9 um espa\u00e7o reservado e pode ser substitu\u00eddo por qualquer imagem que os alunos desejem usar.","title":"Ac4"},{"location":"__Disciplina/Avalia%C3%A7%C3%B5es/ac/ac4/#ac4-estilizando-uma-pagina-da-web-basica-com-css","text":"Dura\u00e7\u00e3o : 70 minutos Objetivo : Os alunos aplicar\u00e3o seletores, propriedades e valores CSS para aprimorar o design de uma determinada p\u00e1gina HTML b\u00e1sica. Instru\u00e7\u00f5es : Estrutura da p\u00e1gina : Baixe a p\u00e1gina HTML b\u00e1sica fornecida, que inclui um cabe\u00e7alho, alguns par\u00e1grafos, uma imagem e uma lista. Voc\u00ea tamb\u00e9m pode usar o arquivo HTML que desenvolveu para se apresentar. Comece adicionando um estilo geral: Defina uma cor de fundo para a p\u00e1gina inteira. Defina uma largura m\u00e1xima para o conte\u00fado e centralize-o. Tipografia e cor : Modifique o texto: Defina um tamanho de fonte base e uma altura de linha para a p\u00e1gina inteira. Escolha uma fam\u00edlia de fontes para cabe\u00e7alhos e outra para o corpo do texto. Ajuste a cor e o peso dos cabe\u00e7alhos. Adicione altera\u00e7\u00f5es de cor instant\u00e2neas para links. Estilizando imagens e listas : Para a imagem: Adicione uma borda. Adicione um pouco de sombra para um efeito lifting. Certifique-se de que seja responsivo, diminuindo com a largura da p\u00e1gina. Para a lista: Adicione marcadores ou n\u00fameros personalizados. Ajuste as margens e o preenchimento para obter o espa\u00e7amento adequado. Feedback e revis\u00e3o : Junte-se a outro aluno e revise o trabalho um do outro. Ofere\u00e7a feedback sobre suas escolhas de design e quaisquer melhorias que possam ser feitas. Essas atividades s\u00e3o estruturadas para garantir que os alunos n\u00e3o apenas pratiquem os aspectos t\u00e9cnicos do CSS, mas tamb\u00e9m pensem nas decis\u00f5es de design e obtenham feedback. No final, devem ter uma boa compreens\u00e3o de como projetar e fazer o layout de uma p\u00e1gina da Web usando CSS. ARQUIVO HTML: <!DOCTYPE html> <html lang=\"en\"> <head> <meta charset=\"UTF-8\"> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"> <title>Styling with CSS Activity</title> <!-- <style> Put your CSS here. For now, it's commented out. </style> </head> <body> <header> <h1>Welcome to My Page</h1> <p>This is a brief introduction about the page.</p> </header> <main> <section> <h2>About Me</h2> <p>My name is Jane Doe and I'm a web developer from New York. I love creating responsive and interactive websites. In my free time, I enjoy hiking, reading, and exploring new cafes in the city.</p> <img src=\"https://via.placeholder.com/350x150\" alt=\"A placeholder image of Jane Doe\"> </section> <section> <h2>My Favorite Books</h2> <ul> <li><a href=\"https://en.wikipedia.org/wiki/The_Great_Gatsby\">The Great Gatsby</a> by F. Scott Fitzgerald</li> <li><a href=\"https://en.wikipedia.org/wiki/To_Kill_a_Mockingbird\">To Kill a Mockingbird</a> by Harper Lee</li> <li><a href=\"https://en.wikipedia.org/wiki/Nineteen_Eighty-Four\">1984</a> by George Orwell</li> <li><a href=\"https://en.wikipedia.org/wiki/Pride_and_Prejudice\">Pride and Prejudice</a> by Jane Austen</li> </ul> </section> </main> <footer> <p>\u00a9 2023 by Jane Doe. All Rights Reserved.</p> </footer> </body> </html> Esta p\u00e1gina cont\u00e9m: Um cabe\u00e7alho com um t\u00edtulo principal e introdu\u00e7\u00e3o. Uma \u00e1rea de conte\u00fado principal com duas se\u00e7\u00f5es: Uma se\u00e7\u00e3o \"Sobre mim\" com uma pequena biografia e uma imagem. Uma se\u00e7\u00e3o listando livros favoritos. Um rodap\u00e9 com um aviso de direitos autorais. Espera-se que os alunos estilizem isso usando CSS, conforme descrito na atividade. O link da imagem \u00e9 um espa\u00e7o reservado e pode ser substitu\u00eddo por qualquer imagem que os alunos desejem usar.","title":"AC4: Estilizando uma p\u00e1gina da Web b\u00e1sica com CSS"},{"location":"__Disciplina/Avalia%C3%A7%C3%B5es/ac/ac5/","text":"AC5: Criando um Gerenciador de Lista de Tarefas Objetivo: Desenvolver um pequeno programa que permite gerenciar uma lista de tarefas. Esse programa ir\u00e1 adicionar, remover e listar as tarefas com base nas op\u00e7\u00f5es fornecidas pelo usu\u00e1rio. Instru\u00e7\u00f5es : 1. Vari\u00e1veis e Tipos de Dados: Declare uma vari\u00e1vel que ser\u00e1 uma lista (array) vazia para armazenar as tarefas. Use diferentes tipos de dados, como strings para as tarefas e n\u00fameros para a escolha do usu\u00e1rio. 2. Operadores e Controle de Fluxo: Use operadores de compara\u00e7\u00e3o para verificar a escolha do usu\u00e1rio. Use um loop para permitir que o usu\u00e1rio continue gerenciando a lista at\u00e9 que ele escolha sair. 3. Fun\u00e7\u00f5es com Arrays e Strings: Adicionar uma nova tarefa. Remover uma tarefa espec\u00edfica. Listar todas as tarefas. Instru\u00e7\u00f5es: Crie um arquivo todo.js e adicione o c\u00f3digo JavaScript a seguir. Execute-o em um navegador ou vscode para testar. Conceitos Envolvidos: 1. Vari\u00e1veis ( let , const , var ) : let tasks = [] : Uma vari\u00e1vel que pode mudar durante o programa (array). const newTask : Uma vari\u00e1vel constante que n\u00e3o mudar\u00e1 ap\u00f3s ser definida. 2. Tipos de Dados: tasks : Um array que armazena strings. newTask : Uma string que representa o nome da tarefa. 3. Fluxo de Controle: switch-case : Usado para tratar as op\u00e7\u00f5es do menu. while : Mant\u00e9m o programa em execu\u00e7\u00e3o at\u00e9 o usu\u00e1rio escolher sair. 4. Arrays: M\u00e9todos como .push() para adicionar uma nova tarefa e .splice() para remover uma tarefa do array. 5. Strings: Manipula\u00e7\u00e3o de strings para exibir mensagens e armazenar o nome das tarefas. 6. Operadores: Operadores de compara\u00e7\u00e3o (como >= , < , e === ) para verificar as entradas do usu\u00e1rio.","title":"Ac5"},{"location":"__Disciplina/Avalia%C3%A7%C3%B5es/ac/ac5/#ac5-criando-um-gerenciador-de-lista-de-tarefas","text":"Objetivo: Desenvolver um pequeno programa que permite gerenciar uma lista de tarefas. Esse programa ir\u00e1 adicionar, remover e listar as tarefas com base nas op\u00e7\u00f5es fornecidas pelo usu\u00e1rio.","title":"AC5: Criando um Gerenciador de Lista de Tarefas"},{"location":"__Disciplina/Avalia%C3%A7%C3%B5es/ac/ac5/#instrucoes","text":"","title":"Instru\u00e7\u00f5es :"},{"location":"__Disciplina/Avalia%C3%A7%C3%B5es/ac/ac5/#1-variaveis-e-tipos-de-dados","text":"Declare uma vari\u00e1vel que ser\u00e1 uma lista (array) vazia para armazenar as tarefas. Use diferentes tipos de dados, como strings para as tarefas e n\u00fameros para a escolha do usu\u00e1rio.","title":"1. Vari\u00e1veis e Tipos de Dados:"},{"location":"__Disciplina/Avalia%C3%A7%C3%B5es/ac/ac5/#2-operadores-e-controle-de-fluxo","text":"Use operadores de compara\u00e7\u00e3o para verificar a escolha do usu\u00e1rio. Use um loop para permitir que o usu\u00e1rio continue gerenciando a lista at\u00e9 que ele escolha sair.","title":"2. Operadores e Controle de Fluxo:"},{"location":"__Disciplina/Avalia%C3%A7%C3%B5es/ac/ac5/#3-funcoes-com-arrays-e-strings","text":"Adicionar uma nova tarefa. Remover uma tarefa espec\u00edfica. Listar todas as tarefas.","title":"3. Fun\u00e7\u00f5es com Arrays e Strings:"},{"location":"__Disciplina/Avalia%C3%A7%C3%B5es/ac/ac5/#instrucoes_1","text":"Crie um arquivo todo.js e adicione o c\u00f3digo JavaScript a seguir. Execute-o em um navegador ou vscode para testar.","title":"Instru\u00e7\u00f5es:"},{"location":"__Disciplina/Avalia%C3%A7%C3%B5es/ac/ac5/#conceitos-envolvidos","text":"","title":"Conceitos Envolvidos:"},{"location":"__Disciplina/Avalia%C3%A7%C3%B5es/ac/ac5/#1-variaveis-let-const-var","text":"let tasks = [] : Uma vari\u00e1vel que pode mudar durante o programa (array). const newTask : Uma vari\u00e1vel constante que n\u00e3o mudar\u00e1 ap\u00f3s ser definida.","title":"1. Vari\u00e1veis (let, const, var):"},{"location":"__Disciplina/Avalia%C3%A7%C3%B5es/ac/ac5/#2-tipos-de-dados","text":"tasks : Um array que armazena strings. newTask : Uma string que representa o nome da tarefa.","title":"2. Tipos de Dados:"},{"location":"__Disciplina/Avalia%C3%A7%C3%B5es/ac/ac5/#3-fluxo-de-controle","text":"switch-case : Usado para tratar as op\u00e7\u00f5es do menu. while : Mant\u00e9m o programa em execu\u00e7\u00e3o at\u00e9 o usu\u00e1rio escolher sair.","title":"3. Fluxo de Controle:"},{"location":"__Disciplina/Avalia%C3%A7%C3%B5es/ac/ac5/#4-arrays","text":"M\u00e9todos como .push() para adicionar uma nova tarefa e .splice() para remover uma tarefa do array.","title":"4. Arrays:"},{"location":"__Disciplina/Avalia%C3%A7%C3%B5es/ac/ac5/#5-strings","text":"Manipula\u00e7\u00e3o de strings para exibir mensagens e armazenar o nome das tarefas.","title":"5. Strings:"},{"location":"__Disciplina/Avalia%C3%A7%C3%B5es/ac/ac5/#6-operadores","text":"Operadores de compara\u00e7\u00e3o (como >= , < , e === ) para verificar as entradas do usu\u00e1rio.","title":"6. Operadores:"},{"location":"__Disciplina/Avalia%C3%A7%C3%B5es/ac/ac6/","text":"AC6: Manipulando Formul\u00e1rios com Javascript IMPORTANTE: Todas as quest\u00f5es precisam ser devidamente comentadas com explica\u00e7\u00f5es precisas do que ocorre. Objetivo: Desenvolver um formul\u00e1rio que ter\u00e1 os seus campos validados e monitorados por javascript. Uso de javascript em formul\u00e1rios Plano Criar um formul\u00e1rio HTML simples com campos de entrada. Adicionar um bot\u00e3o para enviar o formul\u00e1rio. Escrever um script JavaScript para validar os dados do formul\u00e1rio. Exibir mensagens de erro ou sucesso com base na valida\u00e7\u00e3o. <!DOCTYPEhtml> <htmllang=\"pt-BR\"> <head> <metacharset=\"UTF-8\"> <metaname=\"viewport\"content=\"width=device-width, initial-scale=1.0\"> <title>Formul\u00e1rio com JavaScript</title> <linkrel=\"stylesheet\"href=\"styles.css\"> </head> <body> <h1>Formul\u00e1rio de Contato</h1> <formid=\"contactForm\"> <divclass=\"form-group\"> <labelfor=\"name\">Nome:</label> <inputtype=\"text\"id=\"name\"name=\"name\"required> </div> <divclass=\"form-group\"> <labelfor=\"email\">Email:</label> <inputtype=\"email\"id=\"email\"name=\"email\"required> </div> <divclass=\"form-group\"> <labelfor=\"message\">Mensagem:</label> <textareaid=\"message\"name=\"message\"required></textarea> </div> <buttontype=\"submit\">Enviar</button> </form> <scriptsrc=\"script.js\"></script> </body> </html> body { font-family: Arial, sans-serif; background-color: #f4f4f4; margin: 0; padding: 0; display: flex; justify-content: center; align-items: center; height: 100vh; } h1 { text-align: center; color: #333; } form { background: #fff; padding: 20px; border-radius: 8px; box-shadow: 0010px rgba(0, 0, 0, 0.1); width: 100%; max-width: 400px; } .form-group { margin-bottom: 15px; } label { display: block; margin-bottom: 5px; color: #333; } input[type=\"text\"], input[type=\"email\"], textarea, input[type=\"file\"] { width: 100%; padding: 10px; border: 1px solid #ccc; border-radius: 4px; box-sizing: border-box; } textarea { resize: vertical; } button[type=\"submit\"] { background-color: #28a745; color: #fff; border: none; padding: 10px 20px; border-radius: 4px; cursor: pointer; width: 100%; } button[type=\"submit\"]:disabled { background-color: #ccc; cursor: not-allowed; } button[type=\"submit\"]:hover:not(:disabled) { background-color: #218838; } #result { margin-top: 20px; text-align: center; } #spinner { text-align: center; margin-top: 20px; } #imagePreview { margin-top: 20px; text-align: center; } #imagePreviewimg { max-width: 100%; height: auto; border-radius: 4px; } Explica\u00e7\u00e3o HTML: Cria um formul\u00e1rio com campos para nome, email e mensagem. JavaScript: Adiciona um ouvinte de evento para o envio do formul\u00e1rio, valida os campos e exibe uma mensagem de erro ou sucesso. Quest\u00f5es 1. Como voc\u00ea pode acessar os valores dos inputs do formul\u00e1rio? 2. Atualizar o conte\u00fado de uma p\u00e1gina web com o conte\u00fado do campos(escrever na p\u00e1gina sem clicar no bot\u00e3o)? 3. Validar cada entrada do formul\u00e1rio antes de enviar o form? [Nome obrigat\u00f3rio, Email no formato, Mensagem obrigat\u00f3ria] 4. Redefinir as entradas do formul\u00e1rio ap\u00f3s enviar o formul\u00e1rio? 5. Desativar o bot\u00e3o enviar at\u00e9 que todas as entradas do formul\u00e1rio sejam preenchidas? 6. Mostrar um bot\u00e3o girat\u00f3rio(spinner) de carregamento enquanto o formul\u00e1rio est\u00e1 sendo enviado? 7. Eibir uma mensagem de sucesso ap\u00f3s o envio do formul\u00e1rio e depois redirecionar para outra p\u00e1gina? 8. Adicionar Valida\u00e7\u00e3o de Tamanho da Mensagem Objetivo: Adicionar valida\u00e7\u00e3o para garantir que a mensagem tenha pelo menos 100 caracteres. 9. Adicionar Feedback Visual para Campos Inv\u00e1lidos Objetivo: Adicionar feedback visual (como bordas vermelhas) aos campos que n\u00e3o passam na valida\u00e7\u00e3o. 10. Adicionar um Campo de Telefone com M\u00e1scara. [ (pa\u00eds) (ddd) xxxxx-xxxx ] 11. Adicionar um Campo de Sele\u00e7\u00e3o de Assunto. [Elogio, Reclama\u00e7\u00e3o e Sugest\u00e3o] Exiba uma mensagem de erro se nenhum assunto for selecionado. 12. Adicionar um Campo de Arquivo ao Formul\u00e1rio para permitir o upload de imagens. Modifique o JavaScript para Exibir a Pr\u00e9-visualiza\u00e7\u00e3o do Arquivo Selecionado FileReader: Usa FileReader para ler o arquivo de imagem e exibir a pr\u00e9-visualiza\u00e7\u00e3o. Limpar Pr\u00e9-visualiza\u00e7\u00e3o: Limpa a pr\u00e9-visualiza\u00e7\u00e3o da imagem quando o formul\u00e1rio \u00e9 enviado e redefinido.","title":"Ac6"},{"location":"__Disciplina/Avalia%C3%A7%C3%B5es/ac/ac6/#ac6-manipulando-formularios-com-javascript","text":"IMPORTANTE: Todas as quest\u00f5es precisam ser devidamente comentadas com explica\u00e7\u00f5es precisas do que ocorre. Objetivo: Desenvolver um formul\u00e1rio que ter\u00e1 os seus campos validados e monitorados por javascript.","title":"AC6: Manipulando Formul\u00e1rios com Javascript"},{"location":"__Disciplina/Avalia%C3%A7%C3%B5es/ac/ac6/#uso-de-javascript-em-formularios","text":"Plano Criar um formul\u00e1rio HTML simples com campos de entrada. Adicionar um bot\u00e3o para enviar o formul\u00e1rio. Escrever um script JavaScript para validar os dados do formul\u00e1rio. Exibir mensagens de erro ou sucesso com base na valida\u00e7\u00e3o. <!DOCTYPEhtml> <htmllang=\"pt-BR\"> <head> <metacharset=\"UTF-8\"> <metaname=\"viewport\"content=\"width=device-width, initial-scale=1.0\"> <title>Formul\u00e1rio com JavaScript</title> <linkrel=\"stylesheet\"href=\"styles.css\"> </head> <body> <h1>Formul\u00e1rio de Contato</h1> <formid=\"contactForm\"> <divclass=\"form-group\"> <labelfor=\"name\">Nome:</label> <inputtype=\"text\"id=\"name\"name=\"name\"required> </div> <divclass=\"form-group\"> <labelfor=\"email\">Email:</label> <inputtype=\"email\"id=\"email\"name=\"email\"required> </div> <divclass=\"form-group\"> <labelfor=\"message\">Mensagem:</label> <textareaid=\"message\"name=\"message\"required></textarea> </div> <buttontype=\"submit\">Enviar</button> </form> <scriptsrc=\"script.js\"></script> </body> </html> body { font-family: Arial, sans-serif; background-color: #f4f4f4; margin: 0; padding: 0; display: flex; justify-content: center; align-items: center; height: 100vh; } h1 { text-align: center; color: #333; } form { background: #fff; padding: 20px; border-radius: 8px; box-shadow: 0010px rgba(0, 0, 0, 0.1); width: 100%; max-width: 400px; } .form-group { margin-bottom: 15px; } label { display: block; margin-bottom: 5px; color: #333; } input[type=\"text\"], input[type=\"email\"], textarea, input[type=\"file\"] { width: 100%; padding: 10px; border: 1px solid #ccc; border-radius: 4px; box-sizing: border-box; } textarea { resize: vertical; } button[type=\"submit\"] { background-color: #28a745; color: #fff; border: none; padding: 10px 20px; border-radius: 4px; cursor: pointer; width: 100%; } button[type=\"submit\"]:disabled { background-color: #ccc; cursor: not-allowed; } button[type=\"submit\"]:hover:not(:disabled) { background-color: #218838; } #result { margin-top: 20px; text-align: center; } #spinner { text-align: center; margin-top: 20px; } #imagePreview { margin-top: 20px; text-align: center; } #imagePreviewimg { max-width: 100%; height: auto; border-radius: 4px; }","title":"Uso de javascript em formul\u00e1rios"},{"location":"__Disciplina/Avalia%C3%A7%C3%B5es/ac/ac6/#explicacao","text":"HTML: Cria um formul\u00e1rio com campos para nome, email e mensagem. JavaScript: Adiciona um ouvinte de evento para o envio do formul\u00e1rio, valida os campos e exibe uma mensagem de erro ou sucesso.","title":"Explica\u00e7\u00e3o"},{"location":"__Disciplina/Avalia%C3%A7%C3%B5es/ac/ac6/#questoes","text":"1. Como voc\u00ea pode acessar os valores dos inputs do formul\u00e1rio? 2. Atualizar o conte\u00fado de uma p\u00e1gina web com o conte\u00fado do campos(escrever na p\u00e1gina sem clicar no bot\u00e3o)? 3. Validar cada entrada do formul\u00e1rio antes de enviar o form? [Nome obrigat\u00f3rio, Email no formato, Mensagem obrigat\u00f3ria] 4. Redefinir as entradas do formul\u00e1rio ap\u00f3s enviar o formul\u00e1rio? 5. Desativar o bot\u00e3o enviar at\u00e9 que todas as entradas do formul\u00e1rio sejam preenchidas? 6. Mostrar um bot\u00e3o girat\u00f3rio(spinner) de carregamento enquanto o formul\u00e1rio est\u00e1 sendo enviado? 7. Eibir uma mensagem de sucesso ap\u00f3s o envio do formul\u00e1rio e depois redirecionar para outra p\u00e1gina? 8. Adicionar Valida\u00e7\u00e3o de Tamanho da Mensagem Objetivo: Adicionar valida\u00e7\u00e3o para garantir que a mensagem tenha pelo menos 100 caracteres. 9. Adicionar Feedback Visual para Campos Inv\u00e1lidos Objetivo: Adicionar feedback visual (como bordas vermelhas) aos campos que n\u00e3o passam na valida\u00e7\u00e3o. 10. Adicionar um Campo de Telefone com M\u00e1scara. [ (pa\u00eds) (ddd) xxxxx-xxxx ] 11. Adicionar um Campo de Sele\u00e7\u00e3o de Assunto. [Elogio, Reclama\u00e7\u00e3o e Sugest\u00e3o] Exiba uma mensagem de erro se nenhum assunto for selecionado. 12. Adicionar um Campo de Arquivo ao Formul\u00e1rio para permitir o upload de imagens. Modifique o JavaScript para Exibir a Pr\u00e9-visualiza\u00e7\u00e3o do Arquivo Selecionado FileReader: Usa FileReader para ler o arquivo de imagem e exibir a pr\u00e9-visualiza\u00e7\u00e3o. Limpar Pr\u00e9-visualiza\u00e7\u00e3o: Limpa a pr\u00e9-visualiza\u00e7\u00e3o da imagem quando o formul\u00e1rio \u00e9 enviado e redefinido.","title":"Quest\u00f5es"},{"location":"__Disciplina/Avalia%C3%A7%C3%B5es/ap1/","text":"AP1 AP1 -Quest\u00f5es Enade Contexto Voc\u00ea foi contratado para desenvolver um site para uma pequena empresa de turismo que deseja oferecer pacotes de viagens personalizados. O site deve ser responsivo, acess\u00edvel e seguir as melhores pr\u00e1ticas de desenvolvimento web. A empresa solicitou que o site tenha uma p\u00e1gina inicial com uma breve descri\u00e7\u00e3o dos servi\u00e7os, uma se\u00e7\u00e3o de destinos populares e um formul\u00e1rio de contato. Instru\u00e7\u00f5es Primeira Parte Crie uma estrutura HTML b\u00e1sica para a p\u00e1gina inicial do site. Inclua um cabe\u00e7alho com o nome da empresa e um menu de navega\u00e7\u00e3o com links para as se\u00e7\u00f5es \"Servi\u00e7os\", \"Destinos\" e \"Contato\". Adicione uma se\u00e7\u00e3o de \"Servi\u00e7os\" com um par\u00e1grafo descrevendo os pacotes de viagens personalizados. Crie uma se\u00e7\u00e3o de \"Destinos Populares\" com uma lista n\u00e3o ordenada de pelo menos tr\u00eas destinos. Inclua um formul\u00e1rio de contato com campos para nome, e-mail, mensagem e um bot\u00e3o de envio. Utilize elementos sem\u00e2nticos do HTML5 para estruturar o conte\u00fado. Certifique-se de que o c\u00f3digo HTML esteja bem formatado e siga as boas pr\u00e1ticas de acessibilidade. Crit\u00e9rios de Avalia\u00e7\u00e3o Estrutura HTML: O c\u00f3digo deve seguir a estrutura b\u00e1sica de um documento HTML5, com elementos sem\u00e2nticos adequados. Acessibilidade: O c\u00f3digo deve incluir atributos e elementos que garantam a acessibilidade, como label para os campos do formul\u00e1rio e alt para imagens (caso sejam adicionadas). Formata\u00e7\u00e3o: O c\u00f3digo deve estar bem formatado, com indenta\u00e7\u00e3o e organiza\u00e7\u00e3o adequadas. Funcionalidade: O formul\u00e1rio deve estar funcional, com campos obrigat\u00f3rios e um bot\u00e3o de envio. Responsividade: O c\u00f3digo deve incluir a meta tag viewport para garantir que o site seja responsivo. Pontua\u00e7\u00e3o: Estrutura HTML e sem\u00e2ntica Acessibilidade Formata\u00e7\u00e3o, coment\u00e1rios e organiza\u00e7\u00e3o do c\u00f3digo Funcionalidade do formul\u00e1rio Responsividade -- Instru\u00e7\u00f5es Segunda Parte Voc\u00ea est\u00e1 desenvolvendo um site para a \"EcoTour Brasil\", uma empresa de turismo sustent\u00e1vel. O site deve incluir: Um formul\u00e1rio de reserva com valida\u00e7\u00e3o Tabela responsiva com pacotes tur\u00edsticos Adapta\u00e7\u00e3o para 3 breakpoints (desktop, tablet, mobile) Uso exclusivo de float, media queries e unidades relativa Elementos de Responsividade Implementados: Tabela Responsiva: Scroll horizontal em telas pequenas Redu\u00e7\u00e3o de padding e font-size em mobile Layout otimizado para diferentes tamanhos de tela Formul\u00e1rio com Valida\u00e7\u00e3o Avan\u00e7ada: Valida\u00e7\u00e3o HTML5 (required, pattern, minlength) Mensagens de erro contextualizadas Feedback visual para campos inv\u00e1lidos Padr\u00e3o de m\u00e1scara para telefone Melhores Pr\u00e1ticas no Formul\u00e1rio: Foco em acessibilidade (labels associados) Estiliza\u00e7\u00e3o de estados (:focus, :invalid) Feedback visual no hover do bot\u00e3o Campos obrigat\u00f3rios claramente marcados Media Queries Estrat\u00e9gicas: Breakpoints em 900px (tablet) e 600px (mobile) Ajuste de tamanhos de fonte Mudan\u00e7a no layout de navega\u00e7\u00e3o Redu\u00e7\u00e3o de espa\u00e7amentos em mobile Uso de Unidades Relativas: rem para tamanhos de fonte em para paddings e margens % para larguras de containers vw para elementos de layout Total: 80 pontos Essa quest\u00e3o avalia a capacidade do candidato de criar uma p\u00e1gina web b\u00e1sica, seguindo as melhores pr\u00e1ticas de desenvolvimento web, incluindo sem\u00e2ntica, acessibilidade e responsividade.","title":"AP1"},{"location":"__Disciplina/Avalia%C3%A7%C3%B5es/ap1/#ap1","text":"AP1 -Quest\u00f5es Enade","title":"AP1"},{"location":"__Disciplina/Avalia%C3%A7%C3%B5es/ap1/#contexto","text":"Voc\u00ea foi contratado para desenvolver um site para uma pequena empresa de turismo que deseja oferecer pacotes de viagens personalizados. O site deve ser responsivo, acess\u00edvel e seguir as melhores pr\u00e1ticas de desenvolvimento web. A empresa solicitou que o site tenha uma p\u00e1gina inicial com uma breve descri\u00e7\u00e3o dos servi\u00e7os, uma se\u00e7\u00e3o de destinos populares e um formul\u00e1rio de contato.","title":"Contexto"},{"location":"__Disciplina/Avalia%C3%A7%C3%B5es/ap1/#instrucoes-primeira-parte","text":"Crie uma estrutura HTML b\u00e1sica para a p\u00e1gina inicial do site. Inclua um cabe\u00e7alho com o nome da empresa e um menu de navega\u00e7\u00e3o com links para as se\u00e7\u00f5es \"Servi\u00e7os\", \"Destinos\" e \"Contato\". Adicione uma se\u00e7\u00e3o de \"Servi\u00e7os\" com um par\u00e1grafo descrevendo os pacotes de viagens personalizados. Crie uma se\u00e7\u00e3o de \"Destinos Populares\" com uma lista n\u00e3o ordenada de pelo menos tr\u00eas destinos. Inclua um formul\u00e1rio de contato com campos para nome, e-mail, mensagem e um bot\u00e3o de envio. Utilize elementos sem\u00e2nticos do HTML5 para estruturar o conte\u00fado. Certifique-se de que o c\u00f3digo HTML esteja bem formatado e siga as boas pr\u00e1ticas de acessibilidade.","title":"Instru\u00e7\u00f5es Primeira Parte"},{"location":"__Disciplina/Avalia%C3%A7%C3%B5es/ap1/#criterios-de-avaliacao","text":"Estrutura HTML: O c\u00f3digo deve seguir a estrutura b\u00e1sica de um documento HTML5, com elementos sem\u00e2nticos adequados. Acessibilidade: O c\u00f3digo deve incluir atributos e elementos que garantam a acessibilidade, como label para os campos do formul\u00e1rio e alt para imagens (caso sejam adicionadas). Formata\u00e7\u00e3o: O c\u00f3digo deve estar bem formatado, com indenta\u00e7\u00e3o e organiza\u00e7\u00e3o adequadas. Funcionalidade: O formul\u00e1rio deve estar funcional, com campos obrigat\u00f3rios e um bot\u00e3o de envio. Responsividade: O c\u00f3digo deve incluir a meta tag viewport para garantir que o site seja responsivo. Pontua\u00e7\u00e3o: Estrutura HTML e sem\u00e2ntica Acessibilidade Formata\u00e7\u00e3o, coment\u00e1rios e organiza\u00e7\u00e3o do c\u00f3digo Funcionalidade do formul\u00e1rio Responsividade --","title":"Crit\u00e9rios de Avalia\u00e7\u00e3o"},{"location":"__Disciplina/Avalia%C3%A7%C3%B5es/ap1/#instrucoes-segunda-parte","text":"Voc\u00ea est\u00e1 desenvolvendo um site para a \"EcoTour Brasil\", uma empresa de turismo sustent\u00e1vel. O site deve incluir: Um formul\u00e1rio de reserva com valida\u00e7\u00e3o Tabela responsiva com pacotes tur\u00edsticos Adapta\u00e7\u00e3o para 3 breakpoints (desktop, tablet, mobile) Uso exclusivo de float, media queries e unidades relativa","title":"Instru\u00e7\u00f5es Segunda Parte"},{"location":"__Disciplina/Avalia%C3%A7%C3%B5es/ap1/#elementos-de-responsividade-implementados","text":"Tabela Responsiva: Scroll horizontal em telas pequenas Redu\u00e7\u00e3o de padding e font-size em mobile Layout otimizado para diferentes tamanhos de tela Formul\u00e1rio com Valida\u00e7\u00e3o Avan\u00e7ada: Valida\u00e7\u00e3o HTML5 (required, pattern, minlength) Mensagens de erro contextualizadas Feedback visual para campos inv\u00e1lidos Padr\u00e3o de m\u00e1scara para telefone Melhores Pr\u00e1ticas no Formul\u00e1rio: Foco em acessibilidade (labels associados) Estiliza\u00e7\u00e3o de estados (:focus, :invalid) Feedback visual no hover do bot\u00e3o Campos obrigat\u00f3rios claramente marcados Media Queries Estrat\u00e9gicas: Breakpoints em 900px (tablet) e 600px (mobile) Ajuste de tamanhos de fonte Mudan\u00e7a no layout de navega\u00e7\u00e3o Redu\u00e7\u00e3o de espa\u00e7amentos em mobile Uso de Unidades Relativas: rem para tamanhos de fonte em para paddings e margens % para larguras de containers vw para elementos de layout Total: 80 pontos Essa quest\u00e3o avalia a capacidade do candidato de criar uma p\u00e1gina web b\u00e1sica, seguindo as melhores pr\u00e1ticas de desenvolvimento web, incluindo sem\u00e2ntica, acessibilidade e responsividade.","title":"Elementos de Responsividade Implementados:"},{"location":"__Disciplina/Avalia%C3%A7%C3%B5es/ap2/","text":"AP2 Atividade Te\u00f3rica 2 Atividade Pr\u00e1tica 2 Desenvolver um site responsivo utilizando HTML , CSS, JS e t\u00e9cnicas de layout como Flexbox e CSS Grid , seguindo boas pr\u00e1ticas de design web e Mobile First. Crie uma aplica\u00e7\u00e3o web interativa que utilize uma API para exibir informa\u00e7\u00f5es. Entrega Prazo: 12/06/2025 at\u00e9 as 15:20h ( AP2 ocorrer\u00e1 antes do intervalo ). Obrigat\u00f3rio a presen\u00e7a em sala de aula. Enviar o projeto para o reposit\u00f3rio em que o professor foi adicionado como colaborador em uma pasta chamada ap2 dentro da pasta docs, com HTML , CSS , JAVASCRIPT e imagens utilizados. Deve ser feita a publica\u00e7\u00e3o da pasta docs no github-pages , na pasta docs portanto devem estar a pasta ac, ap1 e ap2 e p\u00e1ginas dispon\u00edveis para serem visualizadas na Web Apresenta\u00e7\u00e3o individualmente para o professor em sala de aula das 13:30 \u00e0s 15:20h. Crit\u00e9rios de Avalia\u00e7\u00e3o Valida\u00e7\u00e3o do HTML, CSS e Links. Implementa\u00e7\u00e3o de layout responsivo com uso de Flexbox(Micro Layout) e Grid(Macro Layout). Design e usabilidade do site (est\u00e9tica, organiza\u00e7\u00e3o visual, navega\u00e7\u00e3o). Organiza\u00e7\u00e3o e clareza do c\u00f3digo. Implementa\u00e7\u00e3o correta de media queries para diferentes dispositivos. Coment\u00e1rios espec\u00edficos detalhando funcionalidades em todos os itens da avalia\u00e7\u00e3o Busca na Api Constru\u00e7\u00e3o de Interfaces via Javascript Requisitos 1. Estrutura do site: O site dever\u00e1 privilegiar a exibi\u00e7\u00e3o em dispositivos mobile, no m\u00e1ximo 600px e tamb\u00e9m deve ser desenvolvido um layout para desktop. Utiliza\u00e7\u00e3o correta de tags sem\u00e2nticas do HTML5 (ex.: <header> , <nav> , <main> , <section> , <article> , <footer> ). 2. Responsividade: O site deve se adaptar corretamente a diferentes tamanhos de tela (desktop e smartphone). Utiliza\u00e7\u00e3o de media queries no CSS para ajustar o layout conforme a largura da tela do mobile e desktop. 2.1. Layout: Dever\u00e1 ser poss\u00edvel ver diferentes layouts de p\u00e1gina dependendo do dispositivo (ex.: layout em uma coluna para mobile, e em duas ou mais colunas para desktop). 3. Formul\u00e1rio de Contato: Deve possui um placeholder para a orienta\u00e7\u00e3o sobre o preenchimento caso necess\u00e1rio. Valida\u00e7\u00e3o b\u00e1sica dos campos com JAVASCRIPT [N\u00e3o permitindo a inser\u00e7\u00e3o de n\u00fameros e caracteres especiais], quando for necess\u00e1rio. 5. Design de rodap\u00e9: Usando flexbox ou grid: Crie um rodap\u00e9 que tenha tr\u00eas se\u00e7\u00f5es: Sobre, Links e \u00edcones de m\u00eddia social. 6. Estilo e Design: Aplicar um esquema de cores consistente e harmonioso. O design deve ser moderno e seguir boas pr\u00e1ticas de UX/UI , com foco na legibilidade e usabilidade. Uso de tipografia apropriada, com pelo menos duas fontes diferentes. Usar \u00edcones quando necess\u00e1rio (ex.: Font Awesome). 7. C\u00f3digo organizado: O c\u00f3digo deve ser organizado, indentado e comentado adequadamente. O CSS deve ser escrito em um arquivo separado e vinculado corretamente ao HTML. O Javascript deve ser escrito em um arquivo separado e vinculado corretamente ao HTML. As imagens devem ser colocadas em uma subpasta \"imagens\" Cen\u00e1rio Voc\u00ea deve desenvolver um site que dar\u00e1 apoio a tomada de decis\u00e3o de investimento de acordo com o seu perfil e objetivo. Desenvolver uma p\u00e1gina web responsiva e interativa com slides em que marcamos resposta(s) e no final h\u00e1 um rel\u00e1t\u00f3rio com as conclus\u00f5es e um info gr\u00e1ficos. A simula\u00e7\u00e3o deve consumir uma API externa e permita aos usu\u00e1rios comparar diferentes tipos de investimentos (renda fixa, renda vari\u00e1vel, criptomoedas, etc.) com base em par\u00e2metros personalizados. A p\u00e1gina deve fornecer uma an\u00e1lise visual clara dos retornos esperados, riscos associados e outros fatores relevantes para ajudar os usu\u00e1rios a tomar decis\u00f5es informadas. Desenvolvimento Header: deve ser exibido no topo da p\u00e1gina com um menu de navega\u00e7\u00e3o simples. O menu deve conter links para diferentes p\u00e1ginas do site: \"Dados Econ\u00f4micos\" e \"Investimentos\". Main: Slides deve conter o slide com o question\u00e1rio e a conclus\u00e3o do relat\u00f3rio com gr\u00e1ficos. O slide ser\u00e1 simples, mas funcional, com foco na usabilidade e na apresenta\u00e7\u00e3o clara das informa\u00e7\u00f5es. Ela permitir\u00e1 que o usu\u00e1rio insira valores iniciais, selecione tipos de investimento e visualize os resultados em tabelas e gr\u00e1ficos interativos. Al\u00e9m disso, oferecer\u00e1 explica\u00e7\u00f5es breves sobre cada tipo de investimento para educar os usu\u00e1rios. Estrutura de Slides Formul\u00e1rios Interativos Consumo de API externa Gr\u00e1ficos Interativos Main: Dados Econ\u00f4micos Tabela de Dados Econ\u00f4micos constru\u00edda com JS a partir de dados de uma API externa. Main: Investimentos Tabela de Investimentos construida com JS a partir de dados de uma API externa. Footer: deve ter dados de contato, links para redes sociais e informa\u00e7\u00f5es de copyright. Plano de Desenvolvimento Faseado Fase 1: Estrutura B\u00e1sica e Slides Comece com a estrutura HTML, adicione os estilos CSS para responsividade e a funcionalidade b\u00e1sica de slides com JavaScript. Fase 2: Formul\u00e1rios e Entrada de Dados Integre os formul\u00e1rios para o usu\u00e1rio inserir informa\u00e7\u00f5es como o valor inicial e as sele\u00e7\u00f5es de investimento. Fase 3: Consumo de API e L\u00f3gica de Compara\u00e7\u00e3o (Mock) Nesta fase, voc\u00ea pode simular o consumo de uma API com dados \"mock\" (fict\u00edcios) enquanto decide qual API de dados financeiros usar. Implemente a l\u00f3gica inicial para comparar investimentos com base em dados pr\u00e9-definidos. Fase 4: Visualiza\u00e7\u00e3o de Dados (Gr\u00e1ficos) Integre uma biblioteca de gr\u00e1ficos (como Chart.js ou Plotly) para exibir os resultados visualmente. Fase 5: Relat\u00f3rio Final e Aprimoramentos Crie a se\u00e7\u00e3o do relat\u00f3rio final e refine a interface do usu\u00e1rio, adicione as explica\u00e7\u00f5es educacionais e teste a responsividade. Dados Econ\u00f4micos APIs de Dados Financeiros Reais: API do Banco Central do Brasil O Banco Central disponibiliza uma s\u00e9rie de dados abertos sobre a economia brasileira, incluindo taxas de c\u00e2mbio, \u00edndices econ\u00f4micos (como IPCA e IGP-M), e informa\u00e7\u00f5es sobre opera\u00e7\u00f5es financeiras. - URL : Banco Central - Endpoints populares : - Taxa de c\u00e2mbio (D\u00f3lar, Euro, etc.) - \u00cdndice Nacional de Pre\u00e7os ao Consumidor Amplo (IPCA) - Taxa Selic Awesome API (Moedas e Finan\u00e7as) Uma API gratuita que fornece informa\u00e7\u00f5es sobre cota\u00e7\u00f5es de moedas, criptomoedas, impostos e outros dados financeiros. \u00c9 especialmente \u00fatil para projetos envolvendo convers\u00f5es de moedas e acompanhamento de ativos financeiros. URL : Awesome API Endpoints populares : /json/last/:currency (Cota\u00e7\u00f5es de moedas como D\u00f3lar, Euro, Bitcoin, etc.) /json/taxes (Informa\u00e7\u00f5es sobre impostos e tributos) Brasil API Descri\u00e7\u00e3o : Uma API p\u00fablica que fornece dados \u00fateis para o Brasil, como CNPJ, CEP, dados fiscais (NFe), e informa\u00e7\u00f5es sobre bancos e institui\u00e7\u00f5es financeiras. URL : Brasil API Endpoints populares : -/api/cnpj/v1/{cnpj} (Consulta de CNPJ com informa\u00e7\u00f5es detalhadas sobre empresas) -/api/banks/v1 (Lista de bancos e institui\u00e7\u00f5es financeiras no Brasil) -/api/cep/v1/{cep} (Consulta de endere\u00e7os por CEP) Alpha Vantage (Mercado Financeiro Global) Descri\u00e7\u00e3o : Uma API global que fornece dados de a\u00e7\u00f5es, commodities, moedas e criptomoedas. Embora seja uma API internacional, ela pode ser usada para acompanhar ativos negociados no Brasil, como a\u00e7\u00f5es da B3. URL : Alpha Vantage Endpoints populares : /query?function=TIME_SERIES_DAILY (Dados hist\u00f3ricos de a\u00e7\u00f5es) /query?function=CURRENCY_EXCHANGE_RATE (Taxas de c\u00e2mbio) Receita Federal (Dados Abertos) A Receita Federal disponibiliza alguns dados abertos relacionados a impostos, contribui\u00e7\u00f5es e fiscaliza\u00e7\u00e3o. Embora n\u00e3o seja uma API tradicional, \u00e9 poss\u00edvel acessar esses dados por meio de arquivos CSV ou JSON. URL : Receita Federal Endpoints populares : Arrecada\u00e7\u00e3o federal por estado e munic\u00edpio. Informa\u00e7\u00f5es sobre regimes tribut\u00e1rios (Simples Nacional, Lucro Presumido, etc.). IBGE (Instituto Brasileiro de Geografia e Estat\u00edstica) O IBGE oferece uma API com dados estat\u00edsticos e geogr\u00e1ficos do Brasil, incluindo PIB, popula\u00e7\u00e3o, infla\u00e7\u00e3o e outras m\u00e9tricas econ\u00f4micas. URL : IBGE Endpoints populares : /estatisticas (Dados econ\u00f4micos e sociais) /localidades (Informa\u00e7\u00f5es geogr\u00e1ficas, como estados e munic\u00edpios) API de Tributos e Impostos (Calculadoras de Impostos) Existem APIs especializadas em c\u00e1lculo de impostos e tributos no Brasil, como ICMS, ISS, IPI, e outros. Alguns exemplos incluem: URL: Calculadoras de Impostos Calculadora de Impostos: Servi\u00e7os personalizados para calcular impostos com base em regras fiscais. Importante: A maioria das APIs financeiras robustas exige chaves de API e, em alguns casos, s\u00e3o pagas ou t\u00eam limites de uso para planos gratuitos. Nunca exponha suas chaves de API diretamente no c\u00f3digo JavaScript do lado do cliente (frontend).","title":"AP2"},{"location":"__Disciplina/Avalia%C3%A7%C3%B5es/ap2/#ap2","text":"","title":"AP2"},{"location":"__Disciplina/Avalia%C3%A7%C3%B5es/ap2/#atividade-teorica-2","text":"","title":"Atividade Te\u00f3rica 2"},{"location":"__Disciplina/Avalia%C3%A7%C3%B5es/ap2/#atividade-pratica-2","text":"Desenvolver um site responsivo utilizando HTML , CSS, JS e t\u00e9cnicas de layout como Flexbox e CSS Grid , seguindo boas pr\u00e1ticas de design web e Mobile First. Crie uma aplica\u00e7\u00e3o web interativa que utilize uma API para exibir informa\u00e7\u00f5es.","title":"Atividade Pr\u00e1tica 2"},{"location":"__Disciplina/Avalia%C3%A7%C3%B5es/ap2/#entrega","text":"Prazo: 12/06/2025 at\u00e9 as 15:20h ( AP2 ocorrer\u00e1 antes do intervalo ). Obrigat\u00f3rio a presen\u00e7a em sala de aula. Enviar o projeto para o reposit\u00f3rio em que o professor foi adicionado como colaborador em uma pasta chamada ap2 dentro da pasta docs, com HTML , CSS , JAVASCRIPT e imagens utilizados. Deve ser feita a publica\u00e7\u00e3o da pasta docs no github-pages , na pasta docs portanto devem estar a pasta ac, ap1 e ap2 e p\u00e1ginas dispon\u00edveis para serem visualizadas na Web Apresenta\u00e7\u00e3o individualmente para o professor em sala de aula das 13:30 \u00e0s 15:20h.","title":"Entrega"},{"location":"__Disciplina/Avalia%C3%A7%C3%B5es/ap2/#criterios-de-avaliacao","text":"Valida\u00e7\u00e3o do HTML, CSS e Links. Implementa\u00e7\u00e3o de layout responsivo com uso de Flexbox(Micro Layout) e Grid(Macro Layout). Design e usabilidade do site (est\u00e9tica, organiza\u00e7\u00e3o visual, navega\u00e7\u00e3o). Organiza\u00e7\u00e3o e clareza do c\u00f3digo. Implementa\u00e7\u00e3o correta de media queries para diferentes dispositivos. Coment\u00e1rios espec\u00edficos detalhando funcionalidades em todos os itens da avalia\u00e7\u00e3o Busca na Api Constru\u00e7\u00e3o de Interfaces via Javascript","title":"Crit\u00e9rios de Avalia\u00e7\u00e3o"},{"location":"__Disciplina/Avalia%C3%A7%C3%B5es/ap2/#requisitos","text":"1. Estrutura do site: O site dever\u00e1 privilegiar a exibi\u00e7\u00e3o em dispositivos mobile, no m\u00e1ximo 600px e tamb\u00e9m deve ser desenvolvido um layout para desktop. Utiliza\u00e7\u00e3o correta de tags sem\u00e2nticas do HTML5 (ex.: <header> , <nav> , <main> , <section> , <article> , <footer> ). 2. Responsividade: O site deve se adaptar corretamente a diferentes tamanhos de tela (desktop e smartphone). Utiliza\u00e7\u00e3o de media queries no CSS para ajustar o layout conforme a largura da tela do mobile e desktop. 2.1. Layout: Dever\u00e1 ser poss\u00edvel ver diferentes layouts de p\u00e1gina dependendo do dispositivo (ex.: layout em uma coluna para mobile, e em duas ou mais colunas para desktop). 3. Formul\u00e1rio de Contato: Deve possui um placeholder para a orienta\u00e7\u00e3o sobre o preenchimento caso necess\u00e1rio. Valida\u00e7\u00e3o b\u00e1sica dos campos com JAVASCRIPT [N\u00e3o permitindo a inser\u00e7\u00e3o de n\u00fameros e caracteres especiais], quando for necess\u00e1rio. 5. Design de rodap\u00e9: Usando flexbox ou grid: Crie um rodap\u00e9 que tenha tr\u00eas se\u00e7\u00f5es: Sobre, Links e \u00edcones de m\u00eddia social. 6. Estilo e Design: Aplicar um esquema de cores consistente e harmonioso. O design deve ser moderno e seguir boas pr\u00e1ticas de UX/UI , com foco na legibilidade e usabilidade. Uso de tipografia apropriada, com pelo menos duas fontes diferentes. Usar \u00edcones quando necess\u00e1rio (ex.: Font Awesome). 7. C\u00f3digo organizado: O c\u00f3digo deve ser organizado, indentado e comentado adequadamente. O CSS deve ser escrito em um arquivo separado e vinculado corretamente ao HTML. O Javascript deve ser escrito em um arquivo separado e vinculado corretamente ao HTML. As imagens devem ser colocadas em uma subpasta \"imagens\"","title":"Requisitos"},{"location":"__Disciplina/Avalia%C3%A7%C3%B5es/ap2/#cenario","text":"Voc\u00ea deve desenvolver um site que dar\u00e1 apoio a tomada de decis\u00e3o de investimento de acordo com o seu perfil e objetivo. Desenvolver uma p\u00e1gina web responsiva e interativa com slides em que marcamos resposta(s) e no final h\u00e1 um rel\u00e1t\u00f3rio com as conclus\u00f5es e um info gr\u00e1ficos. A simula\u00e7\u00e3o deve consumir uma API externa e permita aos usu\u00e1rios comparar diferentes tipos de investimentos (renda fixa, renda vari\u00e1vel, criptomoedas, etc.) com base em par\u00e2metros personalizados. A p\u00e1gina deve fornecer uma an\u00e1lise visual clara dos retornos esperados, riscos associados e outros fatores relevantes para ajudar os usu\u00e1rios a tomar decis\u00f5es informadas.","title":"Cen\u00e1rio"},{"location":"__Disciplina/Avalia%C3%A7%C3%B5es/ap2/#desenvolvimento","text":"Header: deve ser exibido no topo da p\u00e1gina com um menu de navega\u00e7\u00e3o simples. O menu deve conter links para diferentes p\u00e1ginas do site: \"Dados Econ\u00f4micos\" e \"Investimentos\". Main: Slides deve conter o slide com o question\u00e1rio e a conclus\u00e3o do relat\u00f3rio com gr\u00e1ficos. O slide ser\u00e1 simples, mas funcional, com foco na usabilidade e na apresenta\u00e7\u00e3o clara das informa\u00e7\u00f5es. Ela permitir\u00e1 que o usu\u00e1rio insira valores iniciais, selecione tipos de investimento e visualize os resultados em tabelas e gr\u00e1ficos interativos. Al\u00e9m disso, oferecer\u00e1 explica\u00e7\u00f5es breves sobre cada tipo de investimento para educar os usu\u00e1rios. Estrutura de Slides Formul\u00e1rios Interativos Consumo de API externa Gr\u00e1ficos Interativos Main: Dados Econ\u00f4micos Tabela de Dados Econ\u00f4micos constru\u00edda com JS a partir de dados de uma API externa. Main: Investimentos Tabela de Investimentos construida com JS a partir de dados de uma API externa. Footer: deve ter dados de contato, links para redes sociais e informa\u00e7\u00f5es de copyright.","title":"Desenvolvimento"},{"location":"__Disciplina/Avalia%C3%A7%C3%B5es/ap2/#plano-de-desenvolvimento-faseado","text":"Fase 1: Estrutura B\u00e1sica e Slides Comece com a estrutura HTML, adicione os estilos CSS para responsividade e a funcionalidade b\u00e1sica de slides com JavaScript. Fase 2: Formul\u00e1rios e Entrada de Dados Integre os formul\u00e1rios para o usu\u00e1rio inserir informa\u00e7\u00f5es como o valor inicial e as sele\u00e7\u00f5es de investimento. Fase 3: Consumo de API e L\u00f3gica de Compara\u00e7\u00e3o (Mock) Nesta fase, voc\u00ea pode simular o consumo de uma API com dados \"mock\" (fict\u00edcios) enquanto decide qual API de dados financeiros usar. Implemente a l\u00f3gica inicial para comparar investimentos com base em dados pr\u00e9-definidos. Fase 4: Visualiza\u00e7\u00e3o de Dados (Gr\u00e1ficos) Integre uma biblioteca de gr\u00e1ficos (como Chart.js ou Plotly) para exibir os resultados visualmente. Fase 5: Relat\u00f3rio Final e Aprimoramentos Crie a se\u00e7\u00e3o do relat\u00f3rio final e refine a interface do usu\u00e1rio, adicione as explica\u00e7\u00f5es educacionais e teste a responsividade.","title":"Plano de Desenvolvimento Faseado"},{"location":"__Disciplina/Avalia%C3%A7%C3%B5es/ap2/#dados-economicos","text":"APIs de Dados Financeiros Reais:","title":"Dados Econ\u00f4micos"},{"location":"__Disciplina/Avalia%C3%A7%C3%B5es/ap2/#api-do-banco-central-do-brasil","text":"O Banco Central disponibiliza uma s\u00e9rie de dados abertos sobre a economia brasileira, incluindo taxas de c\u00e2mbio, \u00edndices econ\u00f4micos (como IPCA e IGP-M), e informa\u00e7\u00f5es sobre opera\u00e7\u00f5es financeiras. - URL : Banco Central - Endpoints populares : - Taxa de c\u00e2mbio (D\u00f3lar, Euro, etc.) - \u00cdndice Nacional de Pre\u00e7os ao Consumidor Amplo (IPCA) - Taxa Selic","title":"API do Banco Central do Brasil"},{"location":"__Disciplina/Avalia%C3%A7%C3%B5es/ap2/#awesome-api-moedas-e-financas","text":"Uma API gratuita que fornece informa\u00e7\u00f5es sobre cota\u00e7\u00f5es de moedas, criptomoedas, impostos e outros dados financeiros. \u00c9 especialmente \u00fatil para projetos envolvendo convers\u00f5es de moedas e acompanhamento de ativos financeiros. URL : Awesome API Endpoints populares : /json/last/:currency (Cota\u00e7\u00f5es de moedas como D\u00f3lar, Euro, Bitcoin, etc.) /json/taxes (Informa\u00e7\u00f5es sobre impostos e tributos)","title":"Awesome API (Moedas e Finan\u00e7as)"},{"location":"__Disciplina/Avalia%C3%A7%C3%B5es/ap2/#brasil-api","text":"Descri\u00e7\u00e3o : Uma API p\u00fablica que fornece dados \u00fateis para o Brasil, como CNPJ, CEP, dados fiscais (NFe), e informa\u00e7\u00f5es sobre bancos e institui\u00e7\u00f5es financeiras. URL : Brasil API Endpoints populares : -/api/cnpj/v1/{cnpj} (Consulta de CNPJ com informa\u00e7\u00f5es detalhadas sobre empresas) -/api/banks/v1 (Lista de bancos e institui\u00e7\u00f5es financeiras no Brasil) -/api/cep/v1/{cep} (Consulta de endere\u00e7os por CEP)","title":"Brasil API"},{"location":"__Disciplina/Avalia%C3%A7%C3%B5es/ap2/#alpha-vantage-mercado-financeiro-global","text":"Descri\u00e7\u00e3o : Uma API global que fornece dados de a\u00e7\u00f5es, commodities, moedas e criptomoedas. Embora seja uma API internacional, ela pode ser usada para acompanhar ativos negociados no Brasil, como a\u00e7\u00f5es da B3. URL : Alpha Vantage Endpoints populares : /query?function=TIME_SERIES_DAILY (Dados hist\u00f3ricos de a\u00e7\u00f5es) /query?function=CURRENCY_EXCHANGE_RATE (Taxas de c\u00e2mbio)","title":"Alpha Vantage (Mercado Financeiro Global)"},{"location":"__Disciplina/Avalia%C3%A7%C3%B5es/ap2/#receita-federal-dados-abertos","text":"A Receita Federal disponibiliza alguns dados abertos relacionados a impostos, contribui\u00e7\u00f5es e fiscaliza\u00e7\u00e3o. Embora n\u00e3o seja uma API tradicional, \u00e9 poss\u00edvel acessar esses dados por meio de arquivos CSV ou JSON. URL : Receita Federal Endpoints populares : Arrecada\u00e7\u00e3o federal por estado e munic\u00edpio. Informa\u00e7\u00f5es sobre regimes tribut\u00e1rios (Simples Nacional, Lucro Presumido, etc.).","title":"Receita Federal (Dados Abertos)"},{"location":"__Disciplina/Avalia%C3%A7%C3%B5es/ap2/#ibge-instituto-brasileiro-de-geografia-e-estatistica","text":"O IBGE oferece uma API com dados estat\u00edsticos e geogr\u00e1ficos do Brasil, incluindo PIB, popula\u00e7\u00e3o, infla\u00e7\u00e3o e outras m\u00e9tricas econ\u00f4micas. URL : IBGE Endpoints populares : /estatisticas (Dados econ\u00f4micos e sociais) /localidades (Informa\u00e7\u00f5es geogr\u00e1ficas, como estados e munic\u00edpios)","title":"IBGE (Instituto Brasileiro de Geografia e Estat\u00edstica)"},{"location":"__Disciplina/Avalia%C3%A7%C3%B5es/ap2/#api-de-tributos-e-impostos-calculadoras-de-impostos","text":"Existem APIs especializadas em c\u00e1lculo de impostos e tributos no Brasil, como ICMS, ISS, IPI, e outros. Alguns exemplos incluem: URL: Calculadoras de Impostos Calculadora de Impostos: Servi\u00e7os personalizados para calcular impostos com base em regras fiscais. Importante: A maioria das APIs financeiras robustas exige chaves de API e, em alguns casos, s\u00e3o pagas ou t\u00eam limites de uso para planos gratuitos. Nunca exponha suas chaves de API diretamente no c\u00f3digo JavaScript do lado do cliente (frontend).","title":"API de Tributos e Impostos (Calculadoras de Impostos)"},{"location":"__Disciplina/Exerc%C3%ADcios/Javascript/","text":"Exerc\u00edcios w3schools w3schools exemplos tutorial republic","title":"Exerc\u00edcios"},{"location":"__Disciplina/Exerc%C3%ADcios/Javascript/#exercicios","text":"w3schools w3schools exemplos tutorial republic","title":"Exerc\u00edcios"},{"location":"__Disciplina/Exerc%C3%ADcios/Objetos%20e%20Estruturas/","text":"Exemplos e Exerc\u00edcios com Objetos: Condicionais e Loops Aqui est\u00e3o exemplos pr\u00e1ticos e exerc\u00edcios para trabalhar com objetos em JavaScript utilizando estruturas condicionais e de repeti\u00e7\u00e3o. 1. Condicionais com Objetos Exemplo 1: Verificar Propriedades de um Objeto const pessoa = { nome: \"Maria\", idade: 25, profissao: \"Engenheira\" }; // Verifica se a pessoa \u00e9 maior de idade if (pessoa.idade >= 18) { console.log(`${pessoa.nome} \u00e9 maior de idade.`); } else { console.log(`${pessoa.nome} \u00e9 menor de idade.`); } Exerc\u00edcio: Modifique para verificar se a pessoa tem uma profiss\u00e3o definida. Exemplo 2: Classificar Objeto com Switch const animal = { tipo: \"cachorro\", raca: \"Labrador\" }; switch (animal.tipo) { case \"cachorro\": console.log(\"\u00c9 um cachorro da ra\u00e7a \" + animal.raca); break; case \"gato\": console.log(\"\u00c9 um gato\"); break; default: console.log(\"Animal desconhecido\"); } Exerc\u00edcio: Adicione mais casos (ex: \"p\u00e1ssaro\", \"peixe\") e uma propriedade cor . Exemplo 3: Validar Formul\u00e1rio (Objeto) const usuario = { nome: \"\", email: \"user@example.com\", senha: \"123456\" }; if (!usuario.nome) { console.log(\"O nome \u00e9 obrigat\u00f3rio!\"); } else if (usuario.senha.length < 6) { console.log(\"A senha deve ter pelo menos 6 caracteres\"); } else { console.log(\"Usu\u00e1rio v\u00e1lido!\"); } Exerc\u00edcio: Adicione valida\u00e7\u00e3o para o formato de e-mail (usando includes(\"@\") ). 2. Loops com Objetos Exemplo 4: Iterar sobre Propriedades (for...in) const carro = { marca: \"Toyota\", modelo: \"Corolla\", ano: 2022 }; for (let propriedade in carro) { console.log(`${propriedade}: ${carro[propriedade]}`); } Exerc\u00edcio: Conte quantas propriedades o objeto tem. Exemplo 5: Filtrar Objetos em um Array (for) const produtos = [ { nome: \"Notebook\", preco: 2500 }, { nome: \"Celular\", preco: 800 }, { nome: \"Tablet\", preco: 1200 } ]; // Encontrar produtos com pre\u00e7o > R$1000 const caros = []; for (let i = 0; i < produtos.length; i++) { if (produtos[i].preco > 1000) { caros.push(produtos[i]); } } console.log(caros); Exerc\u00edcio: Use while para fazer o mesmo filtro. Exemplo 6: Transformar Objeto em Array (Object.entries + for...of) const pessoa = { nome: \"Carlos\", idade: 30, cidade: \"S\u00e3o Paulo\" }; for (let [chave, valor] of Object.entries(pessoa)) { console.log(`${chave}: ${valor}`); } Exerc\u00edcio: Crie um novo array apenas com os valores do objeto. Exerc\u00edcios Avan\u00e7ados 1. Mesclar Dois Objetos Combine objeto1 e objeto2 em um novo objeto: const objeto1 = { a: 1, b: 2 }; const objeto2 = { c: 3, d: 4 }; // Resultado esperado: { a: 1, b: 2, c: 3, d: 4 } 2. Calcular M\u00e9dia de Notas Dado um objeto aluno: const aluno = { nome: \"Ana\", notas: [7.5, 8, 6.5, 9] }; // Calcule a m\u00e9dia das notas 3. Encontrar Pessoa Mais Velha Em um array de objetos: const pessoas = [ { nome: \"Jo\u00e3o\", idade: 25 }, { nome: \"Maria\", idade: 30 }, { nome: \"Pedro\", idade: 20 } ]; // Encontre a pessoa com maior idade 4. Validar Senha Forte Verifique se a senha no objeto usu\u00e1rio tem: Pelo menos 8 caracteres Cont\u00e9m n\u00fameros e letras const usuario = { nome: \"Admin\", senha: \"Senha123\" }; Solu\u00e7\u00f5es Solu\u00e7\u00e3o 1: Mesclar Objetos const novoObjeto = { ...objeto1, ...objeto2 }; Solu\u00e7\u00e3o 2: M\u00e9dia de Notas const soma = aluno.notas.reduce((total, nota) => total + nota, 0); const media = soma / aluno.notas.length; Solu\u00e7\u00e3o 3: Pessoa Mais Velha let maisVelha = pessoas[0]; for (let pessoa of pessoas) { if (pessoa.idade > maisVelha.idade) { maisVelha = pessoa; } } Solu\u00e7\u00e3o 4: Senha Forte const temNumero = /\\d/.test(usuario.senha); const temLetra = /[a-zA-Z]/.test(usuario.senha); const valida = usuario.senha.length >= 8 && temNumero && temLetra; Dicas: Use Object.keys() , Object.values() , e Object.entries() para iterar sobre objetos. Combine for...of com Object.entries() para percorrer chaves e valores. Esses exerc\u00edcios ajudam a dominar a manipula\u00e7\u00e3o de objetos em JavaScript! \ud83d\ude80","title":"Exemplos e Exerc\u00edcios com Objetos: Condicionais e Loops"},{"location":"__Disciplina/Exerc%C3%ADcios/Objetos%20e%20Estruturas/#exemplos-e-exercicios-com-objetos-condicionais-e-loops","text":"Aqui est\u00e3o exemplos pr\u00e1ticos e exerc\u00edcios para trabalhar com objetos em JavaScript utilizando estruturas condicionais e de repeti\u00e7\u00e3o.","title":"Exemplos e Exerc\u00edcios com Objetos: Condicionais e Loops"},{"location":"__Disciplina/Exerc%C3%ADcios/Objetos%20e%20Estruturas/#1-condicionais-com-objetos","text":"","title":"1. Condicionais com Objetos"},{"location":"__Disciplina/Exerc%C3%ADcios/Objetos%20e%20Estruturas/#exemplo-1-verificar-propriedades-de-um-objeto","text":"const pessoa = { nome: \"Maria\", idade: 25, profissao: \"Engenheira\" }; // Verifica se a pessoa \u00e9 maior de idade if (pessoa.idade >= 18) { console.log(`${pessoa.nome} \u00e9 maior de idade.`); } else { console.log(`${pessoa.nome} \u00e9 menor de idade.`); } Exerc\u00edcio: Modifique para verificar se a pessoa tem uma profiss\u00e3o definida.","title":"Exemplo 1: Verificar Propriedades de um Objeto"},{"location":"__Disciplina/Exerc%C3%ADcios/Objetos%20e%20Estruturas/#exemplo-2-classificar-objeto-com-switch","text":"const animal = { tipo: \"cachorro\", raca: \"Labrador\" }; switch (animal.tipo) { case \"cachorro\": console.log(\"\u00c9 um cachorro da ra\u00e7a \" + animal.raca); break; case \"gato\": console.log(\"\u00c9 um gato\"); break; default: console.log(\"Animal desconhecido\"); } Exerc\u00edcio: Adicione mais casos (ex: \"p\u00e1ssaro\", \"peixe\") e uma propriedade cor .","title":"Exemplo 2: Classificar Objeto com Switch"},{"location":"__Disciplina/Exerc%C3%ADcios/Objetos%20e%20Estruturas/#exemplo-3-validar-formulario-objeto","text":"const usuario = { nome: \"\", email: \"user@example.com\", senha: \"123456\" }; if (!usuario.nome) { console.log(\"O nome \u00e9 obrigat\u00f3rio!\"); } else if (usuario.senha.length < 6) { console.log(\"A senha deve ter pelo menos 6 caracteres\"); } else { console.log(\"Usu\u00e1rio v\u00e1lido!\"); } Exerc\u00edcio: Adicione valida\u00e7\u00e3o para o formato de e-mail (usando includes(\"@\") ).","title":"Exemplo 3: Validar Formul\u00e1rio (Objeto)"},{"location":"__Disciplina/Exerc%C3%ADcios/Objetos%20e%20Estruturas/#2-loops-com-objetos","text":"","title":"2. Loops com Objetos"},{"location":"__Disciplina/Exerc%C3%ADcios/Objetos%20e%20Estruturas/#exemplo-4-iterar-sobre-propriedades-forin","text":"const carro = { marca: \"Toyota\", modelo: \"Corolla\", ano: 2022 }; for (let propriedade in carro) { console.log(`${propriedade}: ${carro[propriedade]}`); } Exerc\u00edcio: Conte quantas propriedades o objeto tem.","title":"Exemplo 4: Iterar sobre Propriedades (for...in)"},{"location":"__Disciplina/Exerc%C3%ADcios/Objetos%20e%20Estruturas/#exemplo-5-filtrar-objetos-em-um-array-for","text":"const produtos = [ { nome: \"Notebook\", preco: 2500 }, { nome: \"Celular\", preco: 800 }, { nome: \"Tablet\", preco: 1200 } ]; // Encontrar produtos com pre\u00e7o > R$1000 const caros = []; for (let i = 0; i < produtos.length; i++) { if (produtos[i].preco > 1000) { caros.push(produtos[i]); } } console.log(caros); Exerc\u00edcio: Use while para fazer o mesmo filtro.","title":"Exemplo 5: Filtrar Objetos em um Array (for)"},{"location":"__Disciplina/Exerc%C3%ADcios/Objetos%20e%20Estruturas/#exemplo-6-transformar-objeto-em-array-objectentries-forof","text":"const pessoa = { nome: \"Carlos\", idade: 30, cidade: \"S\u00e3o Paulo\" }; for (let [chave, valor] of Object.entries(pessoa)) { console.log(`${chave}: ${valor}`); } Exerc\u00edcio: Crie um novo array apenas com os valores do objeto.","title":"Exemplo 6: Transformar Objeto em Array (Object.entries + for...of)"},{"location":"__Disciplina/Exerc%C3%ADcios/Objetos%20e%20Estruturas/#exercicios-avancados","text":"","title":"Exerc\u00edcios Avan\u00e7ados"},{"location":"__Disciplina/Exerc%C3%ADcios/Objetos%20e%20Estruturas/#1-mesclar-dois-objetos","text":"Combine objeto1 e objeto2 em um novo objeto: const objeto1 = { a: 1, b: 2 }; const objeto2 = { c: 3, d: 4 }; // Resultado esperado: { a: 1, b: 2, c: 3, d: 4 }","title":"1. Mesclar Dois Objetos"},{"location":"__Disciplina/Exerc%C3%ADcios/Objetos%20e%20Estruturas/#2-calcular-media-de-notas","text":"Dado um objeto aluno: const aluno = { nome: \"Ana\", notas: [7.5, 8, 6.5, 9] }; // Calcule a m\u00e9dia das notas","title":"2. Calcular M\u00e9dia de Notas"},{"location":"__Disciplina/Exerc%C3%ADcios/Objetos%20e%20Estruturas/#3-encontrar-pessoa-mais-velha","text":"Em um array de objetos: const pessoas = [ { nome: \"Jo\u00e3o\", idade: 25 }, { nome: \"Maria\", idade: 30 }, { nome: \"Pedro\", idade: 20 } ]; // Encontre a pessoa com maior idade","title":"3. Encontrar Pessoa Mais Velha"},{"location":"__Disciplina/Exerc%C3%ADcios/Objetos%20e%20Estruturas/#4-validar-senha-forte","text":"Verifique se a senha no objeto usu\u00e1rio tem: Pelo menos 8 caracteres Cont\u00e9m n\u00fameros e letras const usuario = { nome: \"Admin\", senha: \"Senha123\" };","title":"4. Validar Senha Forte"},{"location":"__Disciplina/Exerc%C3%ADcios/Objetos%20e%20Estruturas/#solucoes","text":"","title":"Solu\u00e7\u00f5es"},{"location":"__Disciplina/Exerc%C3%ADcios/Objetos%20e%20Estruturas/#solucao-1-mesclar-objetos","text":"const novoObjeto = { ...objeto1, ...objeto2 };","title":"Solu\u00e7\u00e3o 1: Mesclar Objetos"},{"location":"__Disciplina/Exerc%C3%ADcios/Objetos%20e%20Estruturas/#solucao-2-media-de-notas","text":"const soma = aluno.notas.reduce((total, nota) => total + nota, 0); const media = soma / aluno.notas.length;","title":"Solu\u00e7\u00e3o 2: M\u00e9dia de Notas"},{"location":"__Disciplina/Exerc%C3%ADcios/Objetos%20e%20Estruturas/#solucao-3-pessoa-mais-velha","text":"let maisVelha = pessoas[0]; for (let pessoa of pessoas) { if (pessoa.idade > maisVelha.idade) { maisVelha = pessoa; } }","title":"Solu\u00e7\u00e3o 3: Pessoa Mais Velha"},{"location":"__Disciplina/Exerc%C3%ADcios/Objetos%20e%20Estruturas/#solucao-4-senha-forte","text":"const temNumero = /\\d/.test(usuario.senha); const temLetra = /[a-zA-Z]/.test(usuario.senha); const valida = usuario.senha.length >= 8 && temNumero && temLetra; Dicas: Use Object.keys() , Object.values() , e Object.entries() para iterar sobre objetos. Combine for...of com Object.entries() para percorrer chaves e valores. Esses exerc\u00edcios ajudam a dominar a manipula\u00e7\u00e3o de objetos em JavaScript! \ud83d\ude80","title":"Solu\u00e7\u00e3o 4: Senha Forte"},{"location":"__Disciplina/Exerc%C3%ADcios/Posicionamento_Landing_Page/","text":"Posisicionamento - Landing Page Aplique as t\u00e9cnicas de posicionamento CSS em uma landing page que usa tags sem\u00e2nticas de layout. Esse exemplo vai incorporar o uso de header , nav , main , section , article , aside , footer , juntamente com os tipos de posicionamento: static , relative , absolute , fixed , e sticky . Estrutura HTML com tags sem\u00e2nticas: <!DOCTYPE html> <html lang=\"pt-br\"> <head> <meta charset=\"UTF-8\"> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"> <title>Landing Page Sem\u00e2ntica</title> <link rel=\"stylesheet\" href=\"style.css\"> </head> <body> <header> <nav class=\"fixed-nav\"> <ul> <li><a href=\"#home\">Home</a></li> <li><a href=\"#about\">Sobre</a></li> <li><a href=\"#services\">Servi\u00e7os</a></li> <li><a href=\"#contact\">Contato</a></li> </ul> </nav> </header> <main> <section id=\"home\" class=\"hero-section\"> <h1>Bem-vindo \u00e0 nossa Landing Page!</h1> <p>Oferecemos as melhores solu\u00e7\u00f5es para o seu neg\u00f3cio.</p> </section> <section id=\"about\" class=\"about-section\"> <article class=\"about-article\"> <h2>Sobre N\u00f3s</h2> <p>Nossa empresa tem mais de 10 anos de experi\u00eancia.</p> </article> </section> <section id=\"services\" class=\"services-section\"> <h2>Nossos Servi\u00e7os</h2> <aside class=\"relative-aside\"> <p>Conte\u00fado destacado.</p> <button class=\"absolute-button\">Clique Aqui</button> </aside> </section> <section id=\"contact\" class=\"contact-section\"> <h2>Fale Conosco</h2> <form> <label for=\"name\">Nome:</label> <input type=\"text\" id=\"name\" name=\"name\"> <label for=\"email\">Email:</label> <input type=\"email\" id=\"email\" name=\"email\"> <button type=\"submit\">Enviar</button> </form> </section> </main> <footer> <p>\u00a9 2024 Nossa Empresa. Todos os direitos reservados.</p> </footer> </body> </html> Estilos CSS com posicionamento: /* Reseta margens e padding padr\u00e3o */ * { margin: 0; padding: 0; box-sizing: border-box; } /* Estilo para o header com navega\u00e7\u00e3o fixa */ .fixed-nav { position: fixed; top: 0; left: 0; width: 100%; background-color: #333; color: white; padding: 15px; z-index: 100; } .fixed-nav ul { display: flex; justify-content: space-around; list-style: none; } .fixed-nav a { color: white; text-decoration: none; padding: 5px 10px; } .fixed-nav a:hover { background-color: #555; border-radius: 5px; } /* Espa\u00e7o para compensar a barra de navega\u00e7\u00e3o fixa */ main { margin-top: 60px; } /* Hero section */ .hero-section { background: url('hero-image.jpg') no-repeat center center/cover; height: 80vh; display: flex; flex-direction: column; justify-content: center; align-items: center; text-align: center; color: white; } .hero-section h1 { font-size: 3em; } .hero-section p { font-size: 1.5em; } /* Sobre n\u00f3s com posicionamento relativo */ .about-section { padding: 50px; background-color: #f4f4f4; } .about-article { position: relative; background-color: white; padding: 30px; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1); top: 20px; left: 10px; } /* Servi\u00e7os com aside posicionado */ .services-section { padding: 50px; background-color: #e4e4e4; } .relative-aside { position: relative; background-color: #fff; padding: 20px; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1); } .absolute-button { position: absolute; top: 10px; right: 10px; padding: 10px 20px; background-color: #333; color: white; border: none; cursor: pointer; } .absolute-button:hover { background-color: #555; } /* Contato com header sticky */ .contact-section { padding: 50px; background-color: #fff; } .contact-section h2 { position: sticky; top: 60px; /* Considera o tamanho da barra de navega\u00e7\u00e3o fixa */ background-color: white; padding: 10px; margin-bottom: 20px; } .contact-section form { display: flex; flex-direction: column; } .contact-section label { margin: 10px 0 5px; } .contact-section input { padding: 10px; margin-bottom: 20px; border: 1px solid #ccc; border-radius: 4px; } .contact-section button { padding: 10px 20px; background-color: #333; color: white; border: none; cursor: pointer; } .contact-section button:hover { background-color: #555; } /* Footer */ footer { background-color: #333; color: white; text-align: center; padding: 20px 0; } Explica\u00e7\u00e3o das T\u00e9cnicas de Posicionamento: Navega\u00e7\u00e3o Fixa ( fixed ) : A barra de navega\u00e7\u00e3o usa position: fixed para permanecer sempre no topo da p\u00e1gina, independentemente do scroll. Conte\u00fado Relativo ( relative ) : O artigo da se\u00e7\u00e3o \"Sobre n\u00f3s\" tem position: relative , deslocando o bloco levemente para dar \u00eanfase, mas ainda ocupando seu espa\u00e7o normal no fluxo do documento. Bot\u00e3o Absoluto ( absolute ) : O bot\u00e3o dentro da se\u00e7\u00e3o de servi\u00e7os usa position: absolute para se posicionar em rela\u00e7\u00e3o ao cont\u00eainer aside com position: relative , permitindo que ele fique fixo no canto direito. Cabe\u00e7alho Sticky ( sticky ) : O t\u00edtulo \"Fale Conosco\" na se\u00e7\u00e3o de contato usa position: sticky para permanecer vis\u00edvel no topo da janela de visualiza\u00e7\u00e3o ao rolar a p\u00e1gina, mas apenas depois de rolar al\u00e9m de um determinado ponto. Resultado: Essa estrutura cria uma landing page sem\u00e2ntica, moderna e responsiva, que utiliza de forma eficaz todas as t\u00e9cnicas de posicionamento CSS para melhorar a experi\u00eancia do usu\u00e1rio.","title":"Posicionamento Landing Page"},{"location":"__Disciplina/Exerc%C3%ADcios/Posicionamento_Landing_Page/#posisicionamento-landing-page","text":"Aplique as t\u00e9cnicas de posicionamento CSS em uma landing page que usa tags sem\u00e2nticas de layout. Esse exemplo vai incorporar o uso de header , nav , main , section , article , aside , footer , juntamente com os tipos de posicionamento: static , relative , absolute , fixed , e sticky .","title":"Posisicionamento - Landing Page"},{"location":"__Disciplina/Exerc%C3%ADcios/Posicionamento_Landing_Page/#estrutura-html-com-tags-semanticas","text":"<!DOCTYPE html> <html lang=\"pt-br\"> <head> <meta charset=\"UTF-8\"> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"> <title>Landing Page Sem\u00e2ntica</title> <link rel=\"stylesheet\" href=\"style.css\"> </head> <body> <header> <nav class=\"fixed-nav\"> <ul> <li><a href=\"#home\">Home</a></li> <li><a href=\"#about\">Sobre</a></li> <li><a href=\"#services\">Servi\u00e7os</a></li> <li><a href=\"#contact\">Contato</a></li> </ul> </nav> </header> <main> <section id=\"home\" class=\"hero-section\"> <h1>Bem-vindo \u00e0 nossa Landing Page!</h1> <p>Oferecemos as melhores solu\u00e7\u00f5es para o seu neg\u00f3cio.</p> </section> <section id=\"about\" class=\"about-section\"> <article class=\"about-article\"> <h2>Sobre N\u00f3s</h2> <p>Nossa empresa tem mais de 10 anos de experi\u00eancia.</p> </article> </section> <section id=\"services\" class=\"services-section\"> <h2>Nossos Servi\u00e7os</h2> <aside class=\"relative-aside\"> <p>Conte\u00fado destacado.</p> <button class=\"absolute-button\">Clique Aqui</button> </aside> </section> <section id=\"contact\" class=\"contact-section\"> <h2>Fale Conosco</h2> <form> <label for=\"name\">Nome:</label> <input type=\"text\" id=\"name\" name=\"name\"> <label for=\"email\">Email:</label> <input type=\"email\" id=\"email\" name=\"email\"> <button type=\"submit\">Enviar</button> </form> </section> </main> <footer> <p>\u00a9 2024 Nossa Empresa. Todos os direitos reservados.</p> </footer> </body> </html>","title":"Estrutura HTML com tags sem\u00e2nticas:"},{"location":"__Disciplina/Exerc%C3%ADcios/Posicionamento_Landing_Page/#estilos-css-com-posicionamento","text":"/* Reseta margens e padding padr\u00e3o */ * { margin: 0; padding: 0; box-sizing: border-box; } /* Estilo para o header com navega\u00e7\u00e3o fixa */ .fixed-nav { position: fixed; top: 0; left: 0; width: 100%; background-color: #333; color: white; padding: 15px; z-index: 100; } .fixed-nav ul { display: flex; justify-content: space-around; list-style: none; } .fixed-nav a { color: white; text-decoration: none; padding: 5px 10px; } .fixed-nav a:hover { background-color: #555; border-radius: 5px; } /* Espa\u00e7o para compensar a barra de navega\u00e7\u00e3o fixa */ main { margin-top: 60px; } /* Hero section */ .hero-section { background: url('hero-image.jpg') no-repeat center center/cover; height: 80vh; display: flex; flex-direction: column; justify-content: center; align-items: center; text-align: center; color: white; } .hero-section h1 { font-size: 3em; } .hero-section p { font-size: 1.5em; } /* Sobre n\u00f3s com posicionamento relativo */ .about-section { padding: 50px; background-color: #f4f4f4; } .about-article { position: relative; background-color: white; padding: 30px; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1); top: 20px; left: 10px; } /* Servi\u00e7os com aside posicionado */ .services-section { padding: 50px; background-color: #e4e4e4; } .relative-aside { position: relative; background-color: #fff; padding: 20px; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1); } .absolute-button { position: absolute; top: 10px; right: 10px; padding: 10px 20px; background-color: #333; color: white; border: none; cursor: pointer; } .absolute-button:hover { background-color: #555; } /* Contato com header sticky */ .contact-section { padding: 50px; background-color: #fff; } .contact-section h2 { position: sticky; top: 60px; /* Considera o tamanho da barra de navega\u00e7\u00e3o fixa */ background-color: white; padding: 10px; margin-bottom: 20px; } .contact-section form { display: flex; flex-direction: column; } .contact-section label { margin: 10px 0 5px; } .contact-section input { padding: 10px; margin-bottom: 20px; border: 1px solid #ccc; border-radius: 4px; } .contact-section button { padding: 10px 20px; background-color: #333; color: white; border: none; cursor: pointer; } .contact-section button:hover { background-color: #555; } /* Footer */ footer { background-color: #333; color: white; text-align: center; padding: 20px 0; }","title":"Estilos CSS com posicionamento:"},{"location":"__Disciplina/Exerc%C3%ADcios/Posicionamento_Landing_Page/#explicacao-das-tecnicas-de-posicionamento","text":"Navega\u00e7\u00e3o Fixa ( fixed ) : A barra de navega\u00e7\u00e3o usa position: fixed para permanecer sempre no topo da p\u00e1gina, independentemente do scroll. Conte\u00fado Relativo ( relative ) : O artigo da se\u00e7\u00e3o \"Sobre n\u00f3s\" tem position: relative , deslocando o bloco levemente para dar \u00eanfase, mas ainda ocupando seu espa\u00e7o normal no fluxo do documento. Bot\u00e3o Absoluto ( absolute ) : O bot\u00e3o dentro da se\u00e7\u00e3o de servi\u00e7os usa position: absolute para se posicionar em rela\u00e7\u00e3o ao cont\u00eainer aside com position: relative , permitindo que ele fique fixo no canto direito. Cabe\u00e7alho Sticky ( sticky ) : O t\u00edtulo \"Fale Conosco\" na se\u00e7\u00e3o de contato usa position: sticky para permanecer vis\u00edvel no topo da janela de visualiza\u00e7\u00e3o ao rolar a p\u00e1gina, mas apenas depois de rolar al\u00e9m de um determinado ponto.","title":"Explica\u00e7\u00e3o das T\u00e9cnicas de Posicionamento:"},{"location":"__Disciplina/Exerc%C3%ADcios/Posicionamento_Landing_Page/#resultado","text":"Essa estrutura cria uma landing page sem\u00e2ntica, moderna e responsiva, que utiliza de forma eficaz todas as t\u00e9cnicas de posicionamento CSS para melhorar a experi\u00eancia do usu\u00e1rio.","title":"Resultado:"},{"location":"__Disciplina/Exerc%C3%ADcios/String%20e%20Estrturas/","text":"Strings: Condicionais e Loops Aqui est\u00e3o exemplos e exerc\u00edcios pr\u00e1ticos para manipular strings usando: Estruturas condicionais ( if/else , switch ). Estruturas de repeti\u00e7\u00e3o ( for , while , do...while ). 1. Condicionais com Strings Exemplo 1: Verificar Pal\u00edndromo Um pal\u00edndromo \u00e9 uma palavra que permanece a mesma se lida de tr\u00e1s para frente (ex: \"arara\"). const palavra = \"arara\"; let inverso = \"\"; // Usando for para inverter a string for (let i = palavra.length - 1; i >= 0; i--) { inverso += palavra[i]; } // Verifica se \u00e9 pal\u00edndromo if (palavra === inverso) { console.log(`${palavra} \u00e9 um pal\u00edndromo!`); } else { console.log(`${palavra} n\u00e3o \u00e9 um pal\u00edndromo.`); } Exerc\u00edcio: Modifique o c\u00f3digo para funcionar com frases (ex: \"Ame o poema\"). Exemplo 2: Classificar Tamanho da String const texto = \"JavaScript\"; if (texto.length > 10) { console.log(\"Texto muito longo!\"); } else if (texto.length >= 5) { console.log(\"Texto de tamanho m\u00e9dio.\"); } else { console.log(\"Texto curto.\"); } Exerc\u00edcio: Pe\u00e7a ao usu\u00e1rio (usando prompt ) que digite uma palavra e classifique-a. Exemplo 3: Switch com Strings const diaSemana = \"segunda\"; switch (diaSemana.toLowerCase()) { case \"segunda\": case \"ter\u00e7a\": case \"quarta\": case \"quinta\": case \"sexta\": console.log(\"Dia \u00fatil.\"); break; case \"s\u00e1bado\": case \"domingo\": console.log(\"Fim de semana!\"); break; default: console.log(\"Dia inv\u00e1lido.\"); } Exerc\u00edcio: Crie um sistema que verifique se um m\u00eas \u00e9 de ver\u00e3o, inverno, etc. 2. Loops com Strings Exemplo 4: Contar Vogais const frase = \"Ol\u00e1, mundo!\"; let contadorVogais = 0; const vogais = \"aeiou\u00e1\u00e9\u00ed\u00f3\u00fa\u00e3\u00f5\u00e2\u00ea\u00f4\"; for (let letra of frase.toLowerCase()) { if (vogais.includes(letra)) { contadorVogais++; } } console.log(`N\u00famero de vogais: ${contadorVogais}`); Exerc\u00edcio: Modifique para contar consoantes tamb\u00e9m. Exemplo 5: Inverter String com While let palavra = \"JavaScript\"; let invertida = \"\"; let i = palavra.length - 1; while (i >= 0) { invertida += palavra[i]; i--; } console.log(invertida); // \"tpircSavaJ\" Exerc\u00edcio: Fa\u00e7a o mesmo usando do...while . Exemplo 6: Remover Espa\u00e7os em Branco let texto = \" Exemplo com espa\u00e7os \"; let textoSemEspacos = \"\"; for (let i = 0; i < texto.length; i++) { if (texto[i] !== \" \") { textoSemEspacos += texto[i]; } } console.log(textoSemEspacos); // \"Exemplocomespa\u00e7os\" Exerc\u00edcio: Melhore o c\u00f3digo para remover apenas espa\u00e7os duplicados (ex: \"Exemplo com espa\u00e7os\"). Exerc\u00edcios Adicionais 1. Verificar se uma String Cont\u00e9m N\u00fameros Use for e isNaN() para verificar se h\u00e1 d\u00edgitos em uma string. 2. Converter Alternadamente Mai\u00fasculas/Min\u00fasculas Exemplo: Entrada: \"AbCd\" \u2192 Sa\u00edda: \"aBcD\" 3. Encontrar a Maior Palavra em uma Frase Dica: Use split(\" \") para separar palavras e compare seus length . 4. Gerar Acr\u00f4nimos Exemplo: Entrada: \"Universidade Federal do Rio\" \u2192 Sa\u00edda: \"UFR\" Solu\u00e7\u00f5es dos Exerc\u00edcios Solu\u00e7\u00e3o 1: Pal\u00edndromo com Frase const frase = \"Ame o poema\"; const formatada = frase.toLowerCase().replace(/\\s/g, \"\"); const inverso = formatada.split(\"\").reverse().join(\"\"); console.log(formatada === inverso ? \"\u00c9 pal\u00edndromo!\" : \"N\u00e3o \u00e9 pal\u00edndromo.\"); Solu\u00e7\u00e3o 5: Inverter com do...while let palavra = \"JavaScript\"; let invertida = \"\"; let i = palavra.length - 1; do { invertida += palavra[i]; i--; } while (i >= 0); console.log(invertida); Recursos: MDN - Strings JavaScript.info - Loops Esses exerc\u00edcios ajudam a consolidar l\u00f3gica de programa\u00e7\u00e3o e manipula\u00e7\u00e3o de strings! \ud83d\ude80","title":"Strings: Condicionais e Loops"},{"location":"__Disciplina/Exerc%C3%ADcios/String%20e%20Estrturas/#strings-condicionais-e-loops","text":"Aqui est\u00e3o exemplos e exerc\u00edcios pr\u00e1ticos para manipular strings usando: Estruturas condicionais ( if/else , switch ). Estruturas de repeti\u00e7\u00e3o ( for , while , do...while ).","title":"Strings: Condicionais e Loops"},{"location":"__Disciplina/Exerc%C3%ADcios/String%20e%20Estrturas/#1-condicionais-com-strings","text":"","title":"1. Condicionais com Strings"},{"location":"__Disciplina/Exerc%C3%ADcios/String%20e%20Estrturas/#exemplo-1-verificar-palindromo","text":"Um pal\u00edndromo \u00e9 uma palavra que permanece a mesma se lida de tr\u00e1s para frente (ex: \"arara\"). const palavra = \"arara\"; let inverso = \"\"; // Usando for para inverter a string for (let i = palavra.length - 1; i >= 0; i--) { inverso += palavra[i]; } // Verifica se \u00e9 pal\u00edndromo if (palavra === inverso) { console.log(`${palavra} \u00e9 um pal\u00edndromo!`); } else { console.log(`${palavra} n\u00e3o \u00e9 um pal\u00edndromo.`); } Exerc\u00edcio: Modifique o c\u00f3digo para funcionar com frases (ex: \"Ame o poema\").","title":"Exemplo 1: Verificar Pal\u00edndromo"},{"location":"__Disciplina/Exerc%C3%ADcios/String%20e%20Estrturas/#exemplo-2-classificar-tamanho-da-string","text":"const texto = \"JavaScript\"; if (texto.length > 10) { console.log(\"Texto muito longo!\"); } else if (texto.length >= 5) { console.log(\"Texto de tamanho m\u00e9dio.\"); } else { console.log(\"Texto curto.\"); } Exerc\u00edcio: Pe\u00e7a ao usu\u00e1rio (usando prompt ) que digite uma palavra e classifique-a.","title":"Exemplo 2: Classificar Tamanho da String"},{"location":"__Disciplina/Exerc%C3%ADcios/String%20e%20Estrturas/#exemplo-3-switch-com-strings","text":"const diaSemana = \"segunda\"; switch (diaSemana.toLowerCase()) { case \"segunda\": case \"ter\u00e7a\": case \"quarta\": case \"quinta\": case \"sexta\": console.log(\"Dia \u00fatil.\"); break; case \"s\u00e1bado\": case \"domingo\": console.log(\"Fim de semana!\"); break; default: console.log(\"Dia inv\u00e1lido.\"); } Exerc\u00edcio: Crie um sistema que verifique se um m\u00eas \u00e9 de ver\u00e3o, inverno, etc.","title":"Exemplo 3: Switch com Strings"},{"location":"__Disciplina/Exerc%C3%ADcios/String%20e%20Estrturas/#2-loops-com-strings","text":"","title":"2. Loops com Strings"},{"location":"__Disciplina/Exerc%C3%ADcios/String%20e%20Estrturas/#exemplo-4-contar-vogais","text":"const frase = \"Ol\u00e1, mundo!\"; let contadorVogais = 0; const vogais = \"aeiou\u00e1\u00e9\u00ed\u00f3\u00fa\u00e3\u00f5\u00e2\u00ea\u00f4\"; for (let letra of frase.toLowerCase()) { if (vogais.includes(letra)) { contadorVogais++; } } console.log(`N\u00famero de vogais: ${contadorVogais}`); Exerc\u00edcio: Modifique para contar consoantes tamb\u00e9m.","title":"Exemplo 4: Contar Vogais"},{"location":"__Disciplina/Exerc%C3%ADcios/String%20e%20Estrturas/#exemplo-5-inverter-string-com-while","text":"let palavra = \"JavaScript\"; let invertida = \"\"; let i = palavra.length - 1; while (i >= 0) { invertida += palavra[i]; i--; } console.log(invertida); // \"tpircSavaJ\" Exerc\u00edcio: Fa\u00e7a o mesmo usando do...while .","title":"Exemplo 5: Inverter String com While"},{"location":"__Disciplina/Exerc%C3%ADcios/String%20e%20Estrturas/#exemplo-6-remover-espacos-em-branco","text":"let texto = \" Exemplo com espa\u00e7os \"; let textoSemEspacos = \"\"; for (let i = 0; i < texto.length; i++) { if (texto[i] !== \" \") { textoSemEspacos += texto[i]; } } console.log(textoSemEspacos); // \"Exemplocomespa\u00e7os\" Exerc\u00edcio: Melhore o c\u00f3digo para remover apenas espa\u00e7os duplicados (ex: \"Exemplo com espa\u00e7os\").","title":"Exemplo 6: Remover Espa\u00e7os em Branco"},{"location":"__Disciplina/Exerc%C3%ADcios/String%20e%20Estrturas/#exercicios-adicionais","text":"","title":"Exerc\u00edcios Adicionais"},{"location":"__Disciplina/Exerc%C3%ADcios/String%20e%20Estrturas/#1-verificar-se-uma-string-contem-numeros","text":"Use for e isNaN() para verificar se h\u00e1 d\u00edgitos em uma string.","title":"1. Verificar se uma String Cont\u00e9m N\u00fameros"},{"location":"__Disciplina/Exerc%C3%ADcios/String%20e%20Estrturas/#2-converter-alternadamente-maiusculasminusculas","text":"Exemplo: Entrada: \"AbCd\" \u2192 Sa\u00edda: \"aBcD\"","title":"2. Converter Alternadamente Mai\u00fasculas/Min\u00fasculas"},{"location":"__Disciplina/Exerc%C3%ADcios/String%20e%20Estrturas/#3-encontrar-a-maior-palavra-em-uma-frase","text":"Dica: Use split(\" \") para separar palavras e compare seus length .","title":"3. Encontrar a Maior Palavra em uma Frase"},{"location":"__Disciplina/Exerc%C3%ADcios/String%20e%20Estrturas/#4-gerar-acronimos","text":"Exemplo: Entrada: \"Universidade Federal do Rio\" \u2192 Sa\u00edda: \"UFR\"","title":"4. Gerar Acr\u00f4nimos"},{"location":"__Disciplina/Exerc%C3%ADcios/String%20e%20Estrturas/#solucoes-dos-exercicios","text":"","title":"Solu\u00e7\u00f5es dos Exerc\u00edcios"},{"location":"__Disciplina/Exerc%C3%ADcios/String%20e%20Estrturas/#solucao-1-palindromo-com-frase","text":"const frase = \"Ame o poema\"; const formatada = frase.toLowerCase().replace(/\\s/g, \"\"); const inverso = formatada.split(\"\").reverse().join(\"\"); console.log(formatada === inverso ? \"\u00c9 pal\u00edndromo!\" : \"N\u00e3o \u00e9 pal\u00edndromo.\");","title":"Solu\u00e7\u00e3o 1: Pal\u00edndromo com Frase"},{"location":"__Disciplina/Exerc%C3%ADcios/String%20e%20Estrturas/#solucao-5-inverter-com-dowhile","text":"let palavra = \"JavaScript\"; let invertida = \"\"; let i = palavra.length - 1; do { invertida += palavra[i]; i--; } while (i >= 0); console.log(invertida); Recursos: MDN - Strings JavaScript.info - Loops Esses exerc\u00edcios ajudam a consolidar l\u00f3gica de programa\u00e7\u00e3o e manipula\u00e7\u00e3o de strings! \ud83d\ude80","title":"Solu\u00e7\u00e3o 5: Inverter com do...while"}]}